

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (19 May 2023 20:06:17) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej6\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\Santiago\Downloads\Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:09:18'!
test02BalanceOneAccount

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test02BalanceOne stamp: 'aa 5/19/2023 20:09:19'!
test02BalanceOne

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:09:31'!
test02BalanceOnePortfolio
	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:11:49' prior: 50604458!
test02BalanceOnePortfolio
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: account with: portfolio1 ) .


	self assert: 50 equals: portfolio2 balance! !

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:11:51'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:11:51'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:11:55'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:11:55'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:12:12' prior: 50604468!
test02BalanceOnePortfolio
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: account with: portfolio1 ) .


	self assert: 50 equals: portfolio2 balance! !

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:12:21'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:12:21'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:13:08' prior: 50604493!
test02BalanceOnePortfolio
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1 ) .


	self assert: 50 equals: portfolio2 balance! !

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceMany stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOne stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 20:13:09'!
PASSED!

!testRun: #PortfolioTest #test10BalanceAddingAfterCreation stamp: 'aa 5/19/2023 20:13:09'!
FAILURE!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 20:13:09'!
FAILURE!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 20:13:09'!
FAILURE!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 20:13:09'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:13:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:13:50'!
test03BalanceManyAccount

	| account1 account2 portfolio1 portfolio2 |
	account1 := ReceptiveAccount new .
	Deposit register: 100 on: account1 .
	portfolio1 := Portfolio with: (OrderedCollection with: account1) .

	account2 := ReceptiveAccount new .
	Withdraw register: 50 on: account2 .
	portfolio2 := Portfolio with: (OrderedCollection with: account2 with: portfolio1 ) .

	self assert: 50 equals: portfolio2 balance! !

!methodRemoval: PortfolioTest #test03BalanceMany stamp: 'aa 5/19/2023 20:13:52'!
test03BalanceMany

	| account1 account2 portfolio1 portfolio2 |
	account1 := ReceptiveAccount new .
	Deposit register: 100 on: account1 .
	portfolio1 := Portfolio with: (OrderedCollection with: account1) .

	account2 := ReceptiveAccount new .
	Withdraw register: 50 on: account2 .
	portfolio2 := Portfolio with: (OrderedCollection with: account2 with: portfolio1 ) .

	self assert: 50 equals: portfolio2 balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:13:56'!
test03BalanceManyPortfolio

	| account1 account2 portfolio1 portfolio2 |
	account1 := ReceptiveAccount new .
	Deposit register: 100 on: account1 .
	portfolio1 := Portfolio with: (OrderedCollection with: account1) .

	account2 := ReceptiveAccount new .
	Withdraw register: 50 on: account2 .
	portfolio2 := Portfolio with: (OrderedCollection with: account2 with: portfolio1 ) .

	self assert: 50 equals: portfolio2 balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:16:24' prior: 50604571!
test03BalanceManyAccount

	| account1 account2 account3 portfolio |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	
	portfolio := Portfolio with: (OrderedCollection with: account1 with: account2 with: account3) .

	self assert: 15 equals: portfolio balance! !

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 20:16:26'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:18:54' prior: 50604602!
test03BalanceManyPortfolio

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3 with: account4 with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: portfolio2) .
	
	self assert: 80 equals: portfolio2 balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:18:59' prior: 50604639!
test03BalanceManyPortfolio

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3 with: account4 with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: portfolio2) .
	
	self assert: 80 equals: portfolio3 balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:19:27' prior: 50604667!
test03BalanceManyPortfolio

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 80 equals: portfolio3 balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:19:30' prior: 50604695!
test03BalanceManyPortfolio

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 80 equals: portfolio4 balance! !

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 20:19:31'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:20:03' prior: 50604725!
test03BalanceManyPortfolio

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:22:27'!
test01BalanceZeroAccountHasZeroTransactions

	self assert: 0 equals: (Portfolio with: OrderedCollection new) balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:22:59' prior: 50604788!
test01BalanceZeroAccountHasZeroTransactions

	| account |
	account := ReceptiveAccount new .
	self assert: 0 equals: (Portfolio with: OrderedCollection with: account) balance! !

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 20:23:00'!
ERROR!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 20:23:00'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:23:15' prior: 50604795!
test01BalanceZeroAccountHasZeroTransactions

	| account |
	account := ReceptiveAccount new .
	self assert: 0 equals: (Portfolio with: (OrderedCollection with: account)) balance! !

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOne stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 20:23:16'!
PASSED!

!testRun: #PortfolioTest #test10BalanceAddingAfterCreation stamp: 'aa 5/19/2023 20:23:16'!
FAILURE!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 20:23:16'!
FAILURE!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 20:23:16'!
FAILURE!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 20:23:16'!
FAILURE!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 20:23:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:23:38'!
test04HasRegisteredZeroAccountWithZeroTransactions

	| transaction |
	transaction := Deposit for: 50 .

	self deny: ((Portfolio with: OrderedCollection new) hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:25:07' prior: 50604873!
test04HasRegisteredZeroAccountWithZeroTransactions

	| account transaction |
	transaction := Deposit for: 50 .
	account := ReceptiveAccount new .

	self deny: ((Portfolio with: (OrderedCollection with: account)) hasRegistered: transaction)! !

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 20:25:12'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:25:19'!
test05HasRegisteredOneAccount

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:25:24'!
test05HasRegisteredOnePortfolio
	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )! !

!methodRemoval: PortfolioTest #test05HasRegisteredOne stamp: 'aa 5/19/2023 20:25:25'!
test05HasRegisteredOne

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:25:45' prior: 50604911!
test05HasRegisteredOnePortfolio
	| account transaction portfolio1 portfolio2 |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio1 hasRegistered: transaction )! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:26:09' prior: 50604935!
test05HasRegisteredOnePortfolio
	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:26:29' prior: 50604439!
test02BalanceOneAccount

	| account |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .

	self assert: 50 equals: (Portfolio with: (OrderedCollection with: account)) balance! !

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 20:26:29'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 20:26:29'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 20:26:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 20:26:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 20:26:30'!
PASSED!

!testRun: #PortfolioTest #test10BalanceAddingAfterCreation stamp: 'aa 5/19/2023 20:26:30'!
FAILURE!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 20:26:30'!
FAILURE!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 20:26:30'!
FAILURE!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 20:26:30'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:26:48' prior: 50604512!
test02BalanceOnePortfolio
	| account portfolio1 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .


	self assert: 50 equals: (Portfolio with: (OrderedCollection with: portfolio1 )) balance! !

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:26:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:27:05' prior: 50604618!
test03BalanceManyAccount

	| account1 account2 account3 portfolio |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .

	self assert: 15 equals: (Portfolio with: (OrderedCollection with: account1 with: account2 with: account3)) balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:27:09' prior: 50605041!
test03BalanceManyAccount

	| account1 account2 account3 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .

	self assert: 15 equals: (Portfolio with: (OrderedCollection with: account1 with: account2 with: account3)) balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:27:27' prior: 50605058!
test03BalanceManyAccount

	| account1 account2 account3 portfolio |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	
	portfolio := Portfolio with: (OrderedCollection with: account1 with: account2 with: account3) .

	self assert: 15 equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:27:49' prior: 50605026!
test02BalanceOnePortfolio
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1) .


	self assert: 50 equals: portfolio2 balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:27:52' prior: 50605093!
test02BalanceOnePortfolio
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1) .

	self assert: 50 equals: portfolio2 balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:28:10' prior: 50604960!
test02BalanceOneAccount

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:28:29' prior: 50604811!
test01BalanceZeroAccountHasZeroTransactions

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio with: (OrderedCollection with: account) .
	self assert: 0 equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:28:34' prior: 50605129!
test01BalanceZeroAccountHasZeroTransactions

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio with: (OrderedCollection with: account) .
	
	self assert: 0 equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:28:51' prior: 50604002!
test06HasRegisteredMany

	| account1 account2 portfolio1 portfolio2 transaction1 transaction2 |
	account1 := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	account1 register: transaction1 .
	portfolio1 := Portfolio with: (OrderedCollection with: account1) .
	
	account2 := ReceptiveAccount new .
	transaction2 := Deposit for: 100 .
	account2 register: transaction2 .
	portfolio2 := Portfolio with: (OrderedCollection with: account2 with: portfolio1) .

	self assert: (portfolio2 hasRegistered: transaction1 )! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:36:39' prior: 50605149!
test06HasRegisteredMany

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio2 with: portfolio3 ) .
	

	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )! !

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test10BalanceAddingAfterCreation stamp: 'aa 5/19/2023 20:36:40'!
FAILURE!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 20:36:40'!
FAILURE!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 20:36:40'!
FAILURE!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 20:36:40'!
FAILURE!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 20:36:43'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:39:42'!
test03BalanceAddingAfterCreation

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 20:40:33' prior: 50605265!
test03BalanceAddingAfterCreation

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance .
	
	Deposit register: 90 on: account2 .
	
	self assert: 200 equals: portfolio4 balance .! !

!testRun: #PortfolioTest #test03BalanceAddingAfterCreation stamp: 'aa 5/19/2023 20:40:35'!
PASSED!

!methodRemoval: PortfolioTest #test10BalanceAddingAfterCreation stamp: 'aa 5/19/2023 20:40:40'!
test10BalanceAddingAfterCreation

	| account transaction1 transaction2 portfolio |
	account := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	account register: transaction1 .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (Bag with: transaction1) equals: (portfolio transactions ) .
	
	transaction2 := Withdraw for: 100 .
	
	self assert: (Bag with: transaction1 with: transaction2 ) equals: (portfolio transactions ) .
	!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 21:02:39' prior: 50604076!
test10HasRegisteredAddingAfterCreation

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio2 with: portfolio3 ) .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction2 ) .
	
	account4 register: transaction2 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self assert: (portfolio3 hasRegistered: transaction2 ) .! !

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 21:02:45'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:02:51'!
FAILURE!

'a' = 'a'!

OrderedCollection new = OrderedCollection new!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 21:14:46' prior: 50604093!
test10NegativeBalance

	| account transaction1 transaction2 portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -100 equals: portfolio transactions .
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 21:14:52' prior: 50605399!
test10NegativeBalance

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -100 equals: portfolio transactions .
	! !

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:14:54'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 21:15:02' prior: 50605413!
test10NegativeBalance

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -100 equals: portfolio balance .
	! !

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:15:05'!
FAILURE!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:15:05'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 21:15:11' prior: 50605429!
test10NegativeBalance

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -50 equals: portfolio balance .
	! !

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:15:13'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceAddingAfterCreation stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:23:20'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:23:20'!
FAILURE!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:23:20'!
FAILURE!
!Portfolio methodsFor: 'initalization' stamp: 'aa 5/19/2023 21:24:01' prior: 50604333!
combineAccountsTransactions: aCollection 
	
	| combinedTransactions |
	
	combinedTransactions := OrderedCollection new .
	aCollection do: [:asset | combinedTransactions addAll: (asset transactions)] .
	^combinedTransactions 
	! !
!Portfolio methodsFor: 'getters' stamp: 'aa 5/19/2023 21:24:14' prior: 50604367!
transactions
	^self combineAccountsTransactions: transactions! !

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 21:24:35'!
ERROR!

!testRun: #PortfolioTest #test03BalanceAddingAfterCreation stamp: 'aa 5/19/2023 21:24:35'!
ERROR!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 21:24:35'!
ERROR!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 21:24:35'!
ERROR!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 21:24:35'!
FAILURE!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 21:24:35'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 21:24:35'!
ERROR!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 21:24:35'!
ERROR!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:24:35'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:24:35'!
ERROR!
!Portfolio methodsFor: 'getters' stamp: 'aa 5/19/2023 21:25:06' prior: 50605534!
transactions
	^self combineAccountsTransactions: collection ! !

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceAddingAfterCreation stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 21:25:08'!
FAILURE!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 21:25:08'!
FAILURE!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 21:25:08'!
FAILURE!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:25:08'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:25:08'!
FAILURE!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 21:25:21'!
FAILURE!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 21:25:21'!
FAILURE!
!Portfolio methodsFor: 'getters' stamp: 'aa 5/19/2023 21:25:44' prior: 50605524!
combineAccountsTransactions: aCollection 
	
	| combinedTransactions |
	
	combinedTransactions := Bag new .
	aCollection do: [:asset | combinedTransactions addAll: (asset transactions)] .
	^combinedTransactions 
	! !

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceAddingAfterCreation stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:25:45'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:25:45'!
FAILURE!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:25:45'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/19/2023 21:29:00' prior: 50604110!
test10TransactionsAddingAfterCreation

	| account transaction1 transaction2 portfolio |
	account := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	account register: transaction1 .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (Bag with: transaction1) equals: (portfolio transactions ) .
	
	transaction2 := Withdraw for: 100 .
	account register: transaction2 .
	
	self assert: (Bag with: transaction1 with: transaction2 ) equals: (portfolio transactions ) .
	! !

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceAddingAfterCreation stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:29:01'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:29:01'!
PASSED!
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/19/2023 21:31:29' prior: 50604371!
hasRegistered: aTransaction 
	
	^self transactions includes: aTransaction ! !

!testRun: #PortfolioTest #test01BalanceZero stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceAddingAfterCreation stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsZero stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test08TransactionsOne stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/19/2023 21:31:31'!
PASSED!

----SNAPSHOT----(20 May 2023 01:01:13) CuisUniversity-5706.image priorSource: 8713034!

----SNAPSHOT----(20 May 2023 01:01:18) CuisUniversity-5706.image priorSource: 8774704!

----SNAPSHOT----(20 May 2023 01:01:22) CuisUniversity-5706.image priorSource: 8774792!

----QUIT----(20 May 2023 02:53:30) CuisUniversity-5706.image priorSource: 8774880!

----STARTUP---- (20 May 2023 19:19:46) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej6\windows64\CuisUniversity-5706.image!

!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:27:04'!
test01GivenANewPortfolioThenBalanceIsZero

	self assert: 0 equals: (Portfolio with: OrderedCollection new) balance! !

!methodRemoval: PortfolioTest #test01BalanceZero stamp: 'aa 5/20/2023 19:27:06'!
test01BalanceZero

	self assert: 0 equals: (Portfolio with: OrderedCollection new) balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:27:49'!
test01GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio with: (OrderedCollection with: account) .
	
	self assert: 0 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test01BalanceZeroAccountHasZeroTransactions stamp: 'aa 5/20/2023 19:27:49'!
test01BalanceZeroAccountHasZeroTransactions

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio with: (OrderedCollection with: account) .
	
	self assert: 0 equals: portfolio balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:27:55'!
test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio with: (OrderedCollection with: account) .
	
	self assert: 0 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test01GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 19:27:55'!
test01GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio with: (OrderedCollection with: account) .
	
	self assert: 0 equals: portfolio balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:28:54'!
test03GivenAPortfolioWithOneAccountWhenAddingAnAccountWithATransactionThenBalanceIsThatTransactionValue

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test02BalanceOneAccount stamp: 'aa 5/20/2023 19:28:54'!
test02BalanceOneAccount

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:29:41'!
test04aaaaaaaaaaa
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1) .

	self assert: 50 equals: portfolio2 balance! !

!methodRemoval: PortfolioTest #test02BalanceOnePortfolio stamp: 'aa 5/20/2023 19:29:41'!
test02BalanceOnePortfolio
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1) .

	self assert: 50 equals: portfolio2 balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:29:54'!
test03GivenAPortfolioWithOneAccountWhenAddingATransactionThenBalanceIsThatTransactionValue

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test03GivenAPortfolioWithOneAccountWhenAddingAnAccountWithATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 19:29:54'!
test03GivenAPortfolioWithOneAccountWhenAddingAnAccountWithATransactionThenBalanceIsThatTransactionValue

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:30:26'!
test03GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1) .

	self assert: 50 equals: portfolio2 balance! !

!methodRemoval: PortfolioTest #test04aaaaaaaaaaa stamp: 'aa 5/20/2023 19:30:26'!
test04aaaaaaaaaaa
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1) .

	self assert: 50 equals: portfolio2 balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:30:33'!
test03GivenAPortfolioWithOneAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test03GivenAPortfolioWithOneAccountWhenAddingATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 19:30:33'!
test03GivenAPortfolioWithOneAccountWhenAddingATransactionThenBalanceIsThatTransactionValue

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:30:39'!
test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1) .

	self assert: 50 equals: portfolio2 balance! !

!methodRemoval: PortfolioTest #test03GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 19:30:39'!
test03GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio with: (OrderedCollection with: account) .
	portfolio2 := Portfolio with: (OrderedCollection with: portfolio1) .

	self assert: 50 equals: portfolio2 balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:30:56'!
test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test03GivenAPortfolioWithOneAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 19:30:56'!
test03GivenAPortfolioWithOneAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: 50 equals: portfolio balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:31:34'!
test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 portfolio |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	
	portfolio := Portfolio with: (OrderedCollection with: account1 with: account2 with: account3) .

	self assert: 15 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test03BalanceManyAccount stamp: 'aa 5/20/2023 19:31:34'!
test03BalanceManyAccount

	| account1 account2 account3 portfolio |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	
	portfolio := Portfolio with: (OrderedCollection with: account1 with: account2 with: account3) .

	self assert: 15 equals: portfolio balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:31:53'!
test03GivenAPortfolioWithMAnyA

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance! !

!methodRemoval: PortfolioTest #test03BalanceManyPortfolio stamp: 'aa 5/20/2023 19:31:53'!
test03BalanceManyPortfolio

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:32:23'!
test03GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance! !

!methodRemoval: PortfolioTest #test03GivenAPortfolioWithMAnyA stamp: 'aa 5/20/2023 19:32:23'!
test03GivenAPortfolioWithMAnyA

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:32:28'!
test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance! !

!methodRemoval: PortfolioTest #test03GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 19:32:28'!
test03GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:33:07'!
test03test06GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance .
	
	Deposit register: 90 on: account2 .
	
	self assert: 200 equals: portfolio4 balance .! !

!methodRemoval: PortfolioTest #test03BalanceAddingAfterCreation stamp: 'aa 5/20/2023 19:33:08'!
test03BalanceAddingAfterCreation

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance .
	
	Deposit register: 90 on: account2 .
	
	self assert: 200 equals: portfolio4 balance .!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:33:14'!
test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance .
	
	Deposit register: 90 on: account2 .
	
	self assert: 200 equals: portfolio4 balance .! !

!methodRemoval: PortfolioTest #test03test06GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 19:33:15'!
test03test06GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4 with: portfolio2) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio3) .
	
	self assert: 110 equals: portfolio4 balance .
	
	Deposit register: 90 on: account2 .
	
	self assert: 200 equals: portfolio4 balance .!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:34:17'!
test08GivenANewPortfolioThenItHasNoRegisteredTransactions

	| transaction |
	transaction := Deposit for: 50 .

	self deny: ((Portfolio with: OrderedCollection new) hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test04HasRegisteredZero stamp: 'aa 5/20/2023 19:34:17'!
test04HasRegisteredZero

	| transaction |
	transaction := Deposit for: 50 .

	self deny: ((Portfolio with: OrderedCollection new) hasRegistered: transaction)!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:42:15'!
test09GivenAPortfolioWithAnAccountWhenAddingATransactionToTheAccountThenThePortfolioHasItRegistered

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )! !

!methodRemoval: PortfolioTest #test05HasRegisteredOneAccount stamp: 'aa 5/20/2023 19:42:15'!
test05HasRegisteredOneAccount

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:43:09'!
test10GivenAPortfolioWithAPortfolioWithAnAccountWhenAddingATransactionToTheAccountThenThePortfolioHasItRegistered
	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )! !

!methodRemoval: PortfolioTest #test05HasRegisteredOnePortfolio stamp: 'aa 5/20/2023 19:43:10'!
test05HasRegisteredOnePortfolio
	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:44:47'!
test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )! !

!methodRemoval: PortfolioTest #test09GivenAPortfolioWithAnAccountWhenAddingATransactionToTheAccountThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 19:44:48'!
test09GivenAPortfolioWithAnAccountWhenAddingATransactionToTheAccountThenThePortfolioHasItRegistered

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:45:08'!
test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered
	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )! !

!methodRemoval: PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWhenAddingATransactionToTheAccountThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 19:45:08'!
test10GivenAPortfolioWithAPortfolioWithAnAccountWhenAddingATransactionToTheAccountThenThePortfolioHasItRegistered
	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (portfolio hasRegistered: transaction )!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:47:58'!
test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio2 with: portfolio3 ) .
	

	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )! !

!methodRemoval: PortfolioTest #test06HasRegisteredMany stamp: 'aa 5/20/2023 19:47:58'!
test06HasRegisteredMany

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio2 with: portfolio3 ) .
	

	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:50:10'!
test12GivenANewPortfolioThenItHasNoTransactions

	self assert: Bag new equals: ((Portfolio with: OrderedCollection new) transactions)! !

!methodRemoval: PortfolioTest #test07TransactionsZero stamp: 'aa 5/20/2023 19:50:10'!
test07TransactionsZero

	self assert: Bag new equals: ((Portfolio with: OrderedCollection new) transactions)!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:50:35'!
test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (Bag with: transaction) equals: (portfolio transactions )! !

!methodRemoval: PortfolioTest #test08TransactionsOne stamp: 'aa 5/20/2023 19:50:35'!
test08TransactionsOne

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (Bag with: transaction) equals: (portfolio transactions )!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:50:49' prior: 50606699!
test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio with: (OrderedCollection with: account) .

	self assert: (account transactions) equals: (portfolio transactions )! !

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 19:50:51'!
FAILURE!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 19:50:51'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/20/2023 19:51:12' prior: 50604417!
transactions 

	^ transactions asBag! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/20/2023 19:51:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 19:51:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 19:51:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/20/2023 19:51:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/20/2023 19:51:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/20/2023 19:51:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/20/2023 19:51:14'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 19:53:38'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 19:53:38'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:55:35' prior: 50604882!
test04HasRegisteredZeroAccountWithZeroTransactions

	| account transaction |
	transaction := Deposit for: 50 .
	account := ReceptiveAccount new .

	self deny: ((Portfolio with: (OrderedCollection with: account)) hasRegistered: transaction) .! !

Object subclass: #Asset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 19:59:48'!
Object subclass: #Asset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #Portfolio
	instanceVariableNames: 'collection transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:00:01'!
Asset subclass: #Portfolio
	instanceVariableNames: 'collection transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:00:09'!
Asset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(20 May 2023 20:08:47) CuisUniversity-5706.image priorSource: 8774968!

Asset subclass: #Portfolio
	instanceVariableNames: 'collection transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:11:26'!
Asset subclass: #Portfolio
	instanceVariableNames: 'collection transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:11:36'!
Asset subclass: #Portfolio
	instanceVariableNames: 'assets transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 20:11:36' prior: 50604364!
portfolio
	^assets ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 20:11:36' prior: 50605593!
transactions
	^self combineAccountsTransactions: assets ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 20:11:36' prior: 50604359!
balance
	
	^assets sum: [:each | each balance
		] ifEmpty: [0]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 20:11:36' prior: 50604348!
initializeWith: aCollection 

	assets := aCollection.
	"aCollection isEmptyOrNil ifTrue: [transactions := OrderedCollection new] ifFalse: [transactions := (aCollection at: 1) transactions]."
	transactions := self combineAccountsTransactions: aCollection! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/20/2023 20:12:19'!
addAsset: anAsset! !

Object subclass: #Asset
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #Portfolio
	instanceVariableNames: 'assets parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:12:55'!
Asset subclass: #Portfolio
	instanceVariableNames: 'assets parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #ReceptiveAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:12:58'!
Asset subclass: #ReceptiveAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Asset
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:13:01'!
Object subclass: #Asset
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Asset methodsFor: 'no messages' stamp: 'aa 5/20/2023 20:13:18'!
balance
	
	self subclassResponsibility ! !
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 20:13:34'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 20:13:45'!
transactions
	self subclassResponsibility ! !
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 20:13:49' prior: 50607005!
transactions

	self subclassResponsibility ! !

Object subclass: #Asset
	instanceVariableNames: 'transactions balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:14:17'!
Object subclass: #Asset
	instanceVariableNames: 'transactions balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'aa 5/20/2023 20:14:37' prior: 50604407 overrides: 16920235!
initialize

	transactions := OrderedCollection new.! !

Object subclass: #Asset
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 20:14:44'!
Object subclass: #Asset
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Asset class methodsFor: 'no messages' stamp: 'aa 5/20/2023 20:16:19'!
createAccountWith: aTransactionsCollection! !
!Portfolio methodsFor: 'initalization' stamp: 'aa 5/20/2023 20:20:42' overrides: 16920235!
initialize 

	assets := OrderedCollection new.
	transactions := Bag new! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:22:26' prior: 50605908!
test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio new .
	portfolio addAsset: account .
	
	self assert: 0 equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:22:36' prior: 50605875!
test01GivenANewPortfolioThenBalanceIsZero

	self assert: 0 equals: (Portfolio new) balance! !

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 20:22:48'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 20:22:49'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:22:50'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:22:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:24:11' prior: 50606091!
test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: 50 equals: portfolio balance! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/20/2023 20:25:28' prior: 50606952!
addAsset: anAsset

	assets add: anAsset! !

!methodRemoval: Portfolio class #with: stamp: 'aa 5/20/2023 20:25:38'!
with: anAccountsCollection
	^self new initializeWith: anAccountsCollection !

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 20:25:42'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 20:25:43'!
ERROR!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 20:25:43'!
ERROR!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:25:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:26:51' prior: 50606058!
test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: portfolio1 .

	self assert: 50 equals: portfolio2 balance! !

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:26:52'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 20:26:52'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 20:26:52'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:26:52'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:26:52'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 20:26:52'!
ERROR!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:26:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:28:10' prior: 50606855!
test04HasRegisteredZeroAccountWithZeroTransactions

	| account transaction portfolio |
	transaction := Deposit for: 50 .
	account := ReceptiveAccount new .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self deny: (portfolio hasRegistered: transaction) .! !

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 20:28:12'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:29:02' prior: 50606117!
test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 portfolio |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	
	portfolio := Portfolio new .
	portfolio addAsset: account1 .
	portfolio addAsset: account2 .
	portfolio addAsset: account3 .

	self assert: 15 equals: portfolio balance! !

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:29:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:30:47' prior: 50606274!
test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio3 addAsset: portfolio2 .
	portfolio4 := Portfolio new . 
	portfolio3 addAsset: portfolio3 .
	
	self assert: 110 equals: portfolio4 balance! !

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:30:49'!
FAILURE!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:30:49'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:31:21' prior: 50607269!
test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio3 addAsset: portfolio2 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio3 .
	
	self assert: 110 equals: portfolio4 balance! !

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:31:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:32:56' prior: 50606407!
test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio3 addAsset: portfolio2 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio3 .
	
	self assert: 110 equals: portfolio4 balance .
	
	Deposit register: 90 on: account2 .
	
	self assert: 200 equals: portfolio4 balance .! !

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:32:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:33:45' prior: 50606480!
test08GivenANewPortfolioThenItHasNoRegisteredTransactions

	| transaction portfolio |
	transaction := Deposit for: 50 .
	portfolio := Portfolio new .

	self deny: (portfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 20:33:46'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 20:33:46'!
ERROR!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 20:33:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:44:28' prior: 50606548!
test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: (portfolio hasRegistered: transaction )! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:44:34' prior: 50607484!
test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered

	| account transaction portfolio |
	
	transaction := Deposit for:50 .
	account := ReceptiveAccount new .
	account register: transaction .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: (portfolio hasRegistered: transaction )! !

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 20:44:35'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 20:44:35'!
ERROR!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 20:44:35'!
ERROR!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 20:44:35'!
ERROR!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 20:44:35'!
ERROR!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 20:44:35'!
ERROR!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 20:44:35'!
ERROR!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 20:44:35'!
ERROR!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 20:44:35'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:45:09' prior: 50606578!
test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered
	
	| account transaction portfolio |
	
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: (portfolio hasRegistered: transaction )! !

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 20:45:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:46:38' prior: 50606609!
test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio3 addAsset: portfolio2 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio3 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )
	
	! !

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 20:46:39'!
FAILURE!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 20:46:39'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 19:47:58' prior: 50607611!
test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio with: (OrderedCollection with: account1 with: account2) .
	portfolio2 := Portfolio with: (OrderedCollection with: account3  with: portfolio1 ) .
	portfolio3 := Portfolio with: (OrderedCollection with: account4) .
	portfolio4 := Portfolio with: (OrderedCollection with: portfolio2 with: portfolio3 ) .
	

	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:48:42' prior: 50607665!
test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio2 .
	portfolio4 addAsset: portfolio3 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )! !

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 20:48:43'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:52:40' prior: 50606686!
test12GivenANewPortfolioThenItHasNoTransactions

	| portfolio |
	portfolio := Portfolio new .

	self assert: Bag new equals: (portfolio transactions)! !

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 20:52:43'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 20:53:05' prior: 50606725!
test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions

	| account transaction portfolio |
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: (account transactions) equals: (portfolio transactions)! !

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 20:53:07'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 20:54:31'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 21:07:58' prior: 50604039!
test09TransactionsMany

	| account1 account2 portfolio1 portfolio2 transaction1 transaction2 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	transaction2 := Deposit for: 100 .
	account1 register: transaction1 .
	account2 register: transaction2 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account2 .
	portfolio2 addAsset: portfolio1 .

	self assert: (Bag with: transaction1 with: transaction2) equals: (portfolio2 transactions )
	! !

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 21:08:00'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 21:08:42' prior: 50605349!
test10HasRegisteredAddingAfterCreation

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio2 .
	portfolio4 addAsset: portfolio3 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction2 ) .
	
	account4 register: transaction2 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self assert: (portfolio3 hasRegistered: transaction2 ) .! !

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 21:08:45'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 21:09:04' prior: 50605448!
test10NegativeBalance

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -50 equals: portfolio balance .
	! !

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 21:09:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/20/2023 21:09:30' prior: 50605725!
test10TransactionsAddingAfterCreation

	| account transaction1 transaction2 portfolio |
	account := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	account register: transaction1 .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: (Bag with: transaction1) equals: (portfolio transactions ) .
	
	transaction2 := Withdraw for: 100 .
	account register: transaction2 .
	
	self assert: (Bag with: transaction1 with: transaction2 ) equals: (portfolio transactions ) .
	! !

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 21:10:19'!
PASSED!

----SNAPSHOT----(20 May 2023 22:05:00) CuisUniversity-5706.image priorSource: 8808038!
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 22:06:07' overrides: 16920235!
initialize

	self subclassResponsibility ! !

!methodRemoval: Portfolio #initializeWith: stamp: 'aa 5/20/2023 22:10:56'!
initializeWith: aCollection 

	assets := aCollection.
	"aCollection isEmptyOrNil ifTrue: [transactions := OrderedCollection new] ifFalse: [transactions := (aCollection at: 1) transactions]."
	transactions := self combineAccountsTransactions: aCollection!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 22:11:04'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 22:11:04'!
PASSED!
!Portfolio methodsFor: 'getters' stamp: 'aa 5/20/2023 22:11:53' prior: 50605658!
combineAccountsTransactions: assetsCollection 
	
	| combinedTransactions |
	
	combinedTransactions := Bag new .
	assetsCollection do: [:asset | combinedTransactions addAll: (asset transactions)] .
	^combinedTransactions 
	! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/20/2023 22:12:54' prior: 50607102!
addAsset: anAsset

	self assertIntersectionIsEmpty .
	assets add: anAsset
	! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/20/2023 22:37:20'!
assertIntersectionIsEmpty: aPortfolio! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/20/2023 22:52:08' prior: 50607998!
addAsset: anAsset

	self assertIntersectionIsEmpty: anAsset .
	assets add: anAsset
	! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/20/2023 22:52:21' prior: 50608007!
addAsset: anAsset

	self assertIntersectionIsEmpty: anAsset .
	assets add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/20/2023 23:05:57' prior: 50608013!
addAsset: anAsset

	self assertIntersectionIsEmpty: anAsset .
	anAsset linkToParent .
	assets add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/20/2023 23:06:26'!
linkToParent: parent

	parents add: parent

	! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'aa 5/20/2023 23:06:54'!
parenting! !

!methodRemoval: ReceptiveAccount #parenting stamp: 'aa 5/20/2023 23:06:59'!
parenting!

Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 23:07:14'!
Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Asset
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'aa 5/20/2023 23:07:18'!
Object subclass: #Asset
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 23:07:23'!
linkToParent: parent

	parents add: parent! !

!methodRemoval: Portfolio #linkToParent: stamp: 'aa 5/20/2023 23:07:28'!
linkToParent: parent

	parents add: parent

	!
!Portfolio methodsFor: 'adding' stamp: 'aa 5/20/2023 23:07:47' prior: 50608019!
addAsset: anAsset

	self assertIntersectionIsEmpty: anAsset .
	anAsset linkToParent: self .
	assets add: anAsset! !
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 23:09:45' prior: 50607000!
hasRegistered: aTransaction

	^self transactions includes: aTransaction! !

!methodRemoval: ReceptiveAccount #hasRegistered: stamp: 'aa 5/20/2023 23:10:23'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/20/2023 23:10:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 23:10:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 23:10:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/20/2023 23:10:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/20/2023 23:10:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/20/2023 23:10:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/20/2023 23:10:30'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 23:10:32'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 23:10:32'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 23:10:32'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 23:10:32'!
ERROR!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 23:10:51'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 23:10:53'!
ERROR!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 23:10:53'!
ERROR!
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/20/2023 23:11:25' prior: 50608059!
linkToParent: parentNode

	parents add: parentNode! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/20/2023 23:11:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 23:11:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 23:11:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/20/2023 23:11:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/20/2023 23:11:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/20/2023 23:11:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/20/2023 23:11:32'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 23:11:33'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 23:11:33'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 23:11:33'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 23:11:33'!
ERROR!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:11:44'!
ERROR!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:11:44'!
ERROR!
!Portfolio methodsFor: 'initalization' stamp: 'aa 5/20/2023 23:12:18' prior: 50607049 overrides: 50607897!
initialize 

	assets := OrderedCollection new.
	transactions := Bag new .
	parents := Bag new! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'aa 5/20/2023 23:12:32' prior: 50607028 overrides: 50607897!
initialize

	transactions := OrderedCollection new .
	parents := Bag new .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/20/2023 23:12:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 23:12:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 23:12:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/20/2023 23:12:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/20/2023 23:12:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/20/2023 23:12:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/20/2023 23:12:34'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 23:12:36'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 23:18:39'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 23:18:39'!
PASSED!
!Portfolio methodsFor: 'getters' stamp: 'aa 5/20/2023 23:22:33'!
assets
	^assets ! !

!methodRemoval: Portfolio #portfolio stamp: 'aa 5/20/2023 23:22:33'!
portfolio
	^assets !

!methodRemoval: Portfolio #hasRegistered: stamp: 'aa 5/20/2023 23:26:34'!
hasRegistered: aTransaction 
	
	^self transactions includes: aTransaction !

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsMany stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test10NegativeBalance stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/20/2023 23:26:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/20/2023 23:26:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 23:26:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/20/2023 23:26:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/20/2023 23:26:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/20/2023 23:26:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/20/2023 23:26:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/20/2023 23:26:39'!
PASSED!
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/20/2023 23:40:24' prior: 50608003!
assertIntersectionIsEmpty: aPortfolio

	parents size = 0 
	ifTrue: [
		
	] 
	ifFalse: [ 
		parents do: [ :asset | 
			asset assertIntersectionIsEmpty: aPortfolio 
		] 
	]! !
!Portfolio methodsFor: 'getters' stamp: 'aa 5/20/2023 23:42:35'!
getRootPortfolios

	! !
!Portfolio methodsFor: 'getters' stamp: 'aa 5/20/2023 23:44:03' prior: 50608629!
getRootPortfolios

	| rootPortfolios |
	
	rootPortfolios := OrderedCollection new .
	
	parents do: [ :asset | 
		rootPortfolios add: (asset getRootPortfolios)
	] ! !
!Portfolio methodsFor: 'getters' stamp: 'aa 5/20/2023 23:49:26'!
getRootPortfolios: rootPortfolios

	parents size = 0
	ifTrue: [  ] 
	ifFalse:  [ parents do: [ :asset | 
		asset getRootPortfolios: rootPortfolios 
		] 
	]! !

!methodRemoval: Portfolio #getRootPortfolios stamp: 'aa 5/20/2023 23:49:28'!
getRootPortfolios

	| rootPortfolios |
	
	rootPortfolios := OrderedCollection new .
	
	parents do: [ :asset | 
		rootPortfolios add: (asset getRootPortfolios)
	] !
!Portfolio methodsFor: 'getters' stamp: 'aa 5/20/2023 23:52:50' prior: 50608641!
getRootPortfolios: rootPortfolios

	parents size = 0
	ifTrue: [ rootPortfolios add: self ] 
	ifFalse:  [ parents do: [ :asset | 
		asset getRootPortfolios: rootPortfolios 
		] 
	]! !

portfolio1 := Portfolio new!

portfolio2 := Portfolio new!

portfolio3 := Portfolio new!

portfolio4 := Portfolio new!

portfolio1 addAsset: portfolio2!

portfolio2 addAsset: portfolio3!

portfolio4 addAsset: portfolio2!

rootPortfolios := OrderedCollection new!

portfolio3 getRootPortfolios: rootPortfolios !

rootPortfolios !

rootPortfolios!

(rootPortfolios at: 1) = portfolio1!

(rootPortfolios at: 1) = portfolio4!

(rootPortfolios at: 2) = portfolio4!

OrderedCollection!

Collection!

Collection!

OrderedCollection!

OrderedCollection!

SequenceableCollection!
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:08:38' prior: 50608621!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		rootPortfolios 
	]! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:14:39' prior: 50608684!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		"((rootPortfolios assets) difference: (self assets)) size = 0 ifFalse: [self error: intersectionBetweenPortfoliosIsNotEmpty]"
	]! !
!Portfolio class methodsFor: 'instance creation' stamp: 'aa 5/21/2023 00:15:52'!
intersectionBetweenPortfoliosIsNotEmpty

	^'La intersección entre portfolios no es vacia!!'! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:16:22' prior: 50608693!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		((rootPortfolios assets) difference: (self assets)) size = 0 ifFalse: [self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:18:00' prior: 50608712!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		((rootPortfolios assets) difference: (self assets)) size = 0 ifFalse: [self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]

	^true! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:19:15' prior: 50608725!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		((rootPortfolios assets) intersection: (self assets)) size = 0 ifFalse: [self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]

	^true! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:20:15' prior: 50608738!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		currentIntersection := (rootPortfolios assets) intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]

	^true! !

----End fileIn of C:\Users\Santiago\Desktop\UBA\Inge1\Ej5\windows64\MarsRover.st----!
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:22:18' prior: 50608751!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		currentIntersection := (rootPortfolios assets) intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]

	^true! !

portfolio1 := Portfolio new!

portfolio2 := Portfolio new!

portfolio3 := Portfolio new!

portfolio4 := Portfolio new!

portfolio5 := Portfolio new!

portfolio1 addAsset: portfolio2!

portfolio1 addAsset: portfolio2!

portfolio1 addAsset: portfolio2!
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:25:57' prior: 50609158!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		currentIntersection := (rootPortfolios assets) intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]
! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:30:49' prior: 50609181!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios 
	ifEmpty: [
		currentIntersection := (self assets) intersection: (aPortfolio assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
		]  
	ifNotEmpty: [
		rootPortfolios do: [ :asset |
			currentIntersection := (asset assets) intersection: (aPortfolio assets) .
			currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
		]
	]
	
	
! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:31:36' prior: 50609196!
assertIntersectionIsEmpty: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		currentIntersection := (asset assets) intersection: (aPortfolio assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]
	
	
! !

portfolio1 addAsset: portfolio2!

portfolio1 assets!

portfolio2 addAsset: portfolio3!

portfolio2 addAsset: portfolio3!

portfolio4 addAsset: portfolio2!

portfolio5 addAsset: portfolio4!

account1 := ReceptiveAccount new!

account2 := ReceptiveAccount new!

portfolio3 addAsset: account1 !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/21/2023 00:34:48'!
assertIntersectionIsEmpty: aPortfolio! !

account2 := ReceptiveAccount new!

portfolio3 addAsset: account1 !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:36:00' prior: 50609219!
assertIntersectionIsEmpty: anAssetToAdd

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
	
	rootPortfolios do: [ :asset |
		currentIntersection := (asset assets) intersection: (anAssetToAdd assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]
	
	
! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 00:37:35' prior: 50609249!
assertIntersectionIsEmpty: anAssetToAdd

	| rootPortfolios currentIntersection |
	
	(anAssetToAdd isKindOf: Portfolio) ifTrue: [
		rootPortfolios := OrderedCollection new .
		self getRootPortfolios: rootPortfolios . 
		
		rootPortfolios do: [ :asset |
			currentIntersection := (asset assets) intersection: (anAssetToAdd assets) .
			currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
		]
	]
	
	
! !

portfolio3 addAsset: account1 !

portfolio5 assets!

portfolio3 assets!

portfolio5 addAsset: account1 !

rootPortfolios := OrderedCollection new!

portfolio5 getRootPortfolios: rootPortfolios !

(portfolio5 getRootPortfolios: rootPortfolios) = selfPortfolio !

(portfolio5 getRootPortfolios: rootPortfolios) = self!

(portfolio5 getRootPortfolios: rootPortfolios) = portfolio5 !

portfolio5 addAsset: account1!

portfolio5 assets!

portfolio1 := Portfolio new!

portfolio2 := Portfolio new!

portfolio3 := Portfolio new!

portfolio4 := Portfolio new!

portfolio5 := Portfolio new!

portfolio6 := Portfolio new!

account1 := ReceptiveAccount new!

account2 := ReceptiveAccount new!
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:12:05'!
checkIntersection: aPortfolio! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:12:54' prior: 50609302!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
		self getRootPortfolios: rootPortfolios . 
		
		rootPortfolios do: [ :asset |
			currentIntersection := (asset assets) intersection: (aPortfolio assets) .
			currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
		]! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:13:05' prior: 50609306!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	self getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		currentIntersection := (asset assets) intersection: (aPortfolio assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:13:16' prior: 50609264!
assertIntersectionIsEmpty: anAssetToAdd

	
	
	(anAssetToAdd isKindOf: Portfolio) ifTrue: [
		self checkIntersection: anAssetToAdd 
	]
	
	
! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:13:21' prior: 50609336!
assertIntersectionIsEmpty: anAssetToAdd	
	
	(anAssetToAdd isKindOf: Portfolio) ifTrue: [
		self checkIntersection: anAssetToAdd 
	]
	
	
! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:13:43' prior: 50609343!
assertIntersectionIsEmpty: anAssetToAdd	
	
	(anAssetToAdd isKindOf: Portfolio) ifTrue: [
		anAssetToAdd checkIntersection: self
	]
	
	
! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:13:49' prior: 50609350!
assertIntersectionIsEmpty: anAssetToAdd	
	
	anAssetToAdd checkIntersection: self
	
! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:14:06' prior: 50609321!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		currentIntersection := (asset assets) intersection: (aPortfolio assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:14:21' prior: 50609363!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		currentIntersection := (asset assets) intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]! !
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:15:26'!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		currentIntersection := (asset assets) includes: self ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]! !
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:15:33' prior: 50609393!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		(currentIntersection := (asset assets) includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]! !
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:15:51' prior: 50609407!
checkIntersection: aPortfolio

	| rootPortfolios |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		((asset assets) includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]! !
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/21/2023 01:16:51'!
assertIntersectionIsEmpty: anAssetToAdd	

	self subclassResponsibility ! !
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/21/2023 01:17:01'!
checkIntersection: aPortfolio
	
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:17:35' prior: 50609421 overrides: 50609438!
checkIntersection: anAccount

	| rootPortfolios |

	rootPortfolios := OrderedCollection new .
	anAccount getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		((asset assets) includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]! !
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 01:17:50' prior: 50609444 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		((asset assets) includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]! !

portfolio1 addAsset: portfolio2!

portfolio2 addAsset: portfolio3!

portfolio4 addAsset: portfolio2!

portfolio5 addAsset: portfolio4!

portfolio5 addAsset: portfolio6!

portfolio6 addAsset: account1!

portfolio6 addAsset: account1!

portfolio6 addAsset: account1!

portfolio6 assets!

portfolio6 assets!
!Portfolio methodsFor: 'initalization' stamp: 'aa 5/21/2023 01:31:46' prior: 50608316 overrides: 50607897!
initialize 

	assets := OrderedCollection new.
	transactions := Bag new .
	parents := Set new! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'aa 5/21/2023 01:31:56' prior: 50608323 overrides: 50607897!
initialize

	transactions := OrderedCollection new .
	parents := Set new .! !

portfolio1 := Portfolio new!

portfolio2 := Portfolio new!

portfolio3 := Portfolio new!

portfolio4 := Portfolio new!

portfolio5 := Portfolio new!

portfolio6 := Portfolio new!

account1 := ReceptiveAccount new!

account2 := ReceptiveAccount new!

portfolio6 assets!

portfolio1 addAsset: portfolio2!

portfolio2 addAsset: portfolio3!

portfolio4 addAsset: portfolio2!

portfolio5 addAsset: portfolio4!

portfolio5 addAsset: portfolio6!

portfolio6 assets!

portfolio6 addAsset: account1!

portfolio6 assets !
!Portfolio methodsFor: 'getters' stamp: 'aa 5/21/2023 01:38:17'!
combinedAccountsTransactions: assetsCollection 
	
	| combinedTransactions |
	
	combinedTransactions := Bag new .
	assetsCollection do: [:asset | combinedTransactions addAll: (asset transactions)] .
	^combinedTransactions 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'aa 5/21/2023 01:38:17' prior: 50606931 overrides: 50607010!
transactions
	^self combinedAccountsTransactions: assets ! !

!methodRemoval: Portfolio #combineAccountsTransactions: stamp: 'aa 5/21/2023 01:38:17'!
combineAccountsTransactions: assetsCollection 
	
	| combinedTransactions |
	
	combinedTransactions := Bag new .
	assetsCollection do: [:asset | combinedTransactions addAll: (asset transactions)] .
	^combinedTransactions 
	!
!Portfolio methodsFor: 'getters' stamp: 'aa 5/21/2023 01:40:48' prior: 50608507!
assets

	^assets ! !
!Portfolio methodsFor: 'getters' stamp: 'aa 5/21/2023 01:45:54'!
allAssets

	| resultAssets |
	resultAssets := OrderedCollection new .
	assets do: [ :asset | 
		resultAssets add: asset .
		asset allAssets 
	]! !
!Portfolio methodsFor: 'getters' stamp: 'aa 5/21/2023 01:47:00'!
allAssets: assetsCollection

	| resultAssets |
	resultAssets := OrderedCollection new .
	assets do: [ :asset | 
		resultAssets add: asset .
		asset allAssets: resultAssets 
	]! !

!methodRemoval: Portfolio #allAssets stamp: 'aa 5/21/2023 01:47:01'!
allAssets

	| resultAssets |
	resultAssets := OrderedCollection new .
	assets do: [ :asset | 
		resultAssets add: asset .
		asset allAssets 
	]!
!Portfolio methodsFor: 'getters' stamp: 'aa 5/21/2023 01:47:41' prior: 50609544!
allAssets: assetsCollection

	assets do: [ :asset | 
		assetsCollection add: asset .
		asset allAssets: assetsCollection 
	]! !
!ReceptiveAccount methodsFor: 'getters' stamp: 'aa 5/21/2023 01:48:41'!
allAssets: assetsCollection

	assetsCollection add: self! !

allAssetsCollection := OrderedCollection new !

portfolio5 allAssets: allAssetsCollection !

portfolio5 allAssets: allAssetsCollection = portfolio5!

(portfolio5 allAssets: allAssetsCollection) = portfolio5!

portfolio6 := Portfolio new!

portfolio1 := Portfolio new!

portfolio2 := Portfolio new!

portfolio3 := Portfolio new!

portfolio4 := Portfolio new!

portfolio5 := Portfolio new!

portfolio6 := Portfolio new!

account1 := ReceptiveAccount new!

account2 := ReceptiveAccount new!

portfolio1 addAsset: portfolio2 .
portfolio2 addAsset: portfolio3 .
portfolio4 addAsset: portfolio2 .
portfolio5 addAsset: portfolio4 .
portfolio5 addAsset: portfolio6 .!

allAssetsCollection := OrderedCollection new !

portfolio5 allAssets: allAssetsCollection!

portfolio5 allAssets: allAssetsCollection!
!Portfolio methodsFor: 'getters' stamp: 'aa 5/21/2023 01:53:54' prior: 50609559!
allAssets: assetsCollection

	

	assets do: [ :asset | 
		assetsCollection add: asset .
		asset allAssets: assetsCollection 
	]! !

allAssetsCollection := OrderedCollection new !

portfolio5 allAssets: allAssetsCollection!

allAssetsCollection !

allAssetsCollection includes: portfolio1!

allAssetsCollection includes: portfolio2!

allAssetsCollection includes: portfolio3!

allAssetsCollection includes: portfolio4!

allAssetsCollection includes: portfolio6!

portfolio6 addAsset: account1 .!

portfolio6 assets!

portfolio6 addAsset: account1 .!

portfolio6 assets!
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 02:01:04' prior: 50609378 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		currentIntersection := (asset allAssets: allAssetsForCurrentAsset) intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]! !

portfolio1 := Portfolio new .
portfolio2 := Portfolio new .
portfolio3 := Portfolio new .
portfolio4 := Portfolio new .
portfolio5 := Portfolio new .
portfolio6 := Portfolio new .

account1 := ReceptiveAccount new .
account2 := ReceptiveAccount new .

portfolio1 addAsset: portfolio2 .
portfolio2 addAsset: portfolio3 .
portfolio4 addAsset: portfolio2 .
portfolio5 addAsset: portfolio4 .
portfolio5 addAsset: portfolio6 .!

portfolio1 := Portfolio new .!

portfolio2 := Portfolio new .!

portfolio3 := Portfolio new .!

portfolio4 := Portfolio new .!

portfolio5 := Portfolio new .!

portfolio6 := Portfolio new .!

account1 := ReceptiveAccount new .!

account2 := ReceptiveAccount new .!

portfolio1 addAsset: portfolio2 .!

portfolio2 addAsset: portfolio3 .!
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 02:04:42' prior: 50609617 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		(asset allAssets: allAssetsForCurrentAsset) .
		currentIntersection := allAssetsForCurrentAsset intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 02:04:47' prior: 50609660 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		currentIntersection := allAssetsForCurrentAsset intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	]! !

portfolio1 := Portfolio new .!

portfolio2 := Portfolio new .!

portfolio3 := Portfolio new .!

portfolio4 := Portfolio new .!

portfolio5 := Portfolio new .!

portfolio6 := Portfolio new .!

account1 := ReceptiveAccount new .!

account2 := ReceptiveAccount new .!

portfolio1 addAsset: portfolio2 .!

portfolio2 addAsset: portfolio3 .!

portfolio4 addAsset: portfolio2 .!

portfolio5 addAsset: portfolio4 .!

portfolio5 addAsset: portfolio6 .!

portfolio6 addAsset: account1 .!

portfolio6 addAsset: account1!
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 02:05:54' prior: 50609457 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		((asset assets) includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]! !
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 02:06:34' prior: 50609716 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		(allAssetsForCurrentAsset includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]! !

portfolio6 addAsset: account1 .!

portfolio3 addAsset: account2 .!

portfolio6 addAsset: account2 .!

portfolio3 addAsset: account2 .!
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 02:16:34' prior: 50609730 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		(allAssetsForCurrentAsset includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]
! !
!ReceptiveAccount methodsFor: 'asserts' stamp: 'aa 5/21/2023 02:16:40' prior: 50609751 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		(allAssetsForCurrentAsset includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] 
	]
	! !

----SNAPSHOT----(21 May 2023 02:53:25) CuisUniversity-5706.image priorSource: 8839775!

----SNAPSHOT----(21 May 2023 02:53:29) CuisUniversity-5706.image priorSource: 8900268!

----STARTUP---- (21 May 2023 13:49:48) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej6\windows64\CuisUniversity-5706.image!

!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 13:55:59'!
test08GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -50 equals: portfolio balance .
	! !

!methodRemoval: PortfolioTest #test10NegativeBalance stamp: 'aa 5/21/2023 13:55:59'!
test10NegativeBalance

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -50 equals: portfolio balance .
	!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 13:58:19'!
test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: portfolio1 .

	self assert: 50 equals: portfolio2 balance! !

!methodRemoval: PortfolioTest #test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/21/2023 13:58:19'!
test04GivenAPortfolioWithOnePortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue
	| account portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: portfolio1 .

	self assert: 50 equals: portfolio2 balance!
!Portfolio methodsFor: 'getters' stamp: 'aa 5/21/2023 14:13:19' prior: 50609596!
allAssets: assetsCollection

	assets do: [ :asset | 
		assetsCollection add: asset .
		asset allAssets: assetsCollection 
	]! !

!methodRemoval: PortfolioTest #test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/21/2023 14:14:06'!
test07GivenAPortfolioWithManyPortfoliosAndAccountsWhenRegisteringATransactionThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio3 addAsset: portfolio2 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio3 .
	
	self assert: 110 equals: portfolio4 balance .
	
	Deposit register: 90 on: account2 .
	
	self assert: 200 equals: portfolio4 balance .!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:14:20'!
test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -50 equals: portfolio balance .
	! !

!methodRemoval: PortfolioTest #test08GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/21/2023 14:14:20'!
test08GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -50 equals: portfolio balance .
	!

!methodRemoval: PortfolioTest #test10HasRegisteredAddingAfterCreation stamp: 'aa 5/21/2023 14:14:36'!
test10HasRegisteredAddingAfterCreation

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio2 .
	portfolio4 addAsset: portfolio3 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction2 ) .
	
	account4 register: transaction2 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self assert: (portfolio3 hasRegistered: transaction2 ) .!

!methodRemoval: PortfolioTest #test10TransactionsAddingAfterCreation stamp: 'aa 5/21/2023 14:26:17'!
test10TransactionsAddingAfterCreation

	| account transaction1 transaction2 portfolio |
	account := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	account register: transaction1 .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: (Bag with: transaction1) equals: (portfolio transactions ) .
	
	transaction2 := Withdraw for: 100 .
	account register: transaction2 .
	
	self assert: (Bag with: transaction1 with: transaction2 ) equals: (portfolio transactions ) .
	!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:37:28' prior: 50607705!
test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio2 .
	portfolio4 addAsset: portfolio3 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:39:30'!
test14GivenAPortfolioWithManyPortfoliosAndAccountsThenThePortfolioHasItsAssetsTransactionsRegistered

	| account1 account2 portfolio1 portfolio2 transaction1 transaction2 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	transaction2 := Deposit for: 100 .
	account1 register: transaction1 .
	account2 register: transaction2 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account2 .
	portfolio2 addAsset: portfolio1 .

	self assert: (Bag with: transaction1 with: transaction2) equals: (portfolio2 transactions )
	! !

!methodRemoval: PortfolioTest #test09TransactionsMany stamp: 'aa 5/21/2023 14:39:30'!
test09TransactionsMany

	| account1 account2 portfolio1 portfolio2 transaction1 transaction2 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	transaction2 := Deposit for: 100 .
	account1 register: transaction1 .
	account2 register: transaction2 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account2 .
	portfolio2 addAsset: portfolio1 .

	self assert: (Bag with: transaction1 with: transaction2) equals: (portfolio2 transactions )
	!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:39:41'!
test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered

	| account1 account2 portfolio1 portfolio2 transaction1 transaction2 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	transaction2 := Deposit for: 100 .
	account1 register: transaction1 .
	account2 register: transaction2 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account2 .
	portfolio2 addAsset: portfolio1 .

	self assert: (Bag with: transaction1 with: transaction2) equals: (portfolio2 transactions )
	! !

!methodRemoval: PortfolioTest #test14GivenAPortfolioWithManyPortfoliosAndAccountsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/21/2023 14:39:41'!
test14GivenAPortfolioWithManyPortfoliosAndAccountsThenThePortfolioHasItsAssetsTransactionsRegistered

	| account1 account2 portfolio1 portfolio2 transaction1 transaction2 |
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	transaction1 := Deposit for:50 .
	transaction2 := Deposit for: 100 .
	account1 register: transaction1 .
	account2 register: transaction2 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account2 .
	portfolio2 addAsset: portfolio1 .

	self assert: (Bag with: transaction1 with: transaction2) equals: (portfolio2 transactions )
	!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:40:07'!
test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio2 .
	portfolio4 addAsset: portfolio3 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )! !

!methodRemoval: PortfolioTest #test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/21/2023 14:40:07'!
test11GivenAPortfolioWithWithMultipleAccountsAndPortfoliosWithTransactionsThenThePortfolioHasThoseTransactionsRegistered

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 transaction1 transaction2 |

	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	transaction1 := Deposit for:50 .
	transaction2 := Withdraw for: 80 .
	
	account2 register: transaction1 .
	account1 register: transaction2 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio2 .
	portfolio4 addAsset: portfolio3 .
	
	self assert: (portfolio4 hasRegistered: transaction1 ) .
	self deny: (portfolio3 hasRegistered: transaction1 )!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:41:04' prior: 50607592!
test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered
	
	| account transaction portfolio1 portfolio2 |
	
	account := ReceptiveAccount new .
	transaction := Deposit for:50 .
	account register: transaction .
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: portfolio1 .

	self assert: (portfolio2 hasRegistered: transaction )! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:41:37' prior: 50609899!
test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	Deposit register: 25 on: account .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: 50 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -25 equals: portfolio balance .
	! !

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/21/2023 14:41:41'!
FAILURE!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/21/2023 14:41:41'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/21/2023 14:41:41'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:41:51' prior: 50610205!
test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative

	| account portfolio |
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	Deposit register: 25 on: account .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self assert: 75 equals: portfolio balance .
	
	Withdraw register: 100 on: account .
	
	self assert: -25 equals: portfolio balance .
	! !

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/21/2023 14:41:52'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/21/2023 14:41:53'!
PASSED!

!testRun: #PortfolioTest #test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/21/2023 14:41:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 14:42:04'!
test06GivenAPortfolioWithManyPAssetsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio3 addAsset: portfolio2 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio3 .
	
	self assert: 110 equals: portfolio4 balance! !

!methodRemoval: PortfolioTest #test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/21/2023 14:42:04'!
test06GivenAPortfolioWithManyPortfoliosAndAccountsThenBalanceIsTheSumOfAllBalances

	| account1 account2 account3 account4 portfolio1 portfolio2 portfolio3 portfolio4 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	account3 := ReceptiveAccount new .
	account4 := ReceptiveAccount new .
	
	Deposit register: 100 on: account1 .
	Deposit register: 120 on: account2 .
	Withdraw register: 70 on: account2 .
	Withdraw register: 135 on: account3 .
	Deposit register: 15 on: account4 .
	Deposit register: 80 on: account4 .
	
	portfolio1 := Portfolio new .
	portfolio1 addAsset: account1 .
	portfolio1 addAsset: account2 .
	portfolio2 := Portfolio new .
	portfolio2 addAsset: account3 .
	portfolio2 addAsset: portfolio1 .
	portfolio3 := Portfolio new .
	portfolio3 addAsset: account4 .
	portfolio3 addAsset: portfolio2 .
	portfolio4 := Portfolio new . 
	portfolio4 addAsset: portfolio3 .
	
	self assert: 110 equals: portfolio4 balance!

!methodRemoval: PortfolioTest #test04HasRegisteredZeroAccountWithZeroTransactions stamp: 'aa 5/21/2023 14:48:38'!
test04HasRegisteredZeroAccountWithZeroTransactions

	| account transaction portfolio |
	transaction := Deposit for: 50 .
	account := ReceptiveAccount new .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self deny: (portfolio hasRegistered: transaction) .!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 15:55:56'!
test15GivenAPortfolioWithAnAccountWhenAddingTheSameAccountThenPromptAnError

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self
		should: [ portfolio addAsset: account]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	! !

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAccountWhenAddingTheSameAccountThenPromptAnError stamp: 'aa 5/21/2023 15:55:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 15:57:26'!
test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError

	| account portfolio1 portfolio2 |
	account := ReceptiveAccount new .
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: account .
	portfolio1 addAsset: portfolio2 .

	self
		should: [ portfolio1 addAsset: account]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ] .
		
		
	self
		should: [ portfolio1 addAsset: portfolio2]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]! !

!methodRemoval: PortfolioTest #test15GivenAPortfolioWithAnAccountWhenAddingTheSameAccountThenPromptAnError stamp: 'aa 5/21/2023 15:57:31'!
test15GivenAPortfolioWithAnAccountWhenAddingTheSameAccountThenPromptAnError

	| account portfolio |
	account := ReceptiveAccount new .
	portfolio := Portfolio new .
	portfolio addAsset: account .

	self
		should: [ portfolio addAsset: account]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]
	!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/21/2023 15:57:33'!
FAILURE!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/21/2023 15:57:33'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 15:58:32' prior: 50610472!
test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError

	| account portfolio1 portfolio2 |
	account := ReceptiveAccount new .
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: account .
	portfolio1 addAsset: portfolio2 .

"	self
		should: [ portfolio1 addAsset: account]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ] ."
		
		
	self
		should: [ portfolio1 addAsset: portfolio2]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]! !

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/21/2023 15:58:34'!
FAILURE!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/21/2023 15:58:34'!
FAILURE!

portfolio1 := Portfolio new .!

portfolio2 := Portfolio new .!

account1 := ReceptiveAccount new .!

portfolio1 addAsset: portfolio2 .!

portfolio1 addAsset: account1!

portfolio1 addAsset: portfolio2 .!

portfolio1 addAsset: portfolio2 .!

portfolio1 addAsset: portfolio2 .!

portfolio1 addAsset: portfolio2 .!

portfolio1 addAsset: portfolio2 .!

portfolio1 assets !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/21/2023 16:01:49' prior: 50609680 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		currentIntersection := allAssetsForCurrentAsset intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ] .
		(allAssetsForCurrentAsset includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ] .
	]! !

portfolio1 addAsset: portfolio2 .!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 16:03:40' prior: 50610521!
test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError

	| account portfolio1 portfolio2 |
	account := ReceptiveAccount new .
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: account .
	portfolio1 addAsset: portfolio2 .

	self
		should: [ portfolio1 addAsset: account]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ] .
		
		
	self
		should: [ portfolio1 addAsset: portfolio2]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]! !

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPAssetsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/21/2023 16:03:42'!
PASSED!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/21/2023 16:03:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 16:04:30'!
test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError

	| account portfolio1 portfolio2 |
	account := ReceptiveAccount new .
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: account .
	portfolio1 addAsset: portfolio2 .

	self
		should: [ portfolio1 addAsset: account]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ] .
		
		
	self
		should: [ portfolio1 addAsset: portfolio2]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 16:04:50' prior: 50610685!
test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError

	| portfolio1 portfolio2 |
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: portfolio2 .
		
	self
		should: [ portfolio2 addAsset: portfolio1]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]! !

!testRun: #PortfolioTest #test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError stamp: 'aa 5/21/2023 16:04:52'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 16:05:39'!
test17GivenAPortfolioWhenAddingAHigherLevelPortfolioThenPromptAnError

	| portfolio1 portfolio2 |
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: portfolio2 .
		
	self
		should: [ portfolio2 addAsset: portfolio1]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]! !

!methodRemoval: PortfolioTest #test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError stamp: 'aa 5/21/2023 16:05:40'!
test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError

	| portfolio1 portfolio2 |
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: portfolio2 .
		
	self
		should: [ portfolio2 addAsset: portfolio1]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 16:06:58'!
test16GivenAPortfolioWhenAddingAHigherLevelPortfolioThenPromptAnError

	| portfolio1 portfolio2 |
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: portfolio2 .
		
	self
		should: [ portfolio2 addAsset: portfolio1]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]! !

!methodRemoval: PortfolioTest #test17GivenAPortfolioWhenAddingAHigherLevelPortfolioThenPromptAnError stamp: 'aa 5/21/2023 16:06:59'!
test17GivenAPortfolioWhenAddingAHigherLevelPortfolioThenPromptAnError

	| portfolio1 portfolio2 |
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: portfolio2 .
		
	self
		should: [ portfolio2 addAsset: portfolio1]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 16:09:59'!
test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError

	| portfolio1 portfolio2 |
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: portfolio2 .
		
	self
		should: [ portfolio2 addAsset: portfolio1]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]! !

!methodRemoval: PortfolioTest #test16GivenAPortfolioWhenAddingAHigherLevelPortfolioThenPromptAnError stamp: 'aa 5/21/2023 16:10:00'!
test16GivenAPortfolioWhenAddingAHigherLevelPortfolioThenPromptAnError

	| portfolio1 portfolio2 |
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio1 addAsset: portfolio2 .
		
	self
		should: [ portfolio2 addAsset: portfolio1]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ]!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 5/21/2023 16:14:32'!
test17GivenAPortfolioWhenAddingAnAssetContainedInAHigherLevelPortfolioThenPromptAnError

	| account portfolio1 portfolio2 portfolio3 portfolio4 |
	portfolio1 := Portfolio new .
	portfolio2 := Portfolio new .
	portfolio3 := Portfolio new .
	portfolio4 := Portfolio new .
	account := ReceptiveAccount new .
	portfolio1 addAsset: portfolio2 .
	portfolio2 addAsset: portfolio3 .
	portfolio1 addAsset: portfolio4 .
	portfolio1 addAsset: account .
		
	self
		should: [ portfolio3 addAsset: portfolio4 ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ] .
		
	self
		should: [ portfolio3 addAsset: account ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio intersectionBetweenPortfoliosIsNotEmpty ] .! !

!testRun: #PortfolioTest #test17GivenAPortfolioWhenAddingAnAssetContainedInAHigherLevelPortfolioThenPromptAnError stamp: 'aa 5/21/2023 16:14:34'!
PASSED!

----SNAPSHOT----(21 May 2023 17:07:02) CuisUniversity-5706.image priorSource: 8900356!

----SNAPSHOT----(22 May 2023 00:14:21) CuisUniversity-5706.image priorSource: 8934522!

----STARTUP---- (22 May 2023 10:01:48) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej6\windows64\CuisUniversity-5706.image!

!Portfolio methodsFor: 'asserts' stamp: 'aa 5/22/2023 10:10:36' prior: 50610566 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		currentIntersection := allAssetsForCurrentAsset intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ] . "check if self assets are in aPortfolio"
		(allAssetsForCurrentAsset includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ] . "check if self is in aPortfolio"
	]! !
!Asset methodsFor: 'as yet unclassified' stamp: 'aa 5/22/2023 14:10:40'!
allAssets 

	self subclassResponsibility ! !
!Portfolio methodsFor: 'initalization' stamp: 'aa 5/22/2023 14:11:27' prior: 50609480 overrides: 50607897!
initialize 

	transactions := Bag new .
	parents := Set new .
	assets := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'aa 5/22/2023 14:13:02' prior: 50604421 overrides: 50606996!
balance

	| currentBalance |
	currentBalance := 0 .
	^transactions inject: 0 into: [:aTransacion | aTransacion howToAffectBalance: currentBalance ] .
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/22/2023 14:14:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:14:01'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:14:01'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/22/2023 14:14:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/22/2023 14:14:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/22/2023 14:14:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/22/2023 14:14:01'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:14:06'!
ERROR!

!testRun: #PortfolioTest #test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:14:06'!
ERROR!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:14:06'!
ERROR!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPAssetsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:14:06'!
ERROR!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/22/2023 14:14:06'!
ERROR!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWhenAddingAnAssetContainedInAHigherLevelPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:14:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/22/2023 14:14:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/22/2023 14:14:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:14:15'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:14:15'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'aa 5/22/2023 14:14:46' prior: 50610902 overrides: 50606996!
balance

	^transactions inject: 0 into: [ :currentBalance :aTransacion | aTransacion howToAffectBalance: currentBalance ] .
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/22/2023 14:14:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:14:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:14:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/22/2023 14:14:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/22/2023 14:14:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/22/2023 14:14:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/22/2023 14:14:50'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/22/2023 14:14:51'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPAssetsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:14:52'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWhenAddingAnAssetContainedInAHigherLevelPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:14:52'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'aa 5/22/2023 14:15:07' prior: 50611028 overrides: 50606996!
balance

	^transactions inject: 0 into: [ :balanceSum :aTransacion | aTransacion howToAffectBalance: balanceSum ] .
	! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/22/2023 14:16:53' prior: 50610865 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		currentIntersection := allAssetsForCurrentAsset intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^false ] . "check if self assets are in aPortfolio"
		(allAssetsForCurrentAsset includes: self) ifTrue: [^false ] . "check if self is in aPortfolio"
	]! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/22/2023 14:17:13' prior: 50608067!
addAsset: anAsset

	(self assertIntersectionIsEmpty: anAsset) ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty] .
	anAsset linkToParent: self .
	assets add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'aa 5/22/2023 14:17:27' prior: 50611167!
addAsset: anAsset

	self assertIntersectionIsEmpty: anAsset .
	anAsset linkToParent: self .
	assets add: anAsset! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/22/2023 14:16:53' prior: 50611145 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		currentIntersection := allAssetsForCurrentAsset intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^false ] . "check if self assets are in aPortfolio"
		(allAssetsForCurrentAsset includes: self) ifTrue: [^false ] . "check if self is in aPortfolio"
	]! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/22/2023 14:16:53' prior: 50611183 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		currentIntersection := allAssetsForCurrentAsset intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^false ] . "check if self assets are in aPortfolio"
		(allAssetsForCurrentAsset includes: self) ifTrue: [^false ] . "check if self is in aPortfolio"
	]! !
!Portfolio methodsFor: 'asserts' stamp: 'aa 5/22/2023 10:10:36' prior: 50611205 overrides: 50609438!
checkIntersection: aPortfolio

	| rootPortfolios currentIntersection allAssetsForCurrentAsset |

	rootPortfolios := OrderedCollection new .
	aPortfolio getRootPortfolios: rootPortfolios . 
		
	rootPortfolios do: [ :asset |
		allAssetsForCurrentAsset := OrderedCollection new .
		asset allAssets: allAssetsForCurrentAsset .
		currentIntersection := allAssetsForCurrentAsset intersection: (self assets) .
		currentIntersection size = 0 ifFalse: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ] . "check if self assets are in aPortfolio"
		(allAssetsForCurrentAsset includes: self) ifTrue: [^self error: Portfolio intersectionBetweenPortfoliosIsNotEmpty ] . "check if self is in aPortfolio"
	]! !

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPAssetsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWhenAddingAnAssetContainedInAHigherLevelPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:18:25'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPAssetsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWhenAddingAnAssetContainedInAHigherLevelPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/22/2023 14:18:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:18:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:18:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/22/2023 14:18:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/22/2023 14:18:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/22/2023 14:18:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/22/2023 14:18:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/22/2023 14:18:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:18:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/22/2023 14:18:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/22/2023 14:18:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/22/2023 14:18:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/22/2023 14:18:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/22/2023 14:18:36'!
PASSED!

!testRun: #PortfolioTest #test01GivenANewPortfolioThenBalanceIsZero stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test02GivenANewPortfolioWhenAddingAnAccountWithoutTransactionsThenBalanceIsZero stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test03GivenAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test04GivenAPortfolioWithAPortfolioWithAnAccountWhenRegisteringATransactionThenBalanceIsThatTransactionValue stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test05GivenAPortfolioWithManyAccountsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test06GivenAPortfolioWithManyPAssetsThenBalanceIsTheSumOfAllBalances stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test07GivenAPortfolioWithMultipleTransactionsThenBalanceCanBeNegative stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test08GivenANewPortfolioThenItHasNoRegisteredTransactions stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test09GivenAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test10GivenAPortfolioWithAPortfolioWithAnAccountWithATransactionThenThePortfolioHasItRegistered stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test11GivenAPortfolioWithMultipleAssetsWithTransactionsThenThePortfolioHasThoseTransactionsRegistered stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test12GivenANewPortfolioThenItHasNoTransactions stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test13GivenAPortfolioWithOneAccountThenItHasThatAccountTransactions stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test14GivenAPortfolioWithManyAssetsThenThePortfolioHasItsAssetsTransactionsRegistered stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test15GivenAPortfolioWithAnAssetWhenAddingTheSameAssetThenPromptAnError stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioWhenAddingItsParentPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWhenAddingAnAssetContainedInAHigherLevelPortfolioThenPromptAnError stamp: 'aa 5/22/2023 14:18:37'!
PASSED!

----SNAPSHOT----(22 May 2023 14:18:41) CuisUniversity-5706.image priorSource: 8934610!
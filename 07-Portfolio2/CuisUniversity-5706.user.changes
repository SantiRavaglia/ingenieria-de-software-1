

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (26 May 2023 15:45:44) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej7\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\Santiago\Downloads\Portfolio-Solucion.st----!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'aa 5/26/2023 17:51:22'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'aa 5/26/2023 17:52:51'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Report stamp: 'aa 5/26/2023 17:53:10'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReportTest stamp: 'aa 5/26/2023 17:53:11'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'nil' stamp: 'aa 5/26/2023 17:54:30'!
accountSummary

	^transactions! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 17:58:17' prior: 50604774!
accountSummary

	^transactions inject: '' into: [ :summaryString :transaction | summaryString , (transaction dataForSummary) ]! !
!AccountTransaction methodsFor: 'value' stamp: 'aa 5/26/2023 18:00:45'!
dataForSummary

	self subclassResponsibility ! !
!Deposit methodsFor: 'nil' stamp: 'aa 5/26/2023 18:00:59' overrides: 50604786!
dataForSummary! !
!Withdraw methodsFor: 'value' stamp: 'aa 5/26/2023 18:01:02' overrides: 50604786!
dataForSummary! !

!methodRemoval: Withdraw #dataForSummary stamp: 'aa 5/26/2023 18:01:20'!
dataForSummary!
!Withdraw methodsFor: 'nil' stamp: 'aa 5/26/2023 18:01:23' overrides: 50604786!
dataForSummary! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:01:50' prior: 50604800 overrides: 50604786!
dataForSummary

	^'Extracción por ', value! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:02:08' prior: 50604790 overrides: 50604786!
dataForSummary

	^'Depósito por ', value! !

ReceptiveAccount new!

account := ReceptiveAccount new!

Deposit register: 50 on: account !

Withdraw register: 100 on: account !

Deposit register: 170 on: account !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:06:24' prior: 50604779!
accountSummary

	| summaryString |
	
	summaryString := '' .

	transactions inject: summaryString into: [ :current :transaction | current , (transaction dataForSummary) ] .
	
	summaryString := summaryString , 'Balance = ' , (self balance)! !

account accountSummary !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:07:39' prior: 50604820!
accountSummary

	| summaryString |
	
	summaryString := '' .

	transactions inject: summaryString into: [ :current :transaction | current , ((transaction dataForSummary) printString) ] .
	
	summaryString := summaryString , 'Balance = ' , ((self balance) printString)! !

account accountSummary !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:07:59' prior: 50604832!
accountSummary

	| summaryString |
	
	summaryString := '' .

	transactions inject: summaryString into: [ :current :transaction | current , (transaction dataForSummary) ] .
	
	summaryString := summaryString , 'Balance = ' , ((self balance) printString)! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:08:15' prior: 50604810 overrides: 50604786!
dataForSummary

	^'Depósito por ', (value printString)! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:08:25' prior: 50604805 overrides: 50604786!
dataForSummary

	^'Extracción por ', (value printString)! !

account accountSummary !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:08:45' prior: 50604845!
accountSummary

	| summaryString |
	
	summaryString := '' .
	transactions inject: summaryString into: [ :current :transaction | current , (transaction dataForSummary) ] .
	summaryString := summaryString , 'Balance = ' , ((self balance) printString)
	^summaryString ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:08:48' prior: 50604869!
accountSummary

	| summaryString |
	
	summaryString := '' .
	transactions inject: summaryString into: [ :current :transaction | current , (transaction dataForSummary) ] .
	summaryString := summaryString , 'Balance = ' , ((self balance) printString) .
	^summaryString ! !

account accountSummary!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:09:11' prior: 50604881!
accountSummary

	| summaryString |
	
	summaryString := '' .
	transactions inject: summaryString into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) .! !

Deposit register: 170 on: account !

Deposit register: 170 on: account !

account accountSummary!

(transaction dataForSummary)!

current , (transaction dataForSummary)!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:11:09' prior: 50604894!
accountSummary

	| summaryString |
	
	summaryString := '' .
	summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) .! !

account accountSummary !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:11:51' prior: 50604910!
accountSummary

	| summaryString |
	
	summaryString := '' .
	transactions do: [ :transaction | summaryString , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) .! !

account accountSummary!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:12:02' prior: 50604922!
accountSummary

	| summaryString |
	
	summaryString := '' .
	transactions do: [ :transaction | (summaryString , (transaction dataForSummary)) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) .! !

account accountSummary !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 18:12:33' prior: 50604933!
accountSummary

	| summaryString |
	
	summaryString := '' .
	summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) .! !

account accountSummary!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:06:06' prior: 50604944!
accountSummary

	| summaryString |
	
	summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) .! !
!Transfer methodsFor: 'transaction' stamp: 'aa 5/26/2023 19:07:30' overrides: 16902254!
value
	^originAccount! !
!Transfer methodsFor: 'transaction' stamp: 'aa 5/26/2023 19:07:36' prior: 50604966 overrides: 16902254!
value
	^value! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'aa 5/26/2023 19:09:08'!
Object subclass: #Transfer
	instanceVariableNames: 'value originAccount destinationAccount withdrawal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'transaction' stamp: 'aa 5/26/2023 19:09:07'!
withdrawal

	^withdrawal! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'aa 5/26/2023 19:09:22'!
Object subclass: #Transfer
	instanceVariableNames: 'value originAccount destinationAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'transaction' stamp: 'aa 5/26/2023 19:09:17'!
deposit

	^deposit! !

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value isTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'aa 5/26/2023 19:12:09'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value isTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:14:43' prior: 50604956!
accountSummary

	| summaryString summaryCollection |
	
	summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) .! !

account accountSummary!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:20:50' prior: 50605012!
accountSummary

	| summaryString summaryCollection |
	
	transactions do: [ :transaction | summaryCollection add: transaction dataForSummary ] .
	summaryCollection add: 'Balance = ' , ((self balance) printString) .
	^summaryCollection 
	
	"summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) ."! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:21:13' prior: 50605024!
accountSummary

	| summaryString summaryCollection |
	
	summaryCollection := OrderedCollection new .
	transactions do: [ :transaction | summaryCollection add: transaction dataForSummary ] .
	summaryCollection add: 'Balance = ' , ((self balance) printString) .
	^summaryCollection .
	
	"summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) ."! !

account accountSummary!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:28:26' prior: 50605041!
accountSummary

	| summaryString summaryCollection |
	
	summaryCollection := OrderedCollection new .
	summaryString := '' .
	transactions do: [ :transaction | summaryCollection add: transaction dataForSummary ] .
	summaryCollection add: 'Balance = ' , ((self balance) printString) .
	summaryCollection do: [ :each | summaryString, each printString ] .
	^summaryString 
	
	"summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) "! !

account accountSummary!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:28:39' prior: 50605060!
accountSummary

	| summaryString summaryCollection |
	
	summaryCollection := OrderedCollection new .
	summaryString := '' .
	transactions do: [ :transaction | summaryCollection add: transaction dataForSummary ] .
	summaryCollection add: 'Balance = ' , ((self balance) printString) .
	summaryCollection do: [ :each | summaryString,( each printString) ] .
	^summaryString 
	
	"summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) "! !

account accountSummary!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:34:18' prior: 50605082!
accountSummary

	| summaryCollection |
	
	summaryCollection := OrderedCollection new .
	transactions do: [ :transaction | Transcript show: transaction dataForSummary . Transcript cr] .
	Transcript show: ('Balance = ' , (self balance) printString) .
	
	"summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) ."! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:34:27' prior: 50605104!
accountSummary

	transactions do: [ :transaction | Transcript show: transaction dataForSummary . Transcript cr] .
	Transcript show: ('Balance = ' , (self balance) printString) .
	
	"summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) ."! !

account accountSummary!

account accountSummary!

Character cr!

Character cr!

(Character cr) printString !

'hola' , (Character cr) , 'chau'!

'hola' , (Transcript cr) , 'chau'!

'hola' addLast: (Transcript cr)!

str := 'hola' writeStream !

str nextPut: (Character cr)!

str nextPut: 'chau'!

str nextPut: $a!

str contents !

str1 := 'hola'!

str := str1 writeStream !

str nextPut: (Character cr)!

str nextPut: $a!

str contents !

str1 := 'hola'!

str := '' writeStream !

str nextPutAll: str1!

str nextPut: (Character cr)!

str nextPutAll: 'chau'!

str contents !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:52:16' prior: 50605121!
accountSummary

	| summaryString |
	
	summaryString := '' writeStream .
	
	transactions do: [ :transaction | summaryString nextPutAll: (transaction dataForSummary) . summaryString nextPut: (Character cr)] .
	summaryString nextPutAll: ('Balance = ' , (self balance) printString) .
	^summaryString contents
	
	"summaryString := transactions inject: '' into: [ :current :transaction | current , (transaction dataForSummary) ] .
	^summaryString , 'Balance = ' , ((self balance) printString) ." ! !

account := ReceptiveAccount new !

Deposit register: 50 on: account !

Withdraw register: 100 on: account !

Deposit register: 120 on: account !

Deposit register: 200 on: account !

Withdraw register: 170 on: account !

account accountSummary !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/26/2023 19:56:12' prior: 50605154!
accountSummary

	| summaryString |
	
	summaryString := '' writeStream .
	transactions do: [ :transaction | summaryString nextPutAll: (transaction dataForSummary) . summaryString nextPut: (Character cr)] .
	summaryString nextPutAll: ('Balance = ' , (self balance) printString) .
	^summaryString contents! !

Object subclass: #PataTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PataTransfer category: 'Portfolio-Solucion' stamp: 'aa 5/26/2023 19:57:12'!
Object subclass: #PataTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PataTransfer subclass: #PataExtraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PataExtraccion category: 'Portfolio-Solucion' stamp: 'aa 5/26/2023 19:57:23'!
PataTransfer subclass: #PataExtraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PataTransfer subclass: #PataDeposito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PataDeposito category: 'Portfolio-Solucion' stamp: 'aa 5/26/2023 19:57:27'!
PataTransfer subclass: #PataDeposito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(26 May 2023 21:05:27) CuisUniversity-5706.image priorSource: 8713034!

----QUIT----(26 May 2023 22:31:33) CuisUniversity-5706.image priorSource: 8754504!

----STARTUP---- (27 May 2023 14:45:58) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej7\windows64\CuisUniversity-5706.image!


TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 15:43:16'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'aa 5/27/2023 15:43:36'!
test01GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	
	Deposit register: 50 on: account1. "le doy 50 a la cuenta 1 para que le gire a la cuenta 2"
	
	Transfer register: 50 from: account1 to: account2.
	
	self assert: 0 equals: account1 balance .
	self assert: 50 equals: account2 balance .! !

!testRun: #TransferTest #test01GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 15:43:39'!
PASSED!

!testRun: #TransferTest #test01GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 15:43:39'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 15:48:06'!
test020TransferKnowsItsOriginAndDestination

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	
	Deposit register: 50 on: account1 .
	
	transfer := Transfer register: 50 from: account1 to: account2 .
	
	self assert: transfer origin equals: account1 .
	self assert: transfer destination equals: account2 .
! !

!classRemoval: #PataExtraccion stamp: 'aa 5/27/2023 15:48:24'!
PataTransfer subclass: #PataExtraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PataDeposito stamp: 'aa 5/27/2023 15:48:24'!
PataTransfer subclass: #PataDeposito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PataTransfer stamp: 'aa 5/27/2023 15:48:24'!
Object subclass: #PataTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 15:49:04'!
test02TransferKnowsItsOriginAndDestination

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	
	Deposit register: 50 on: account1 .
	
	transfer := Transfer register: 50 from: account1 to: account2 .
	
	self assert: transfer origin equals: account1 .
	self assert: transfer destination equals: account2 .
! !

!methodRemoval: TransferTest #test020TransferKnowsItsOriginAndDestination stamp: 'aa 5/27/2023 15:49:05'!
test020TransferKnowsItsOriginAndDestination

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	
	Deposit register: 50 on: account1 .
	
	transfer := Transfer register: 50 from: account1 to: account2 .
	
	self assert: transfer origin equals: account1 .
	self assert: transfer destination equals: account2 .
!

!classRemoval: #TransferTest stamp: 'aa 5/27/2023 17:00:35'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 5/27/2023 17:10:13'!
test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	
	Deposit register: 50 on: account1 .
	
	transfer := Transfer register: 50 from: account1 to: account2 .
	
	self assert: transfer origin equals: account1 .
	self assert: transfer destination equals: account2 .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 5/27/2023 17:10:55' prior: 50605343!
test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	
	Deposit register: 50 on: account1 .
	
	transfer := Transfer register: 50 from: account1 to: account2 .
	
	self assert: (account1 hasTransferRegistered: transfer) .
	self assert: (account2 hasTransferRegistered: transfer) .
! !

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:10:58'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 17:11:08'!
hasTransferRegistered: transfer 
	self shouldBeImplemented.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:11:30'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 17:11:29' prior: 50605378!
hasTransferRegistered: aTransfer 
	transfers includes: aTransfer .! !

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:11:32'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'aa 5/27/2023 17:11:51' prior: 50604526 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.
	transfers := OrderedCollection new .! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 17:13:30' prior: 50604538!
register: aTransaction

	(aTransaction isKindOf: AccountTransaction) ifTrue: [ 	transactions add: aTransaction ] .
	(aTransaction isKindOf: Transfer) ifTrue: [ 	transfers add: aTransaction ] .
! !

!methodRemoval: ReceptiveAccountTest #test09TransferKnowsItsOriginAndDestination stamp: 'aa 5/27/2023 17:13:40'!
test09TransferKnowsItsOriginAndDestination

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	
	Deposit register: 50 on: account1 .
	
	transfer := Transfer register: 50 from: account1 to: account2 .
	
	self assert: transfer origin equals: account1 .
	self assert: transfer destination equals: account2 .
!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:13:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:13:41'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:17:42' prior: 50604724!
register: aValue from: anOriginAccount to: aDestinationAccount 
	
	Deposit register: aValue on: aDestinationAccount .
	Withdraw register: aValue on:  anOriginAccount .
	^(Transfer new) initializeWith: aValue origin: anOriginAccount destination: aDestinationAccount .
	! !

AccountTransaction subclass: #AccounOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccounOperations category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:19:27'!
AccountTransaction subclass: #AccounOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #AccountOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountOperations category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:19:59'!
AccountTransaction subclass: #AccountOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccounOperations stamp: 'aa 5/27/2023 17:20:01'!
AccountTransaction subclass: #AccounOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperations subclass: #Deposit
	instanceVariableNames: 'value isTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:20:07'!
AccountOperations subclass: #Deposit
	instanceVariableNames: 'value isTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperations subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:20:09'!
AccountOperations subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #AccountTransfers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransfers category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:20:15'!
AccountTransaction subclass: #AccountTransfers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransfers subclass: #TransferIN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferIN category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:20:32'!
AccountTransfers subclass: #TransferIN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransfers subclass: #TransferOUT
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferOUT category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:20:34'!
AccountTransfers subclass: #TransferOUT
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperations subclass: #Deposit
	instanceVariableNames: 'isTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:21:25'!
AccountOperations subclass: #Deposit
	instanceVariableNames: 'isTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperations subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:21:28'!
AccountOperations subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperations subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:21:31'!
AccountOperations subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:21:34'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'aa 5/27/2023 17:21:45' prior: 50604584 overrides: 16902254!
value

	^ value! !
!AccountTransaction methodsFor: 'balance' stamp: 'aa 5/27/2023 17:21:59' prior: 50604588!
affectBalance: aBalance

	^aBalance + value ! !

!methodRemoval: Deposit #affectBalance: stamp: 'aa 5/27/2023 17:22:11'!
affectBalance: aBalance

	^aBalance + value !

!methodRemoval: Deposit #value stamp: 'aa 5/27/2023 17:22:17'!
value

	^ value!

!methodRemoval: Withdraw #value stamp: 'aa 5/27/2023 17:22:32'!
value

	^ value!

!methodRemoval: Withdraw #affectBalance: stamp: 'aa 5/27/2023 17:22:34'!
affectBalance: aBalance

	^aBalance - value!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/27/2023 17:22:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 17:22:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 17:22:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 17:22:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/27/2023 17:22:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/27/2023 17:22:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/27/2023 17:22:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:22:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:22:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 17:23:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/27/2023 17:23:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/27/2023 17:23:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 17:23:14'!
PASSED!
!AccountOperations methodsFor: 'balance' stamp: 'aa 5/27/2023 17:24:16' overrides: 50605606!
affectBalance: aBalance

	^aBalance + value ! !
!AccountTransfers methodsFor: 'balance' stamp: 'aa 5/27/2023 17:24:16' overrides: 50605606!
affectBalance: aBalance

	^aBalance + value ! !

!methodRemoval: AccountTransaction #affectBalance: stamp: 'aa 5/27/2023 17:24:16'!
affectBalance: aBalance

	^aBalance + value !
!AccountTransaction methodsFor: 'balance' stamp: 'aa 5/27/2023 17:24:47'!
balance: aBalance

	self subclassResponsibility ! !
!Withdraw methodsFor: 'balance' stamp: 'aa 5/27/2023 17:24:55' overrides: 50605673!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'balance' stamp: 'aa 5/27/2023 17:24:55' overrides: 50605673!
affectBalance: aBalance

	^aBalance + value ! !

!methodRemoval: AccountOperations #affectBalance: stamp: 'aa 5/27/2023 17:24:55'!
affectBalance: aBalance

	^aBalance + value !
!Withdraw methodsFor: 'balance' stamp: 'aa 5/27/2023 17:25:00' prior: 50605691!
affectBalance: aBalance

	^aBalance - value ! !
!TransferIN methodsFor: 'balance' stamp: 'aa 5/27/2023 17:25:06' overrides: 50605678!
affectBalance: aBalance

	^aBalance + value ! !
!TransferOUT methodsFor: 'balance' stamp: 'aa 5/27/2023 17:25:06' overrides: 50605678!
affectBalance: aBalance

	^aBalance + value ! !

!methodRemoval: AccountTransfers #affectBalance: stamp: 'aa 5/27/2023 17:25:06'!
affectBalance: aBalance

	^aBalance + value !
!TransferOUT methodsFor: 'balance' stamp: 'aa 5/27/2023 17:25:11' prior: 50605715!
affectBalance: aBalance

	^aBalance - value ! !

AccountTransaction subclass: #Accounta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Accounta category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:25:41'!
AccountTransaction subclass: #Accounta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Accounta stamp: 'aa 5/27/2023 17:25:46'!
AccountTransaction subclass: #Accounta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #AccountOperations as: #AccountOperatioASDFA stamp: 'aa 5/27/2023 17:25:50'!
Smalltalk renameClassNamed: #AccountOperations as: #AccountOperatioASDFA!

!classRenamed: #AccountTransaction as: #AccountOperations stamp: 'aa 5/27/2023 17:25:58'!
Smalltalk renameClassNamed: #AccountTransaction as: #AccountOperations!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:25:58' prior: 50605409!
register: aTransaction

	(aTransaction isKindOf: AccountOperations) ifTrue: [ 	transactions add: aTransaction ] .
	(aTransaction isKindOf: Transfer) ifTrue: [ 	transfers add: aTransaction ] .
! !

AccountOperations subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:26:36'!
AccountOperations subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:26:41'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:26:43'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountOperatioASDFA stamp: 'aa 5/27/2023 17:26:49'!
AccountOperations subclass: #AccountOperatioASDFA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction class methodsFor: 'no messages' stamp: 'aa 5/27/2023 17:27:11' overrides: 50604602!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountOperations methodsFor: 'balance' stamp: 'aa 5/27/2023 17:27:37'!
affectBalance: aBalance

	self subclassResponsibility ! !

!methodRemoval: AccountOperations #balance: stamp: 'aa 5/27/2023 17:27:44'!
balance: aBalance

	self subclassResponsibility !

!methodRemoval: AccountOperations #affectBalance: stamp: 'aa 5/27/2023 17:27:48'!
affectBalance: aBalance

	self subclassResponsibility !
!AccountTransaction methodsFor: 'no messages' stamp: 'aa 5/27/2023 17:27:51'!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransfers methodsFor: 'nil' stamp: 'aa 5/27/2023 17:27:54'!
affectBalance: aBalance

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 17:28:29' prior: 50605758!
register: aTransaction

	(aTransaction isKindOf: AccountTransaction) ifTrue: [ 	transactions add: aTransaction ] .
	(aTransaction isKindOf: Transfer) ifTrue: [ 	transfers add: aTransaction ] .
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 17:28:53' prior: 50605841!
register: aTransaction

	(aTransaction isKindOf: AccountTransaction) ifTrue: [ 	transactions add: aTransaction ] .
	(aTransaction isKindOf: AccountTransfers) ifTrue: [ 	transfers add: aTransaction ] .
! !

!classRenamed: #AccountTransfers as: #AccountTransfer stamp: 'aa 5/27/2023 17:28:56'!
Smalltalk renameClassNamed: #AccountTransfers as: #AccountTransfer!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:28:56' prior: 50605851!
register: aTransaction

	(aTransaction isKindOf: AccountTransaction) ifTrue: [ 	transactions add: aTransaction ] .
	(aTransaction isKindOf: AccountTransfer) ifTrue: [ 	transfers add: aTransaction ] .
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 17:29:55'!
registerTransfer: aTransfer

	transfers add: aTransfer 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 17:30:04' prior: 50605866!
register: aTransaction

	transactions add: aTransaction
! !
!TransferIN methodsFor: 'balance' stamp: 'aa 5/27/2023 17:30:38' overrides: 50605602!
value

	^value! !

!methodRemoval: TransferIN #value stamp: 'aa 5/27/2023 17:30:47'!
value

	^value!
!AccountTransaction methodsFor: 'initialization' stamp: 'aa 5/27/2023 17:31:44'!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: Deposit #initializeFor: stamp: 'aa 5/27/2023 17:31:49'!
initializeFor: aValue

	value := aValue !

!methodRemoval: Withdraw #initializeFor: stamp: 'aa 5/27/2023 17:31:51'!
initializeFor: aValue

	value := aValue !

!classDefinition: #AccountTransfer category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:32:16'!
AccountOperations subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransfer methodsFor: 'initialization' stamp: 'aa 5/27/2023 17:32:14'!
initializeFor: aTransfer

	transfer := aTransfer ! !

Object subclass: #AccountOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountOperations category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:32:40'!
Object subclass: #AccountOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperations subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:32:44'!
AccountOperations subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'aa 5/27/2023 17:32:55' overrides: 50605602!
value

	^ value! !
!AccountTransfer methodsFor: 'initialization' stamp: 'aa 5/27/2023 17:33:36'!
transfer

	^transfer! !
!TransferIN methodsFor: 'balance' stamp: 'aa 5/27/2023 17:35:00' prior: 50605710 overrides: 50605836!
affectBalance: aBalance

	^aBalance + transfer value! !
!TransferOUT methodsFor: 'balance' stamp: 'aa 5/27/2023 17:35:10' prior: 50605724 overrides: 50605836!
affectBalance: aBalance

	^aBalance - transfer value ! !

Transfer class
	instanceVariableNames: 'transferIN transferOUT'!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:35:58'!
Transfer class
	instanceVariableNames: 'transferIN transferOUT'!

Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:36:05'!
Transfer class
	instanceVariableNames: ''!

Object subclass: #Transfer
	instanceVariableNames: 'value transferIN transferOUT'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:36:13'!
Object subclass: #Transfer
	instanceVariableNames: 'value transferIN transferOUT'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'transaction' stamp: 'aa 5/27/2023 17:36:31'!
out

	^transferOUT! !

!methodRemoval: Transfer #withdrawal stamp: 'aa 5/27/2023 17:36:34'!
withdrawal

	^withdrawal!
!Transfer methodsFor: 'transaction' stamp: 'aa 5/27/2023 17:36:43'!
in

	^transferIN! !

!methodRemoval: Transfer #deposit stamp: 'aa 5/27/2023 17:36:45'!
deposit

	^deposit!

!methodRemoval: Transfer #destination stamp: 'aa 5/27/2023 17:36:46'!
destination
	^destinationAccount!

!methodRemoval: Transfer #origin stamp: 'aa 5/27/2023 17:36:49'!
origin
	^originAccount!
!Transfer methodsFor: 'transaction' stamp: 'aa 5/27/2023 17:36:54' prior: 50604702!
initializeWith: aValue origin: anOriginAccount destination: aDestinationAccount 

	value := aValue.! !
!Transfer methodsFor: 'transaction' stamp: 'aa 5/27/2023 17:37:32'!
initializeWith: aValue in: aTransferIn out: aTransferOut

	value := aValue .
	transferIN := aTransferIn .
	transferOUT := aTransferOut .! !

!methodRemoval: Transfer #initializeWith:origin:destination: stamp: 'aa 5/27/2023 17:37:35'!
initializeWith: aValue origin: anOriginAccount destination: aDestinationAccount 

	value := aValue.!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:37:43' prior: 50605442!
register: aValue from: anOriginAccount to: aDestinationAccount 
	
	Deposit register: aValue on: aDestinationAccount .
	Withdraw register: aValue on:  anOriginAccount .
	^(Transfer new) initializeWith: aValue in: anOriginAccount out: aDestinationAccount .
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:38:05' prior: 50606023!
register: aValue from: anOriginAccount to: aDestinationAccount 
	
	| transferIn transferOut |
	"transferIn := "
	^(Transfer new) initializeWith: aValue in: anOriginAccount out: aDestinationAccount .
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:41:57' prior: 50606035!
register: aValue from: anOriginAccount to: aDestinationAccount 
	
	| transferIn transferOut |
	transferOut := TransferOUT .
	^(Transfer new) initializeWith: aValue in: anOriginAccount out: aDestinationAccount .
	! !

!methodRemoval: AccountOperations class #register:on: stamp: 'aa 5/27/2023 17:42:40'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction!
!AccountTransfer class methodsFor: 'no messages' stamp: 'aa 5/27/2023 17:43:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:43:03' prior: 50606062!
register: aValue on: account

	| transfer |
	
	transfer := self for: aValue.
	account register: transfer.
		
	^ transfer! !
!TransferIN class methodsFor: 'no messages' stamp: 'aa 5/27/2023 17:43:31'!
for: aValue

	^ self new initializeFor: aValue ! !
!TransferOUT class methodsFor: 'no messages' stamp: 'aa 5/27/2023 17:43:33'!
for: aValue

	^ self new initializeFor: aValue ! !
!Withdraw methodsFor: 'initialization' stamp: 'aa 5/27/2023 17:44:16' overrides: 50605891!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'initialization' stamp: 'aa 5/27/2023 17:44:16' overrides: 50605891!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: AccountTransaction #initializeFor: stamp: 'aa 5/27/2023 17:44:16'!
initializeFor: aValue

	value := aValue !

!methodRemoval: AccountOperations #value stamp: 'aa 5/27/2023 17:45:27'!
value

	^ value!

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:45:49'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransfer category: 'Portfolio-Solucion' stamp: 'aa 5/27/2023 17:45:53'!
Object subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountOperations stamp: 'aa 5/27/2023 17:46:01'!
Object subclass: #AccountOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'transaction' stamp: 'aa 5/27/2023 17:46:13' prior: 50604971 overrides: 16902254!
value

	^value! !
!AccountTransfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:47:22' prior: 50606070!
register: aValue on: account

	| transfer |
	
	transfer := self for: aValue.
	account registerTransfer: transfer.
		
	^ transfer! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:47:54' prior: 50606045!
register: aValue from: anOriginAccount to: aDestinationAccount 
	
	| transferIn transferOut |
	transferOut := AccountTransfer register: aValue on: anOriginAccount .
	transferIn := AccountTransfer register: aValue on: aDestinationAccount .
	^(Transfer new) initializeWith: aValue in: anOriginAccount out: aDestinationAccount .
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:48:06' prior: 50606146!
register: aValue from: anOriginAccount to: aDestinationAccount 
	
	| transferIn transferOut |
	transferOut := AccountTransfer register: aValue on: anOriginAccount .
	transferIn := AccountTransfer register: aValue on: aDestinationAccount .
	^(Transfer new) initializeWith: aValue in: transferIn out: transferOut .
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/27/2023 17:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 17:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 17:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 17:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/27/2023 17:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/27/2023 17:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/27/2023 17:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:48:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:48:54'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'aa 5/27/2023 17:51:41' prior: 50604549 overrides: 50604354!
balance

	| balanceSum |

	balanceSum := transactions 
					inject: 0
					into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ] .					
	^transfers 
		inject: balanceSum 
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]! !

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:51:49'!
ERROR!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:51:49'!
ERROR!
!TransferIN methodsFor: 'balance' stamp: 'aa 5/27/2023 17:52:37' overrides: 50605911!
initializeFor: aTransfer

	transfer := aTransfer ! !
!TransferOUT methodsFor: 'balance' stamp: 'aa 5/27/2023 17:52:39' overrides: 50605911!
initializeFor: aTransfer

	transfer := aTransfer ! !
!AccountTransfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:54:07' prior: 50606138!
register: aTransfer on: account

	| transfer |
	
	transfer := self for: aTransfer.
	account registerTransfer: transfer.
		
	^ transfer! !

!methodRemoval: TransferIN #initializeFor: stamp: 'aa 5/27/2023 17:54:21'!
initializeFor: aTransfer

	transfer := aTransfer !

!methodRemoval: TransferOUT #initializeFor: stamp: 'aa 5/27/2023 17:54:24'!
initializeFor: aTransfer

	transfer := aTransfer !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/27/2023 17:54:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 17:54:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 17:54:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 17:54:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/27/2023 17:54:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/27/2023 17:54:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/27/2023 17:54:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:54:35'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:54:35'!
ERROR!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:54:41'!
ERROR!
!AccountTransfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:55:07' prior: 50606240!
register: aTransfer on: account

	| transfer |
	
	transfer := self initializeFor: aTransfer.
	account registerTransfer: transfer.
		
	^ transfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/27/2023 17:55:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 17:55:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 17:55:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 17:55:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/27/2023 17:55:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/27/2023 17:55:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/27/2023 17:55:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:55:09'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:55:09'!
ERROR!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:55:11'!
ERROR!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:55:11'!
ERROR!
!AccountTransfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:55:44' prior: 50606295!
register: aTransfer on: account

	| transfer |
	
	transfer := self new initializeFor: aTransfer.
	account registerTransfer: transfer.
		
	^ transfer! !

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:55:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:55:48'!
ERROR!

AccountTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 17:57:55' prior: 50606160!
register: aValue from: anOriginAccount to: aDestinationAccount 
	
	| transferIn transferOut |
	transferOut := TransferOUT register: aValue on: anOriginAccount .
	transferIn := TransferIN register: aValue on: aDestinationAccount .
	^(Transfer new) initializeWith: aValue in: transferIn out: transferOut .
	! !

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 17:58:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:58:02'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:58:02'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:58:10'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 17:58:10'!
ERROR!

account1 := ReceptiveAccount new .!

	account2 := ReceptiveAccount new .!

	Deposit register: 50 on: account1 .!

	transfer := Transfer register: 50 from: account1 to: account2 .!

account1 balance !

account2 balance!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 17:59:12'!
transfers 

	^ transfers copy! !

account1 transfers!

account2 transfers!
!TransferIN methodsFor: 'balance' stamp: 'aa 5/27/2023 17:59:48' overrides: 50605945!
transfer

	^transfer! !
!TransferOUT methodsFor: 'balance' stamp: 'aa 5/27/2023 17:59:50' overrides: 50605945!
transfer

	^transfer! !

!methodRemoval: TransferIN #transfer stamp: 'aa 5/27/2023 17:59:57'!
transfer

	^transfer!

!methodRemoval: TransferOUT #transfer stamp: 'aa 5/27/2023 17:59:59'!
transfer

	^transfer!

(account2 transfers at: 1) transfer!

!methodRemoval: TransferOUT class #for: stamp: 'aa 5/27/2023 18:03:08'!
for: aValue

	^ self new initializeFor: aValue !

!methodRemoval: TransferIN class #for: stamp: 'aa 5/27/2023 18:03:11'!
for: aValue

	^ self new initializeFor: aValue !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/27/2023 18:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 18:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 18:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 18:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/27/2023 18:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/27/2023 18:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/27/2023 18:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 18:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:03:13'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:03:13'!
ERROR!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 18:03:15'!
PASSED!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'aa 5/27/2023 18:36:47' prior: 50606364!
register: aValue from: anOriginAccount to: aDestinationAccount 
	
	^(Transfer new) initializeWith: aValue from: anOriginAccount to: aDestinationAccount .
	! !
!Transfer methodsFor: 'transaction' stamp: 'aa 5/27/2023 18:37:31'!
initializeWith: aValue from: anOriginAccount to: aDestinationAccount

	value := aValue .
	transferIN := TransferIN register: aValue on: aDestinationAccount .
	transferOUT := TransferOUT register: aValue on: anOriginAccount .! !

(account2 transfers at: 1) transfer!

!methodRemoval: Transfer #initializeWith:in:out: stamp: 'aa 5/27/2023 18:37:49'!
initializeWith: aValue in: aTransferIn out: aTransferOut

	value := aValue .
	transferIN := aTransferIn .
	transferOUT := aTransferOut .!
!Transfer methodsFor: 'transaction' stamp: 'aa 5/27/2023 18:38:02' prior: 50606485!
initializeWith: aValue from: anOriginAccount to: aDestinationAccount

	value := aValue .
	transferIN := TransferIN register: self on: aDestinationAccount .
	transferOUT := TransferOUT register: self on: anOriginAccount .! !

(account2 transfers at: 1) transfer!

account1 := ReceptiveAccount new .!

account2 := ReceptiveAccount new .!

Deposit register: 50 on: account1 .!

transfer := Transfer register: 50 from: account1 to: account2 .!

(account2 transfers at: 1) transfer!

(account2 transfers at: 1) transfer value !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/27/2023 18:38:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 18:38:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 18:38:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 18:38:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/27/2023 18:38:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/27/2023 18:38:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/27/2023 18:38:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 18:38:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:38:20'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:38:20'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:38:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:38:24'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 5/27/2023 18:39:08' prior: 50605392!
hasTransferRegistered: aTransfer 
	
	^transfers includes: aTransfer .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/27/2023 18:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 18:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/27/2023 18:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/27/2023 18:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/27/2023 18:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/27/2023 18:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/27/2023 18:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/27/2023 18:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:39:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:39:09'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 5/27/2023 18:40:35' prior: 50605358!
test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	
	Deposit register: 50 on: account1 .
	
	transfer := Transfer register: 50 from: account1 to: account2 .
	
	self assert: (account1 hasTransferRegistered: transfer out) .
	self assert: (account2 hasTransferRegistered: transfer in) .
! !

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/27/2023 18:40:37'!
PASSED!

----SNAPSHOT----(27 May 2023 18:47:20) CuisUniversity-5706.image priorSource: 8754592!

----QUIT----(27 May 2023 18:47:22) CuisUniversity-5706.image priorSource: 8799484!

----STARTUP---- (28 May 2023 19:46:44) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej7\windows64\CuisUniversity-5706.image!


!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/28/2023 19:46:50'!
PASSED!

(account2 transfers at: 1) transfer !

!classRemoval: #Transfer stamp: 'aa 5/28/2023 19:47:38'!
Object subclass: #Transfer
	instanceVariableNames: 'value transferIN transferOUT'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferOUT stamp: 'aa 5/28/2023 19:47:38'!
AccountTransfer subclass: #TransferOUT
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferIN stamp: 'aa 5/28/2023 19:47:38'!
AccountTransfer subclass: #TransferIN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransfer stamp: 'aa 5/28/2023 19:47:38'!
Object subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'aa 5/28/2023 19:47:39'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'aa 5/28/2023 19:47:39'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'aa 5/28/2023 19:47:39'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'aa 5/28/2023 19:47:39'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'aa 5/28/2023 19:47:39'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'aa 5/28/2023 19:47:39'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'aa 5/28/2023 19:47:39'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'aa 5/28/2023 19:47:39'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\Santiago\Downloads\Portfolio-Solucion (1).st----!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferBothHaveItRegistered stamp: 'aa 5/28/2023 19:48:04'!
PASSED!

----STARTUP---- (30 May 2023 18:18:33) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej7\windows64\CuisUniversity-5706.image!


!classRemoval: #Transfer stamp: 'aa 5/30/2023 18:19:02'!
Object subclass: #Transfer
	instanceVariableNames: 'value transferIN transferOUT'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferOUT stamp: 'aa 5/30/2023 18:19:02'!
AccountTransfer subclass: #TransferOUT
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferIN stamp: 'aa 5/30/2023 18:19:02'!
AccountTransfer subclass: #TransferIN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransfer stamp: 'aa 5/30/2023 18:19:02'!
Object subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'aa 5/30/2023 18:19:02'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'aa 5/30/2023 18:19:02'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'aa 5/30/2023 18:19:02'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'aa 5/30/2023 18:19:02'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'aa 5/30/2023 18:19:02'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'aa 5/30/2023 18:19:03'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'aa 5/30/2023 18:19:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'aa 5/30/2023 18:19:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\Santiago\Downloads\Portfolio-Solucion (2).st----!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:40:47'!
transferNet

	| summaryString transferBalance |
	
	transferBalance := 0 .
	summaryString := '' .
	transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary . transfer affectBalance: transferBalance ] .
	^summaryString , 'Balance de transferencias = ' , transferBalance printString .
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:41:02' prior: 50608462!
accountSummary

	| summaryString |
	
	summaryString := '' .
	transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (self balance) printString .
	! !
!Transfer methodsFor: 'transaction' stamp: 'aa 5/30/2023 18:42:50'!
dataForSummary

	! !

!methodRemoval: Transfer #dataForSummary stamp: 'aa 5/30/2023 18:43:43'!
dataForSummary

	!
!TransferIN methodsFor: 'balance' stamp: 'aa 5/30/2023 18:44:25'!
dataForSummary

	^'Entrada por transferencia de ', (transfer value printString) , '
	'! !
!TransferOUT methodsFor: 'balance' stamp: 'aa 5/30/2023 18:44:32'!
dataForSummary

	^'Salida por transferencia de ', (transfer value printString) , '
	'! !

!classRenamed: #AccountSummaryTest as: #SummaryTest stamp: 'aa 5/30/2023 18:44:47'!
Smalltalk renameClassNamed: #AccountSummaryTest as: #SummaryTest!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:45:19'!
test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| account |
	
	account := ReceptiveAccount new .
	self assert: account accountSummary equals: 'Balance = 0'! !

!methodRemoval: SummaryTest #test01GivenAnAccountWithNoTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 18:45:19'!
test01GivenAnAccountWithNoTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| account |
	
	account := ReceptiveAccount new .
	self assert: account accountSummary equals: 'Balance = 0'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:45:44'!
test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance

	| account |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	self assert: account accountSummary equals: 'Extracción por 50
	Balance = -50'! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:45:58'!
test06GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance

	| account |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	self assert: account accountSummary equals: 'Extracción por 50
	Balance = -50'! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:46:41' prior: 50608778!
test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance

	| account |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	self assert: account accountSummary equals: 'Entrada por transferencia de 50
	Balance = 50'! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:47:56' prior: 50608801!
test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: account2 accountSummary equals: 'Entrada por transferencia de 50
	Balance = 50'! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:48:14' prior: 50608789!
test06GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: account1 accountSummary equals: 'Salida por transferencia de 50
	Balance = -50'! !

!testRun: #SummaryTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 18:48:16'!
PASSED!

!testRun: #SummaryTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 18:48:16'!
PASSED!

!testRun: #SummaryTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 18:48:16'!
PASSED!

!testRun: #SummaryTest #test04GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 18:48:16'!
PASSED!

!testRun: #SummaryTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 18:48:16'!
PASSED!

!testRun: #SummaryTest #test06GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 18:48:16'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:48:49'!
test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	Withdraw register: 50 on: account .
	self assert: account accountSummary equals: 'Depósito por 50
	Extracción por 50
	Balance = 0'! !

!methodRemoval: SummaryTest #test04GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 18:48:49'!
test04GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	Withdraw register: 50 on: account .
	self assert: account accountSummary equals: 'Depósito por 50
	Extracción por 50
	Balance = 0'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:48:53'!
test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: account1 accountSummary equals: 'Salida por transferencia de 50
	Balance = -50'! !

!methodRemoval: SummaryTest #test06GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 18:48:53'!
test06GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: account1 accountSummary equals: 'Salida por transferencia de 50
	Balance = -50'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:49:07' prior: 50608871!
test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 |
	
	account1 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	self assert: account1 accountSummary equals: 'Depósito por 50
	Extracción por 50
	Balance = 0'! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:50:03' prior: 50608929!
test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 50 from: account2 to: account1 .	
	self assert: account1 accountSummary equals: 'Depósito por 50
	Extracción por 50
	Salida por transferencia de 50
	Entrada por transferencia de 50
	Balance = 0'! !

!testRun: #SummaryTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 18:50:05'!
PASSED!

!testRun: #SummaryTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 18:50:07'!
PASSED!

!testRun: #SummaryTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 18:50:07'!
PASSED!

!testRun: #SummaryTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 18:50:07'!
PASSED!

!testRun: #SummaryTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 18:50:07'!
PASSED!

!testRun: #SummaryTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 18:50:07'!
PASSED!

!testRun: #SummaryTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 18:50:07'!
PASSED!

!classRenamed: #SummaryTest as: #ReportTest stamp: 'aa 5/30/2023 18:54:52'!
Smalltalk renameClassNamed: #SummaryTest as: #ReportTest!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:55:50'!
test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 50 from: account2 to: account1 .	
	self assert: account1 transferNet equals: 0! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:56:02' prior: 50609003!
test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: account transferNet equals: 0! !

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 18:56:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:58:05' prior: 50608711!
transferNet

	^transfers inject: 0 into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]! !

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 18:58:06'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 18:58:06'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 18:58:06'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 18:58:06'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 18:58:06'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 18:58:06'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 18:58:06'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 18:58:06'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:59:20'!
test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: account1 transferNet equals: -50! !

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 18:59:21'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 18:59:21'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 18:59:21'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 18:59:21'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 18:59:21'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 18:59:21'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 18:59:21'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 18:59:21'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 18:59:21'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:59:46'!
test08GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: account2 transferNet equals: 50! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 18:59:51'!
test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: account2 transferNet equals: 50! !

!methodRemoval: ReportTest #test08GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 18:59:51'!
test08GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: account2 transferNet equals: 50!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 18:59:54'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 18:59:54'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 18:59:54'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 18:59:54'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 18:59:54'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 18:59:54'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 18:59:54'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 18:59:54'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 18:59:54'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:04:53'!
test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: account1 transferNet equals: 20! !

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:04:54'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:04:54'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:05:08' prior: 50608943!
test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	self assert: account1 accountSummary equals: 'Depósito por 50
	Extracción por 50
	Salida por transferencia de 80
	Entrada por transferencia de 20
	Balance = 0'! !

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:05:10'!
FAILURE!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:05:27'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:05:35' prior: 50609286!
test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	self assert: account1 accountSummary equals: 'Depósito por 50
	Extracción por 50
	Salida por transferencia de 80
	Entrada por transferencia de 20
	Balance = -60'! !

Object subclass: #AccountSummary
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'aa 5/30/2023 19:15:18'!
Object subclass: #AccountSummary
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'aa 5/30/2023 19:17:04'!
createAccountSummary: anAccount

	^anAccount accountSummary 	! !

Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'aa 5/30/2023 19:17:17'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'aa 5/30/2023 19:17:21'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'no messages' stamp: 'aa 5/30/2023 19:17:43'!
createTransferNet: anAccount

	^anAccount transferNet ! !
!AccountSummary class methodsFor: 'no messages' stamp: 'aa 5/30/2023 19:18:45'!
for: anAccount

	AccountSummary new createAccountSummary: anAccount ! !
!TransferNet class methodsFor: 'nil' stamp: 'aa 5/30/2023 19:19:04'!
for: anAccount

	TransferNet new createTransferNet: anAccount ! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:19:50' prior: 50608757!
test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| account summary |
	
	account := ReceptiveAccount new .
	summary := account accountSummary.
	self assert: summary equals: 'Balance = 0'! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:19:56' prior: 50609392!
test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| account |
	
	account := ReceptiveAccount new .
	self assert: account accountSummary equals: 'Balance = 0'! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:20:01'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:20:01'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:20:17' prior: 50609403!
test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| account |
	
	account := ReceptiveAccount new .
	self assert: (AccountSummary for: account) equals: 'Balance = 0'! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:20:18'!
FAILURE!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:20:18'!
FAILURE!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:20:29'!
FAILURE!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:20:29'!
FAILURE!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:20:39' prior: 50609382!
for: anAccount

	^AccountSummary new createAccountSummary: anAccount ! !
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:20:47' prior: 50609387!
for: anAccount

	^TransferNet new createTransferNet: anAccount ! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:21:33'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:21:42' prior: 50607739!
test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance

	| account |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	self assert: (AccountSummary for: account) equals: 'Extracción por 50
	Balance = -50'! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:21:45' prior: 50607751!
test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance

	| account |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	self assert: (AccountSummary for: account) equals: 'Depósito por 50
	Balance = 50'! !

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 19:21:47'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:21:57' prior: 50608899!
test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (AccountSummary for: account1) equals: 'Salida por transferencia de 50
	Balance = -50'! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'aa 5/30/2023 19:23:40' prior: 50608435 overrides: 50608226!
balance

	^transfers 
		inject: (transactions 
					inject: 0
					into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ])
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 5/30/2023 19:23:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 5/30/2023 19:23:40'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'aa 5/30/2023 19:23:44' prior: 50609561 overrides: 50608226!
balance

	| balanceSum |

	balanceSum := transactions 
					inject: 0
					into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ] .					
	^transfers 
		inject: balanceSum 
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:27:09' prior: 50608813!
test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (AccountSummary for: account2) equals: 'Entrada por transferencia de 50
	Balance = 50'! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:27:22' prior: 50609317!
test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	self assert: (AccountSummary for: account1) equals: 'Depósito por 50
	Extracción por 50
	Salida por transferencia de 80
	Entrada por transferencia de 20
	Balance = -60'! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:27:45' prior: 50609017!
test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:27:51' prior: 50609076!
test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:27:55' prior: 50609145!
test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:27:59' prior: 50609216!
test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: account1) equals: 20! !

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:28:09'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:28:09'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:38:03'!
accountSummaryFor: anAccount

	| summaryString |
	
	summaryString := '' .
	anAccount transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	anAccount transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (anAccount balance) printString .
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:38:20' prior: 50609500!
for: anElement

	^AccountSummary new createAccountSummary: anElement ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:39:02'!
createSummary: anElement

	^anElement accountSummary 	! !

!methodRemoval: AccountSummary #createAccountSummary: stamp: 'aa 5/30/2023 19:39:05'!
createAccountSummary: anAccount

	^anAccount accountSummary 	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:39:11'!
createAccountSummary: anElement

	^anElement accountSummary 	! !

!methodRemoval: AccountSummary #createSummary: stamp: 'aa 5/30/2023 19:39:13'!
createSummary: anElement

	^anElement accountSummary 	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:39:43'!
createSummary: anElement

	^anElement accountSummary 	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:39:43' prior: 50609840!
for: anElement

	^AccountSummary new createSummary: anElement ! !

!methodRemoval: AccountSummary #createAccountSummary: stamp: 'aa 5/30/2023 19:39:43'!
createAccountSummary: anElement

	^anElement accountSummary 	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:40:05'!
accountSummary: anAccount

	| summaryString |
	
	summaryString := '' .
	anAccount transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	anAccount transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (anAccount balance) printString .
	! !

!methodRemoval: AccountSummary #accountSummaryFor: stamp: 'aa 5/30/2023 19:40:07'!
accountSummaryFor: anAccount

	| summaryString |
	
	summaryString := '' .
	anAccount transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	anAccount transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (anAccount balance) printString .
	!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:40:38'!
accountSummary: aMethodObject

	aMethodObject 
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:41:10'!
summary

	| summaryString |
	
	summaryString := '' .
	transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (self balance) printString .
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:41:11' prior: 50609864!
createSummary: anElement

	^anElement summary 	! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'aa 5/30/2023 19:41:11'!
accountSummary

	| summaryString |
	
	summaryString := '' .
	transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (self balance) printString .
	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:41:20' prior: 50609926!
createSummary: anElement

	^anElement summary : self! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:41:30'!
summary: aMethodObject

	aMethodObject 
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:41:48' prior: 50609944!
createSummary: anElement

	^anElement summary: self! !

!methodRemoval: ReceptiveAccount #summary stamp: 'aa 5/30/2023 19:41:52'!
summary

	| summaryString |
	
	summaryString := '' .
	transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (self balance) printString .
	!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:42:07' prior: 50609908!
accountSummary: aMethodObject

	aMethodObject accountSummary: self
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:42:41' prior: 50609949!
summary: aMethodObject

	aMethodObject accountSummary: self
	! !

!methodRemoval: ReceptiveAccount #accountSummary: stamp: 'aa 5/30/2023 19:42:54'!
accountSummary: aMethodObject

	aMethodObject accountSummary: self
	!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:43:37'!
FAILURE!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 19:43:37'!
FAILURE!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 19:43:37'!
FAILURE!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 19:43:37'!
FAILURE!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 19:43:37'!
FAILURE!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:43:37'!
FAILURE!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 19:43:37'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:43:37'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:43:37'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:43:37'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:44:04' prior: 50609977!
summary: aMethodObject

	^aMethodObject accountSummary: self
	! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:44:07'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:44:07'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:44:29'!
transferNet: aMethodObject

	^transfers inject: 0 into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:44:52' prior: 50609377!
createTransferNet: anElement

	^anElement transferNet ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:45:13'!
transferNetForAccount: anAccount

	^anAccount transfers inject: 0 into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]! !
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:45:21' prior: 50609506!
for: anElement

	^TransferNet new createTransferNet: anElement ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:45:48'!
accountTransferNet: anAccount

	^anAccount transfers inject: 0 into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]! !

!methodRemoval: TransferNet #transferNetForAccount: stamp: 'aa 5/30/2023 19:45:48'!
transferNetForAccount: anAccount

	^anAccount transfers inject: 0 into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:45:56' prior: 50610101!
createTransferNet: anElement

	^anElement transferNet: self! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:46:17' prior: 50610093!
transferNet: aMethodObject

	^aMethodObject accountTransferNet: self! !

!methodRemoval: ReceptiveAccount #transferNet stamp: 'aa 5/30/2023 19:46:18'!
transferNet

	^transfers inject: 0 into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 19:46:28'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 19:46:28'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 19:46:28'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 19:46:28'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 19:46:28'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 19:46:28'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 19:46:28'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:46:29'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 19:46:29'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 19:46:29'!
PASSED!

Object subclass: #AbstractReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AbstractReport category: 'Portfolio-Solucion' stamp: 'aa 5/30/2023 19:51:06'!
Object subclass: #AbstractReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'aa 5/30/2023 19:51:21'!
AbstractReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractReport subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'aa 5/30/2023 19:51:24'!
AbstractReport subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:51:55'!
startOperationOnAsset: anElement

	^anElement summary: self! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:51:56' prior: 50609870!
for: anElement

	^AccountSummary new startOperationOnAsset: anElement ! !

!methodRemoval: AccountSummary #createSummary: stamp: 'aa 5/30/2023 19:51:56'!
createSummary: anElement

	^anElement summary: self!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:52:29'!
startOperationOnAsset: anElement

	^anElement transferNet: self! !
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:52:30' prior: 50610114!
for: anElement

	^TransferNet new startOperationOnAsset: anElement ! !

!methodRemoval: TransferNet #createTransferNet: stamp: 'aa 5/30/2023 19:52:30'!
createTransferNet: anElement

	^anElement transferNet: self!
!AbstractReport methodsFor: 'no messages' stamp: 'aa 5/30/2023 19:52:51'!
startOperationOnAsset: anElement

	self subclassResponsibility ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:53:28'!
operationOnAsset: anAccount

	| summaryString |
	
	summaryString := '' .
	anAccount transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	anAccount transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (anAccount balance) printString .
	! !

!methodRemoval: AccountSummary #accountSummary: stamp: 'aa 5/30/2023 19:53:28'!
accountSummary: anAccount

	| summaryString |
	
	summaryString := '' .
	anAccount transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	anAccount transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (anAccount balance) printString .
	!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:53:39'!
operationOnAsset: anAccount

	^anAccount transfers inject: 0 into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]! !

!methodRemoval: TransferNet #accountTransferNet: stamp: 'aa 5/30/2023 19:53:39'!
accountTransferNet: anAccount

	^anAccount transfers inject: 0 into: [ :currentBalance :transfer | transfer affectBalance: currentBalance ]!
!AbstractReport methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 19:54:14'!
operationOnAsset: anAccount

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 5/30/2023 19:55:03'!
reportOperation: aMethodObject

	^aMethodObject operationOnAsset: self! !
!AbstractReport class methodsFor: 'no messages' stamp: 'aa 5/30/2023 20:01:36'!
for: anElement

	^AccountSummary new startOperationOnAsset: anElement ! !

!methodRemoval: AccountSummary class #for: stamp: 'aa 5/30/2023 20:01:38'!
for: anElement

	^AccountSummary new startOperationOnAsset: anElement !

!methodRemoval: TransferNet class #for: stamp: 'aa 5/30/2023 20:01:40'!
for: anElement

	^TransferNet new startOperationOnAsset: anElement !
!AbstractReport class methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 20:01:55' prior: 50610323!
for: anElement

	^self new startOperationOnAsset: anElement ! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 20:01:59'!
ERROR!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 20:02:12'!
ERROR!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:02:18'!
ERROR!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:02:18'!
ERROR!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:02:42'!
ERROR!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:02:42'!
ERROR!

!methodRemoval: ReceptiveAccount #summary: stamp: 'aa 5/30/2023 20:03:09'!
summary: aMethodObject

	^aMethodObject accountSummary: self
	!

!methodRemoval: ReceptiveAccount #transferNet: stamp: 'aa 5/30/2023 20:03:10'!
transferNet: aMethodObject

	^aMethodObject accountTransferNet: self!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 20:03:22' prior: 50610252 overrides: 50610267!
startOperationOnAsset: anElement

	^anElement reportOperation: self! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 20:03:25' prior: 50610237 overrides: 50610267!
startOperationOnAsset: anElement

	^anElement reportOperation: self! !
!AbstractReport methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 20:03:32' prior: 50610267!
startOperationOnAsset: anElement

	^anElement reportOperation: self! !

!methodRemoval: AccountSummary #startOperationOnAsset: stamp: 'aa 5/30/2023 20:03:41'!
startOperationOnAsset: anElement

	^anElement reportOperation: self!

!methodRemoval: TransferNet #startOperationOnAsset: stamp: 'aa 5/30/2023 20:03:43'!
startOperationOnAsset: anElement

	^anElement reportOperation: self!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 20:03:51'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:03:53'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 20:03:53'!
PASSED!
!AbstractReport methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 20:05:39' prior: 50610313!
operationOnAsset: anElement

	self subclassResponsibility ! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/30/2023 20:05:41'!
PASSED!

AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioResumee category: 'Portfolio-Solucion' stamp: 'aa 5/30/2023 20:11:40'!
AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioResumee methodsFor: 'no messages' stamp: 'aa 5/30/2023 20:11:52' overrides: 50610600!
operationOnAsset: anAccount! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 5/30/2023 20:17:43'!
summary

	| summaryString |
	
	summaryString := '' .
	transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (self balance) printString .
	! !

String!

'hola' addAll: 'chau'!

String!

CharacterSequence!

CharacterSequence!

SequenceableCollection!

Collection!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 5/30/2023 20:35:53' prior: 50610272 overrides: 50610600!
operationOnAsset: anAccount

	| summaryString |
	
	summaryString := '' .
	anAccount transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	anAccount transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (anAccount balance) printString .
	
	"^anAccount accountSummary
	^anAccount transactionSummary , anAccount transferSummary , 'Balance = ' , anAccount balance"! !

----SNAPSHOT----(30 May 2023 20:43:13) CuisUniversity-5706.image priorSource: 8799572!

----QUIT----(30 May 2023 20:43:18) CuisUniversity-5706.image priorSource: 8929820!

----STARTUP---- (31 May 2023 17:01:40) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej7\windows64\CuisUniversity-5706.image!


!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 5/31/2023 17:02:33'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 5/31/2023 17:02:33'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 5/31/2023 17:02:33'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 5/31/2023 17:02:34'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 5/31/2023 17:02:34'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 5/31/2023 17:02:34'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 5/31/2023 17:02:34'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/31/2023 17:02:34'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 5/31/2023 17:02:34'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 5/31/2023 17:02:34'!
PASSED!

AbstractReport subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:31:21'!
AbstractReport subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 11:32:29'!
summary: aMethodObject

	
	^transactions do: [ :transaction | transaction addToReport: aMethodObject ]
	! !

Object subclass: #AbstractTransactions
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AbstractTransactions category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:33:28'!
Object subclass: #AbstractTransactions
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractTransactions subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractTransactions subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AbstractTransactions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AbstractTransactions category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:33:52'!
Object subclass: #AbstractTransactions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractTransactions subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:33:56'!
AbstractTransactions subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractTransactions subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransfer category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:33:59'!
AbstractTransactions subclass: #AccountTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'aa 6/1/2023 11:34:53'!
addToReport: aMethodObject

	aMethodObject addDepositToSummary: self! !
!Withdraw methodsFor: 'initialization' stamp: 'aa 6/1/2023 11:35:07'!
addToReport: aMethodObject

	aMethodObject addWithdrawToSummary: self! !
!TransferIN methodsFor: 'balance' stamp: 'aa 6/1/2023 11:35:19'!
addToReport: aMethodObject

	aMethodObject addTransferINToSummary: self! !
!TransferOUT methodsFor: 'balance' stamp: 'aa 6/1/2023 11:35:29'!
addToReport: aMethodObject

	aMethodObject addTransferOUTToSummary: self! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:35:45'!
addDepositToSummary: aDeposit! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:35:54'!
addWithdrawToSummary: aWithdraw! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:36:06'!
addTransferINToSummary: aTransferIN! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:36:14'!
addTransferOUTToSummary: aTransferOUT! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:37:35' prior: 50610690 overrides: 50610600!
operationOnAsset: anAccount

	report := '' .
	anAccount summary: self! !

!methodRemoval: ReceptiveAccount #summary stamp: 'aa 6/1/2023 11:37:49'!
summary

	| summaryString |
	
	summaryString := '' .
	transactions do: [ :transaction | summaryString := summaryString , transaction dataForSummary ] .
	transfers do: [ :transfer | summaryString := summaryString , transfer dataForSummary ] .
	^summaryString , 'Balance = ' , (self balance) printString .
	!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:38:43'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:40:08' prior: 50610884 overrides: 50610600!
operationOnAsset: anAccount

	report := OrderedCollection new .
	anAccount summary: self! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:40:57' prior: 50610867!
addDepositToSummary: aDeposit

	report add: ''! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:41:45'!
addDepositToReport: aDeposit

	report add: ''! !

!methodRemoval: AccountSummary #addDepositToSummary: stamp: 'aa 6/1/2023 11:41:46'!
addDepositToSummary: aDeposit

	report add: ''!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:41:53'!
addTransferINToReport: aTransferIN! !

!methodRemoval: AccountSummary #addTransferINToSummary: stamp: 'aa 6/1/2023 11:41:53'!
addTransferINToSummary: aTransferIN!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:42:01'!
addTransferOUTToReport: aTransferOUT! !

!methodRemoval: AccountSummary #addTransferOUTToSummary: stamp: 'aa 6/1/2023 11:42:01'!
addTransferOUTToSummary: aTransferOUT!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:42:07'!
addWithdrawToReport: aWithdraw! !

!methodRemoval: AccountSummary #addWithdrawToSummary: stamp: 'aa 6/1/2023 11:42:07'!
addWithdrawToSummary: aWithdraw!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:42:28' prior: 50610919!
addDepositToReport: aDeposit

	report add: 'Depósito por ', aDeposit value! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:42:46' prior: 50610928!
addTransferINToReport: aTransferIN

	report add: 'Transferencia por ', aTransferIN value! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:43:01' prior: 50610952!
addDepositToReport: aDeposit

	report add: 'Depósito por ', aDeposit value printString ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:43:13' prior: 50610958!
addTransferINToReport: aTransferIN

	report add: 'Entrada por transferencia de ', aTransferIN value printString ! !
!TransferIN methodsFor: 'balance' stamp: 'aa 6/1/2023 11:43:47' prior: 50610857!
addToReport: aMethodObject

	aMethodObject addTransferINToReport: self! !
!TransferOUT methodsFor: 'balance' stamp: 'aa 6/1/2023 11:43:52' prior: 50610862!
addToReport: aMethodObject

	aMethodObject addTransferOUTToReport: self! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:44:04' prior: 50610852!
addToReport: aMethodObject

	aMethodObject addWithdrawToReport: self! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:44:29' prior: 50610847!
addToReport: aMethodObject

	aMethodObject addDepositToReport: self! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:45:01' prior: 50610970!
addTransferINToReport: aTransferIN

	report add: 'Entrada por transferencia de ', aTransferIN transfer value printString ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:45:17' prior: 50610936!
addTransferOUTToReport: aTransferOUT

	report add: 'Salida por transferencia de ', aTransferOUT transfer value printString ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:45:32' prior: 50610944!
addWithdrawToReport: aWithdraw

	report add: 'Extracción por ', aWithdraw value printString ! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:46:11' prior: 50609468!
test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| account result |
	
	account := ReceptiveAccount new .
	result := OrderedCollection with: 'Balance = 0' .
	self assert: (AccountSummary for: account) equals: result! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:46:13'!
FAILURE!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:46:13'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:46:34' prior: 50610908 overrides: 50610600!
operationOnAsset: anAccount

	report := OrderedCollection new .
	anAccount summary: self
	^report! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:46:42'!
ERROR!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:46:42'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:46:48' prior: 50611043 overrides: 50610600!
operationOnAsset: anAccount

	report := OrderedCollection new .
	anAccount summary: self .
	^report! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:46:48'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:47:13' prior: 50611020!
test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| account result |
	
	account := ReceptiveAccount new .
	result := OrderedCollection with: 'Balance = 0' .
	self assert: result equals: (AccountSummary for: account)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:48:04' prior: 50611061 overrides: 50610600!
operationOnAsset: anAccount

	report := OrderedCollection new .
	anAccount summary: self .
	report add: 'Balance = ', anAccount balance
	^report! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:48:05' prior: 50611086 overrides: 50610600!
operationOnAsset: anAccount

	report := OrderedCollection new .
	anAccount summary: self .
	report add: 'Balance = ', anAccount balance .
	^report! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:48:08'!
ERROR!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:48:08'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:48:19' prior: 50611095 overrides: 50610600!
operationOnAsset: anAccount

	report := OrderedCollection new .
	anAccount summary: self .
	report add: 'Balance = ', anAccount balance printString .
	^report! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:48:20'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:48:22'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:48:40' prior: 50609517!
test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance

	| account result |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	self assert: (AccountSummary for: account) equals: 'Extracción por 50
	Balance = -50'! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:49:14' prior: 50611133!
test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance

	| account result |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	result := OrderedCollection with: 'Extracción por 50' with: 'Balance = 0' .
	self assert: result equals: (AccountSummary for: account)! !

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 11:49:15'!
FAILURE!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 11:49:15'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:49:30' prior: 50611145!
test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance

	| account result |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	result := OrderedCollection with: 'Extracción por 50' with: 'Balance = -50' .
	self assert: result equals: (AccountSummary for: account)! !

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 11:49:32'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:49:50' prior: 50609529!
test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance

	| account result |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	result := OrderedCollection with: 'Depósito por 50' with: 'Balance = 50' .
	self assert: result equals: (AccountSummary for: account)! !

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 11:49:51'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:49:51'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 11:49:51'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 11:49:51'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 11:49:51'!
FAILURE!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 11:49:51'!
FAILURE!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 11:49:51'!
FAILURE!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 11:49:51'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 11:49:51'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 11:49:51'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 11:49:51'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:50:22' prior: 50609546!
test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	result := OrderedCollection with: 'Salida por transferencia de 50' with: 'Balance = -50' .
	self assert: result equals: (AccountSummary for: account1)! !

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 11:50:24'!
FAILURE!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 11:50:27'!
FAILURE!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 11:50:27'!
FAILURE!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 11:50:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 11:51:18' prior: 50610779!
summary: aMethodObject

	
	transactions do: [ :transaction | transaction addToReport: aMethodObject ] .
	^transfers do: [ :transfer | transfer addToReport: aMethodObject ] ! !

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 11:51:22'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:51:46' prior: 50609629!
test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	result := OrderedCollection with: 'Entrada por transferencia de 50' with: 'Balance = 50' .
	self assert: result equals: (AccountSummary for: account2)! !

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 11:51:47'!
FAILURE!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 11:51:47'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 11:51:47'!
FAILURE!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 11:51:51'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:52:00' prior: 50609644!
test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	result := OrderedCollection with: 'Salida por transferencia de 50' with: 'Balance = -50' .
	self assert: result equals: (AccountSummary for: account1)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:53:02' prior: 50611388!
test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	result := OrderedCollection with: 'Depósito por 50' with: 'Extracción por 50' with: 'Salida por transferencia de 80' with: 'Entrada por transferencia de 20' with: 'Balance = -60' .
	self assert: result equals: (AccountSummary for: account1)! !

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 11:53:03'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 11:53:06'!
PASSED!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:54:44'!
AbstractReport subclass: #TransferNet
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:54:42'!
addTransferINToReport: aTransferIN

	report := report + aTransferIN transfer value! !

AbstractReport subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:54:54'!
AbstractReport subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:54:57'!
AbstractReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AbstractReport
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AbstractReport category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 11:55:00'!
Object subclass: #AbstractReport
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:55:21'!
addTransferOUTToReport: aTransferOUT

	report := report - aTransferOUT transfer value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 11:59:59' prior: 50610299 overrides: 50610600!
operationOnAsset: anAccount

	report := 0 .
	anAccount ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 12:01:12'!
addTransactionsToReport: aMethodObject

	
	^transactions do: [ :transaction | transaction addToReport: aMethodObject ] .! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 12:01:23'!
addTransfersToReport: aMethodObject

	
	^transfers do: [ :transfer | transfer addToReport: aMethodObject ] ! !

!methodRemoval: ReceptiveAccount #summary: stamp: 'aa 6/1/2023 12:01:27'!
summary: aMethodObject

	
	transactions do: [ :transaction | transaction addToReport: aMethodObject ] .
	^transfers do: [ :transfer | transfer addToReport: aMethodObject ] !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:01:44' prior: 50611114 overrides: 50610600!
operationOnAsset: anAccount

	report := OrderedCollection new .
	anAccount addTransactionsTo: self .
	anAccount addTransfersToReport: self .
	report add: 'Balance = ', anAccount balance printString .
	^report! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 12:01:48'!
ERROR!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 12:01:48'!
ERROR!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 12:01:48'!
ERROR!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 12:01:48'!
ERROR!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 12:01:48'!
ERROR!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 12:01:48'!
ERROR!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 12:01:48'!
FAILURE!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 12:01:48'!
FAILURE!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 12:01:48'!
FAILURE!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 12:01:48'!
FAILURE!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 12:02:28'!
ERROR!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 12:02:28'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:02:45' prior: 50611569 overrides: 50610600!
operationOnAsset: anAccount

	report := OrderedCollection new .
	anAccount addTransactionsToReport: self .
	anAccount addTransfersToReport: self .
	report add: 'Balance = ', anAccount balance printString .
	^report! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 12:02:46'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 12:02:48'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 12:02:48'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 12:02:48'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 12:02:48'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 12:02:48'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 12:02:48'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 12:02:48'!
FAILURE!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 12:02:48'!
FAILURE!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 12:02:48'!
FAILURE!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 12:02:48'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:03:15' prior: 50611542 overrides: 50610600!
operationOnAsset: anAccount

	report := 0 .
	anAccount addTransfersToReport: self .
	^report! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 12:03:19'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 12:03:19'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 12:03:20'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 12:03:20'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 12:03:20'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 12:03:20'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 12:03:20'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 12:03:20'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 12:03:20'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 12:03:20'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 12:33:53'!
PASSED!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 12:34:54'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:36:05'!
test12AnAccountCanBeNamed

	self assert: 'Hernan' equals: (ReceptiveAccount named: 'Hernan') name
! !

!testRun: #ReceptiveAccountTest #test12AnAccountCanBeNamed stamp: 'aa 6/1/2023 12:36:08'!
ERROR!
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:36:21'!
named: aRenameMe1 
	self shouldBeImplemented.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:36:45' prior: 50611832!
named: aName 
	
	^ReceptiveAccount new initializeWithName: aName! !

!testRun: #ReceptiveAccountTest #test12AnAccountCanBeNamed stamp: 'aa 6/1/2023 12:36:47'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'aa 6/1/2023 12:36:54'!
initializeWithName: aName 
	self shouldBeImplemented.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'aa 6/1/2023 12:36:58' prior: 50611845!
initializeWithName: aName 

	name := aName.! !

!testRun: #ReceptiveAccountTest #test12AnAccountCanBeNamed stamp: 'aa 6/1/2023 12:37:00'!
FAILURE!
!ReceptiveAccount methodsFor: 'name' stamp: 'aa 6/1/2023 12:37:38' overrides: 16903442!
name

	^name! !

!testRun: #ReceptiveAccountTest #test12AnAccountCanBeNamed stamp: 'aa 6/1/2023 12:37:41'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:38:19'!
test12GivenAnAccountThenItCanHaveAName

	self assert: 'Hernan' equals: (ReceptiveAccount named: 'Hernan') name
! !

!methodRemoval: ReceptiveAccountTest #test12AnAccountCanBeNamed stamp: 'aa 6/1/2023 12:38:19'!
test12AnAccountCanBeNamed

	self assert: 'Hernan' equals: (ReceptiveAccount named: 'Hernan') name
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:38:48'!
test13GivenAnAccountWithNoNameThenCantAskForName

	self assert: 'Hernan' equals: (ReceptiveAccount named: 'Hernan') name
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:39:38' prior: 50611877!
test13GivenAnAccountWithNoNameThenCantAskForName

	| account |
	
	account := ReceptiveAccount new .
	self 
		should: [ account name]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: ReceptiveAccount accountDoesNotHaveAName equals: anError messageText. ]! !

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:39:41'!
FAILURE!
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:40:19'!
errorAccountDoesNotHaveAName

	^'Esta cuenta no tiene nombre'! !
!ReceptiveAccount methodsFor: 'name' stamp: 'aa 6/1/2023 12:40:48' prior: 50611859 overrides: 16903442!
name

	name := '' ifTrue: [ ^self error: ReceptiveAccount errorAccountDoesNotHaveAName ]
	^name! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'aa 6/1/2023 12:41:02' prior: 50608398 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.
	transfers := OrderedCollection new .
	name := '' .! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:41:08' prior: 50611884!
test13GivenAnAccountWithNoNameThenCantAskForName

	| account |
	
	account := ReceptiveAccount new .
	self 
		should: [ account name]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: ReceptiveAccount errorAccountDoesNotHaveAName equals: anError messageText. ]! !

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:41:10'!
ERROR!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:41:10'!
ERROR!
!ReceptiveAccount methodsFor: 'name' stamp: 'aa 6/1/2023 12:41:21' prior: 50611906 overrides: 16903442!
name

	name := '' ifTrue: [ ^self error: ReceptiveAccount errorAccountDoesNotHaveAName ] .
	^name! !

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:41:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:41:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:41:42'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:42:20' prior: 50611920!
test13GivenAnAccountWithNoNameThenCantAskForName

	| account |
	
	account := ReceptiveAccount new .
	self 
		should: [ account name ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: ReceptiveAccount errorAccountDoesNotHaveAName equals: anError messageText. ]! !
!ReceptiveAccount methodsFor: 'name' stamp: 'aa 6/1/2023 12:42:40' prior: 50611941 overrides: 16903442!
name

	(name := '') ifTrue: [ ^self error: ReceptiveAccount errorAccountDoesNotHaveAName ] .
	^name! !
!ReceptiveAccount methodsFor: 'name' stamp: 'aa 6/1/2023 12:42:53' prior: 50611972 overrides: 16903442!
name

	(name := '') ifTrue: [ ^self error: ReceptiveAccount errorAccountDoesNotHaveAName ] ifFalse: [  ^name ] .! !

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:42:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:42:57'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:43:12' prior: 50611959!
test13GivenAnAccountWithNoNameThenCantAskForName

	| account |
	
	account := ReceptiveAccount new .
	account name. 
	self 
		should: [ account name ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: ReceptiveAccount errorAccountDoesNotHaveAName equals: anError messageText. ]! !
!ReceptiveAccount methodsFor: 'name' stamp: 'aa 6/1/2023 12:43:51' prior: 50611979 overrides: 16903442!
name

	(name = '') ifTrue: [ ^self error: ReceptiveAccount errorAccountDoesNotHaveAName ] ifFalse: [  ^name ] .! !

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:43:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:43:53'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:43:59' prior: 50611994!
test13GivenAnAccountWithNoNameThenCantAskForName

	| account |
	
	account := ReceptiveAccount new .
	self 
		should: [ account name ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: ReceptiveAccount errorAccountDoesNotHaveAName equals: anError messageText. ]! !

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:44:02'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:44:39'!
test16GivenAPortfolioThenItCanHaveAName

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:45:35' prior: 50612038!
test16GivenAPortfolioThenItCanHaveAName

	self assert: 'Portfolio de Nicolas' equals: (Portfolio named: 'Nicolas') name! !

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:45:37'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:45:48'!
named: aRenameMe1 
	self shouldBeImplemented.! !

!methodRemoval: Portfolio class #named: stamp: 'aa 6/1/2023 12:46:05'!
named: aRenameMe1 
	self shouldBeImplemented.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 12:46:09'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:46:09'!
ERROR!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:46:09'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:46:13'!
named: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:46:29' prior: 50612141!
named: aName 
	
	^Portfolio new.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:46:37' prior: 50612146!
named: aName 
	
	^Portfolio new named: aName .! !

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:46:38'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'aa 6/1/2023 12:46:44'!
named: aName 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'initialization' stamp: 'aa 6/1/2023 12:46:54' prior: 50612159!
named: aName 
	
	name := aName .! !

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:46:57'!
FAILURE!
!Portfolio methodsFor: 'name' stamp: 'aa 6/1/2023 12:47:27' overrides: 16903442!
name 

	^name! !
!Portfolio methodsFor: 'initialization' stamp: 'aa 6/1/2023 12:47:45' prior: 50612164!
named: aName 
	
	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName .! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 12:47:50'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:47:50'!
FAILURE!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:47:50'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'aa 6/1/2023 12:48:09' prior: 50612175!
named: aName 
	
	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := 'Portfolio de ', aName .! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 12:48:13'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:48:13'!
PASSED!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:48:49'!
named: aName with: anAccount with: anotherAccount
	
	^Portfolio new named: aName .! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:48:53'!
named: aName with: anAccount 
	
	^Portfolio new named: aName .! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:49:45' prior: 50612318!
named: aName with: anAccount 
	
	Portfolio new named: aName; add: anAccount; yourself ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:49:49' prior: 50612324!
named: aName with: anAccount 
	
	^Portfolio new named: aName; add: anAccount; yourself ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:50:05' prior: 50612312!
named: aName with: anAccount with: anotherAccount
	
	^Portfolio new named: aName; add: anAccount; add: anotherAccount; yourself! !

Portfolio named: 'Juan' with: account2 with: account1 !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:51:01' prior: 50612330!
named: aName with: anAccount 
	
	| portfolio |
	portfolio := Portfolio new named: aName .
	portfolio add: anAccount 
	^portfolio! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:51:15' prior: 50612336!
named: aName with: anAccount with: anotherAccount
	
	| portfolio |
	portfolio := Portfolio new named: aName .
	portfolio add: anAccount .
	portfolio add: anotherAccount .
	^portfolio! !

account1 := ReceptiveAccount new !

account2 := ReceptiveAccount new !

portfolio := Portfolio named: 'juan' with: account2 with: account1 !

portfolio accountsSize !

portfolio accountsIncludes: account2 !

portfolio accountsIncludes: account1 !

portfolio accountsIncludes: account!

portfolio name!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:52:53'!
errorPortfolioDoesNotHaveAName

	^'Este portfolio no tiene nombre'! !
!Portfolio methodsFor: 'name' stamp: 'aa 6/1/2023 12:53:10' prior: 50612171 overrides: 16903442!
name 

	(name = '') ifTrue: [ ^self error: ReceptiveAccount errorAccountDoesNotHaveAName ] ifFalse: [  ^name ] .! !
!Portfolio methodsFor: 'initialization' stamp: 'aa 6/1/2023 12:53:19' prior: 50608283 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := '' .! !
!PortfolioTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:53:56'!
test17GivenAPortfolioWithNoNameThenCantAskForName

	| portfolio |
	
	portfolio := ReceptiveAccount new .
	self 
		should: [ portfolio name ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio errorPortfolioDoesNotHaveAName equals: anError messageText. ]! !

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:53:57'!
FAILURE!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:53:57'!
FAILURE!

----SNAPSHOT----(1 June 2023 12:54:12) CuisUniversity-5706.image priorSource: 8929908!
!PortfolioTest methodsFor: 'tests' stamp: 'aa 6/1/2023 12:54:26' prior: 50612390!
test17GivenAPortfolioWithNoNameThenCantAskForName

	| portfolio |
	
	portfolio := Portfolio new .
	self 
		should: [ portfolio name ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio errorPortfolioDoesNotHaveAName equals: anError messageText. ]! !

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:54:26'!
FAILURE!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:54:39'!
FAILURE!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:54:39'!
FAILURE!
!Portfolio methodsFor: 'name' stamp: 'aa 6/1/2023 12:55:11' prior: 50612377 overrides: 16903442!
name 

	(name = '') ifTrue: [ ^self error: Portfolio errorPortfolioDoesNotHaveAName ] ifFalse: [  ^name ] .! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 12:55:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 12:55:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 12:55:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 12:55:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 12:55:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 12:55:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 12:55:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 12:55:12'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 12:55:12'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 12:56:51'!
test01GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:06:32'!
test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !

!methodRemoval: ReportTest #test01GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:06:32'!
test01GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)!
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:06:58' prior: 50610668 overrides: 50610600!
operationOnAsset: aPortfolio! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:07:38'!
reportOperation: aMethodObject

	^aMethodObject reportOperation: self! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:07:57' prior: 50612550!
reportOperation: aMethodObject

	^aMethodObject operationOnAsset: self! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:08:19' prior: 50612547 overrides: 50610600!
operationOnAsset: aPortfolio

	report := aPortfolio name! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:08:23' prior: 50612562 overrides: 50610600!
operationOnAsset: aPortfolio

	report := aPortfolio name
	^report ! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 13:08:26'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:08:26'!
ERROR!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:08:26'!
ERROR!
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:08:41' prior: 50612568 overrides: 50610600!
operationOnAsset: aPortfolio

	report := aPortfolio name .
	^report ! !

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:08:43'!
FAILURE!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:08:43'!
FAILURE!
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:09:14' prior: 50612634 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	report := aPortfolio name .
	^report ! !

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:09:17'!
FAILURE!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:09:17'!
FAILURE!
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:09:31' prior: 50612650 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	report add: aPortfolio name .
	^report ! !

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:09:33'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:09:53'!
test11GivenAPortfolioWithAnAccountWhenAskingForAPortfolioResumeeThenReturnsItsNameAndAccountName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:10:41'!
test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !

!methodRemoval: ReportTest #test11GivenAPortfolioWithAnAccountWhenAskingForAPortfolioResumeeThenReturnsItsNameAndAccountName stamp: 'aa 6/1/2023 13:10:41'!
test11GivenAPortfolioWithAnAccountWhenAskingForAPortfolioResumeeThenReturnsItsNameAndAccountName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:12:01' prior: 50612690!
test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' with: (ReceptiveAccount named: 'Maximiliano') with: (Portfolio named: 'Hijos') .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:12:50' prior: 50612716!
test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' with: (ReceptiveAccount named: 'Maximiliano') with: (Portfolio named: 'Hijos') .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'aa 6/1/2023 13:13:10' prior: 50611851!
initializeWithName: aName 

	name := 'Cuenta de ', aName.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'aa 6/1/2023 13:13:21' prior: 50611865!
test12GivenAnAccountThenItCanHaveAName

	self assert: 'Cuenta de Hernan' equals: (ReceptiveAccount named: 'Hernan') name
! !

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 13:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 13:13:25'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 13:13:27'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 13:13:28'!
PASSED!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 13:13:28'!
FAILURE!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 13:13:28'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:14:02' prior: 50612731!
test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' with: (ReceptiveAccount named: 'Maximiliano') with: (Portfolio named: 'Hijos') .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 13:14:05'!
FAILURE!

AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: 'indentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioResumee category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 13:14:26'!
AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: 'indentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:15:38'!
addAssetsToReport: aMethodObject

	^accounts do: [ :asset | asset addToReport: aMethodObject ] ! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:16:19'!
addToReport: aMethodObject

	^aMethodObject addPortfolioToReport: self! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 13:16:43'!
addAssetToReport: aMethodObject

	^aMethodObject addPortfolioToReport: self! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 13:16:52' prior: 50612986!
addAssetToReport: aMethodObject

	^aMethodObject addAccountToReport: self! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:17:58' prior: 50612981!
addToReport: aMethodObject

	^accounts do: [ :asset | asset addToReport: aMethodObject ] ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 13:18:05'!
addToReport: aMethodObject

	^aMethodObject addAccountToReport: self! !

!methodRemoval: ReceptiveAccount #addAssetToReport: stamp: 'aa 6/1/2023 13:18:06'!
addAssetToReport: aMethodObject

	^aMethodObject addAccountToReport: self!
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:18:16'!
addAssetToReport: aMethodObject

	^accounts do: [ :asset | asset addToReport: aMethodObject ] ! !

!methodRemoval: Portfolio #addAssetsToReport: stamp: 'aa 6/1/2023 13:18:17'!
addAssetsToReport: aMethodObject

	^accounts do: [ :asset | asset addToReport: aMethodObject ] !

!methodRemoval: Portfolio #addToReport: stamp: 'aa 6/1/2023 13:18:20'!
addToReport: aMethodObject

	^accounts do: [ :asset | asset addToReport: aMethodObject ] !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 13:18:27'!
addAssetToReport: aMethodObject

	^aMethodObject addAccountToReport: self! !

!methodRemoval: ReceptiveAccount #addToReport: stamp: 'aa 6/1/2023 13:18:29'!
addToReport: aMethodObject

	^aMethodObject addAccountToReport: self!
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:18:54' prior: 50613013!
addAssetToReport: aMethodObject

	aMethodObject addPortfolioToReport: self .
	^accounts do: [ :asset | asset addToReport: aMethodObject ] ! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:19:56' prior: 50612667 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	report add: aPortfolio name .
	aPortfolio addMyAssets: self .
	^report ! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:21:20'!
addMyAssets: aMethodObject

	| assets |
	assets := OrderedCollection new .
	accounts do: [ :asset | assets add: '    ', asset name] .
	^assets! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:21:45' prior: 50613048 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	report add: aPortfolio name .
	aPortfolio addMyAssets: self reportAssets: report .
	^report ! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:22:06'!
addMyAssets: aMethodObject reportAssets: assets

	accounts do: [ :asset | assets add: '    ', asset name] ! !

!methodRemoval: Portfolio #addMyAssets: stamp: 'aa 6/1/2023 13:22:08'!
addMyAssets: aMethodObject

	| assets |
	assets := OrderedCollection new .
	accounts do: [ :asset | assets add: '    ', asset name] .
	^assets!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 13:22:29'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:24:07'!
test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' with: (ReceptiveAccount named: 'Maximiliano') with: (Portfolio named: 'Hijos') .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:29:38' prior: 50613090!
test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolioMaxi portfolioHijos accountJulian accountCoca accountMaxi result |
	
	accountMaxi := ReceptiveAccount named: 'Maximiliano' .
	accountJulian := ReceptiveAccount named: 'Julian' .
	accountCoca := ReceptiveAccount named: 'Coca Sarli' .
	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .
	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .
	
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' with: '        Cuenta de Julian' with: '        Cuenta de Coca Sarli' .
	self assert: result equals: (PortfolioResumee for: portfolioMaxi)! !

!methodRemoval: Portfolio #addMyAssets:reportAssets: stamp: 'aa 6/1/2023 13:30:14'!
addMyAssets: aMethodObject reportAssets: assets

	accounts do: [ :asset | assets add: '    ', asset name] !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:30:41' prior: 50613064 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	report add: aPortfolio name .
	aPortfolio addAssetToReport: self .
	^report ! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:31:11'!
addPortfolioToReport: aPortfolio! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:31:18'!
addAccountToReport: anAccount! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:32:56'!
addAssetToReport: aMethodObject withIndentation: anIndentation

	aMethodObject addPortfolioToReport: self .
	^accounts do: [ :asset | asset addToReport: aMethodObject ] ! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:33:20' prior: 50613158!
addAssetToReport: aMethodObject withIndentation: anIndentation

	aMethodObject addPortfolioToReport: self .
	^accounts do: [ :asset | asset addAssetToReport: aMethodObject withIndentation: anIndentation ] ! !

!methodRemoval: Portfolio #addAssetToReport: stamp: 'aa 6/1/2023 13:33:43'!
addAssetToReport: aMethodObject

	aMethodObject addPortfolioToReport: self .
	^accounts do: [ :asset | asset addToReport: aMethodObject ] !
!ReceptiveAccount methodsFor: 'reports' stamp: 'aa 6/1/2023 13:34:07'!
addAssetToReport: aMethodObject withIndentation: anIndentation

	^aMethodObject addAccountToReport: self withIndentation: anIndentation ! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:34:20' prior: 50613166!
addAssetToReport: aMethodObject withIndentation: anIndentation

	aMethodObject addPortfolioToReport: self withIndentation: anIndentation .
	^accounts do: [ :asset | asset addAssetToReport: aMethodObject withIndentation: anIndentation ] ! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:34:27'!
addAccountToReport: anAccount withIndentation: anIndentation! !

!methodRemoval: PortfolioResumee #addAccountToReport: stamp: 'aa 6/1/2023 13:34:29'!
addAccountToReport: anAccount!
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:34:31'!
addPortfolioToReport: aPortfolio withIndentation: anIndentation! !

!methodRemoval: PortfolioResumee #addPortfolioToReport: stamp: 'aa 6/1/2023 13:34:32'!
addPortfolioToReport: aPortfolio!

!methodRemoval: ReceptiveAccount #addAssetToReport: stamp: 'aa 6/1/2023 13:34:52'!
addAssetToReport: aMethodObject

	^aMethodObject addAccountToReport: self!
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:35:51' prior: 50613142 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	report add: aPortfolio name .
	aPortfolio addAssetToReport: self withIndentation: ''.
	^report ! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:36:05' prior: 50613224 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	^report ! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:36:33' prior: 50613209!
addPortfolioToReport: aPortfolio withIndentation: anIndentation

	report add: aPortfolio name! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:36:49' prior: 50613200!
addAccountToReport: anAccount withIndentation: anIndentation

	report add: '    ', anAccount name! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:36:56' prior: 50613241!
addPortfolioToReport: aPortfolio withIndentation: anIndentation

	report add: '    ', aPortfolio name! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:37:14' prior: 50613255!
addPortfolioToReport: aPortfolio withIndentation: anIndentation

	report add: anIndentation, '    ', aPortfolio name! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:37:19' prior: 50613248!
addAccountToReport: anAccount withIndentation: anIndentation

	report add: anIndentation, '    ', anAccount name! !

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 13:37:23'!
FAILURE!

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 13:37:23'!
FAILURE!

accountMaxi := ReceptiveAccount named: 'Maximiliano' .!

	accountJulian := ReceptiveAccount named: 'Julian' .!

	accountCoca := ReceptiveAccount named: 'Coca Sarli' .!

	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .!

	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .!

PortfolioResumee for: portfolioMaxi !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 13:39:18' prior: 50613189!
addAssetToReport: aMethodObject withIndentation: anIndentation

	aMethodObject addPortfolioToReport: self withIndentation: anIndentation .
	^accounts do: [ :asset | asset addAssetToReport: aMethodObject withIndentation: anIndentation, '    ' ] ! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:39:57' prior: 50613262!
addPortfolioToReport: aPortfolio withIndentation: anIndentation

	report add: anIndentation, aPortfolio name! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:40:02' prior: 50613269!
addAccountToReport: anAccount withIndentation: anIndentation

	report add: anIndentation, anAccount name! !

PortfolioResumee for: portfolioMaxi!

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 13:40:20'!
PASSED!

	accountFlor := ReceptiveAccount new!

	portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor !

	portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor .!

	portfolioTobiasIlicic accountsSize !

	portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor .!

	portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor with: accountMaxi .!

	portfolioHijos add: portfolioTobiasIlicic !

	portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor .!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:42:45' prior: 50612345!
named: aName with: anAccount 
	
	| portfolio |
	portfolio := Portfolio new named: aName .
	portfolio add: anAccount .
	^portfolio! !

	portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor .!

	portfolioHijos add: portfolioTobiasIlicic !

	portfolioTobiasIlicic accountsSize !

PortfolioResumee for: portfolioMaxi!

accountMaxi := ReceptiveAccount named: 'Maximiliano' .!

	accountJulian := ReceptiveAccount named: 'Julian' .!

	accountCoca := ReceptiveAccount named: 'Coca Sarli' .!

	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .!

	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .!

	accountFlor := ReceptiveAccount named: 'Flor' .!

	portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor .!

	portfolioHijos add: portfolioTobiasIlicic !

PortfolioResumee for: portfolioMaxi!

AbstractReport subclass: #PortfolioSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSummary category: 'Portfolio-Solucion' stamp: 'aa 6/1/2023 13:50:49'!
AbstractReport subclass: #PortfolioSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummary methodsFor: 'no messages' stamp: 'aa 6/1/2023 13:51:12' overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	^report ! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:52:11'!
addPortfolioToReport: aPortfolio withIndentation: anIndentation

	report add: anIndentation, aPortfolio name! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:52:18'!
addAccountToReport: anAccount withIndentation: anIndentation

	report add: anIndentation, anAccount name! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:52:27'!
addDepositToReport: aDeposit

	report add: 'Depósito por ', aDeposit value printString ! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:52:32'!
addTransferINToReport: aTransferIN

	report add: 'Entrada por transferencia de ', aTransferIN transfer value printString ! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:52:40'!
addTransferOUTToReport: aTransferOUT

	report add: 'Salida por transferencia de ', aTransferOUT transfer value printString ! !

!methodRemoval: PortfolioSummary #addTransferOUTToReport: stamp: 'aa 6/1/2023 13:53:01'!
addTransferOUTToReport: aTransferOUT

	report add: 'Salida por transferencia de ', aTransferOUT transfer value printString !

!methodRemoval: PortfolioSummary #addTransferINToReport: stamp: 'aa 6/1/2023 13:53:02'!
addTransferINToReport: aTransferIN

	report add: 'Entrada por transferencia de ', aTransferIN transfer value printString !

!methodRemoval: PortfolioSummary #addDepositToReport: stamp: 'aa 6/1/2023 13:53:05'!
addDepositToReport: aDeposit

	report add: 'Depósito por ', aDeposit value printString !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 13:58:56' prior: 50613404!
addAccountToReport: anAccount withIndentation: anIndentation
	
	| summaryForAccount |
	
	report add: anIndentation, anAccount name
	! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:02:27' prior: 50613233 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	report add: aPortfolio balance .
	^report ! !
!PortfolioResumee methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:02:31' prior: 50613457 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	^report ! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:02:36' prior: 50613390 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	
	report add: aPortfolio balance .
	^report ! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:02:38' prior: 50613474 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	report add: aPortfolio balance .
	^report ! !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:02:42'!
PASSED!

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:02:42'!
PASSED!
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:05:08' prior: 50613449!
addAccountToReport: anAccount withIndentation: anIndentation
	
	| summaryForAccount |
	
	report add: anIndentation, anAccount name .
	summaryForAccount := AccountSummary for: anAccount .
	summaryForAccount collect: [ :each | anIndentation, each ]
	! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:06:00' prior: 50613557!
addAccountToReport: anAccount withIndentation: anIndentation
	
	| summaryForAccount |
	
	report add: anIndentation, anAccount name .
	summaryForAccount := AccountSummary for: anAccount .
	summaryForAccount collect: [ :each | anIndentation, each ] .
	report addAll: summaryForAccount .! !
!AbstractTransactions methodsFor: 'no messages' stamp: 'aa 6/1/2023 14:25:12'!
addToReport: aMethodObject

	self subclassResponsibility ! !
!AbstractTransactions methodsFor: 'balance' stamp: 'aa 6/1/2023 14:25:37'!
affectBalance: aBalance

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #affectBalance: stamp: 'aa 6/1/2023 14:25:37'!
affectBalance: aBalance

	self subclassResponsibility !

!methodRemoval: AccountTransfer #affectBalance: stamp: 'aa 6/1/2023 14:25:42'!
affectBalance: aBalance

	self subclassResponsibility !

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:25:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:25:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:25:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:25:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 6/1/2023 14:26:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 6/1/2023 14:26:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:03'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:26:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 14:26:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08GivenTwoAccountsWhenMakingATransferenceThenBalancesChanges stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09GivenTwoAccountsWhenMakingATransferThenBothHaveItRegistered stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheTransfer stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test11GivenTwoAccountsWhenMakingATransferThenCanNavigateFromOneEndToTheOther stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test12GivenAnAccountThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test13GivenAnAccountWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test16GivenAPortfolioThenItCanHaveAName stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #PortfolioTest #test17GivenAPortfolioWithNoNameThenCantAskForName stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:26:42'!
PASSED!

!testRun: #ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:26:42'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'aa 6/1/2023 14:28:42'!
transfers
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'transactions' stamp: 'aa 6/1/2023 14:28:48' prior: 50614598!
transfers
	
	| transfers |
	
	transfers := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transfers ].
	
	^transfers ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'aa 6/1/2023 14:29:32'!
addTransfersTo: aCollectionOfTransfers

	aCollectionOfTransfers addAll: transfers ! !
!Portfolio methodsFor: 'transactions' stamp: 'aa 6/1/2023 14:30:04'!
addTransfersTo: aCollectionOfTransfers

	accounts do: [ :anAccount | anAccount addTransfersTo: aCollectionOfTransfers ]! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 14:31:06'!
addTransfersToReport: aMethodObject

	^self transfers do: [ :transfer | transfer addToReport: aMethodObject ] ! !
!Portfolio methodsFor: 'reports' stamp: 'aa 6/1/2023 14:31:21'!
addTransactionsToReport: aMethodObject

	
	^self transactions do: [ :transaction | transaction addToReport: aMethodObject ] .! !

Deposit register: 50 on: accountJulian !

Deposit register: 50 on: accountJulian!

Deposit register: 120 on: accountMaxi!

Deposit register: 130 on: accountMaxi!

Withdraw register: 130 on: accountCoca!

Withdraw register: 200 on: accountCoca!

AccountSummary for: portfolioMaxi !

accountMaxi := ReceptiveAccount named: 'Maximiliano' .!

	accountJulian := ReceptiveAccount named: 'Julian' .!

	accountCoca := ReceptiveAccount named: 'Coca Sarli' .!

	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .!

	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .!

	accountFlor := ReceptiveAccount named: 'Flor' .!

	portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor .!

	portfolioHijos add: portfolioTobiasIlicic !

AccountSummary for: portfolioMaxi !

Withdraw register: 200 on: accountCoca!

AccountSummary for: portfolioMaxi !

self transactions!

accountCoca transfers!
!Portfolio methodsFor: 'transactions' stamp: 'aa 6/1/2023 14:39:28' prior: 50614606!
transfers
	
	| transfers |
	
	transfers := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransfersTo: transfers ].
	
	^transfers ! !

AccountSummary for: portfolioMaxi  !

Withdraw register: 200 on: accountCoca!

Deposit register: 1000 on: accountMaxi !

Withdraw register: 250 on: accountMaxi !

Withdraw register: 50 on: accountJulian !

Withdraw register: 200 on: accountFlor  !

AccountSummary for: portfolioMaxi !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:42:26'!
test12GivenAPortfolioWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	result := OrderedCollection with: 'Depósito por 50' with: 'Extracción por 50' with: 'Salida por transferencia de 80' with: 'Entrada por transferencia de 20' with: 'Balance = -60' .
	self assert: result equals: (AccountSummary for: account1)! !

!methodRemoval: ReportTest #test12GivenAPortfolioWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:42:31'!
test12GivenAPortfolioWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	result := OrderedCollection with: 'Depósito por 50' with: 'Extracción por 50' with: 'Salida por transferencia de 80' with: 'Entrada por transferencia de 20' with: 'Balance = -60' .
	self assert: result equals: (AccountSummary for: account1)!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:42:38'!
test13GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0! !

!methodRemoval: ReportTest #test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:42:38'!
test07GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:42:43'!
test14GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50! !

!methodRemoval: ReportTest #test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:42:43'!
test08GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:42:47'!
test16GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50! !

!methodRemoval: ReportTest #test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:42:47'!
test09GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:42:51'!
test15GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50! !

!methodRemoval: ReportTest #test16GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:42:51'!
test16GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:42:56'!
test16GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: account1) equals: 20! !

!methodRemoval: ReportTest #test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:42:56'!
test10GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: account1) equals: 20!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:43:00'!
test17GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !

!methodRemoval: ReportTest #test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:43:00'!
test11GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:43:07'!
test18GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' with: (ReceptiveAccount named: 'Maximiliano') with: (Portfolio named: 'Hijos') .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !

!methodRemoval: ReportTest #test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:43:07'!
test12GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' with: (ReceptiveAccount named: 'Maximiliano') with: (Portfolio named: 'Hijos') .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' .
	self assert: result equals: (PortfolioResumee for: portfolio)!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:43:16'!
test19GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolioMaxi portfolioHijos accountJulian accountCoca accountMaxi result |
	
	accountMaxi := ReceptiveAccount named: 'Maximiliano' .
	accountJulian := ReceptiveAccount named: 'Julian' .
	accountCoca := ReceptiveAccount named: 'Coca Sarli' .
	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .
	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .
	
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' with: '        Cuenta de Julian' with: '        Cuenta de Coca Sarli' .
	self assert: result equals: (PortfolioResumee for: portfolioMaxi)! !

!methodRemoval: ReportTest #test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:43:16'!
test13GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolioMaxi portfolioHijos accountJulian accountCoca accountMaxi result |
	
	accountMaxi := ReceptiveAccount named: 'Maximiliano' .
	accountJulian := ReceptiveAccount named: 'Julian' .
	accountCoca := ReceptiveAccount named: 'Coca Sarli' .
	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .
	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .
	
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' with: '        Cuenta de Julian' with: '        Cuenta de Coca Sarli' .
	self assert: result equals: (PortfolioResumee for: portfolioMaxi)!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:43:27'!
test12GivenAPortfolioWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	result := OrderedCollection with: 'Depósito por 50' with: 'Extracción por 50' with: 'Salida por transferencia de 80' with: 'Entrada por transferencia de 20' with: 'Balance = -60' .
	self assert: result equals: (AccountSummary for: account1)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:43:37'!
test07GivenAPortfolioWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| account result |
	
	account := ReceptiveAccount new .
	result := OrderedCollection with: 'Balance = 0' .
	self assert: result equals: (AccountSummary for: account)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:43:43'!
test08GivenAPortfolioWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance

	| account result |
	
	account := ReceptiveAccount new .
	Withdraw register: 50 on: account .
	result := OrderedCollection with: 'Extracción por 50' with: 'Balance = -50' .
	self assert: result equals: (AccountSummary for: account)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:43:48'!
test09GivenAPortfolioWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance

	| account result |
	
	account := ReceptiveAccount new .
	Deposit register: 50 on: account .
	result := OrderedCollection with: 'Depósito por 50' with: 'Balance = 50' .
	self assert: result equals: (AccountSummary for: account)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:43:56'!
test10GivenAPortfolioWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	result := OrderedCollection with: 'Salida por transferencia de 50' with: 'Balance = -50' .
	self assert: result equals: (AccountSummary for: account1)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:44:04'!
test11GivenAPortfolioWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance

	| account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	result := OrderedCollection with: 'Entrada por transferencia de 50' with: 'Balance = 50' .
	self assert: result equals: (AccountSummary for: account2)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:44:46' prior: 50615002!
test07GivenAPortfolioWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| portfolio account result |
	
	account := ReceptiveAccount new .
	portfolio := Portfolio with: account .
	result := OrderedCollection with: 'Balance = 0' .
	self assert: result equals: (AccountSummary for: portfolio)! !

!testRun: #ReportTest #test07GivenAPortfolioWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:44:49'!
PASSED!

!testRun: #ReportTest #test08GivenAPortfolioWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:44:51'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:45:06' prior: 50615072!
test07GivenAPortfolioWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance

	| portfolio result |
	
	portfolio := Portfolio new .
	result := OrderedCollection with: 'Balance = 0' .
	self assert: result equals: (AccountSummary for: portfolio)! !

!testRun: #ReportTest #test07GivenAPortfolioWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:45:08'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:45:24' prior: 50615014!
test08GivenAPortfolioWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance

	| portfolio account result |
	
	account := ReceptiveAccount new .
	portfolio := Portfolio with: account .
	Withdraw register: 50 on: account .
	result := OrderedCollection with: 'Extracción por 50' with: 'Balance = -50' .
	self assert: result equals: (AccountSummary for: portfolio)! !

!testRun: #ReportTest #test08GivenAPortfolioWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:45:25'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:45:33' prior: 50615027!
test09GivenAPortfolioWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance

	| portfolio account result |
	
	account := ReceptiveAccount new .
	portfolio := Portfolio with: account .
	Deposit register: 50 on: account .
	result := OrderedCollection with: 'Depósito por 50' with: 'Balance = 50' .
	self assert: result equals: (AccountSummary for: portfolio)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:48:38' prior: 50615040!
test10GivenAPortfolioWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance

	| portfolio account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	portfolio := Portfolio with: account1 .
	Transfer register: 50 from: account1 to: account2 .	
	result := OrderedCollection with: 'Salida por transferencia de 50' with: 'Balance = -50' .
	self assert: result equals: (AccountSummary for: portfolio)! !

!testRun: #ReportTest #test10GivenAPortfolioWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:48:40'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:48:57' prior: 50615056!
test11GivenAPortfolioWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance

	| portfolio account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	portfolio := Portfolio with: account2 .
	Transfer register: 50 from: account1 to: account2 .	
	result := OrderedCollection with: 'Entrada por transferencia de 50' with: 'Balance = 50' .
	self assert: result equals: (AccountSummary for: account2)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:49:03' prior: 50615171!
test11GivenAPortfolioWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance

	| portfolio account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	portfolio := Portfolio with: account2 .
	Transfer register: 50 from: account1 to: account2 .	
	result := OrderedCollection with: 'Entrada por transferencia de 50' with: 'Balance = 50' .
	self assert: result equals: (AccountSummary for: portfolio)! !

!testRun: #ReportTest #test11GivenAPortfolioWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:49:05'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:49:29' prior: 50614979!
test12GivenAPortfolioWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem

	| portfolio account1 account2 result |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	portfolio := Portfolio with: account1 .
	Deposit register: 50 on: account1 .
	Withdraw register: 50 on: account1 .
	Transfer register: 80 from: account1 to: account2 .	
	Transfer register: 20 from: account2 to: account1 .	
	result := OrderedCollection with: 'Depósito por 50' with: 'Extracción por 50' with: 'Salida por transferencia de 80' with: 'Entrada por transferencia de 20' with: 'Balance = -60' .
	self assert: result equals: (AccountSummary for: portfolio)! !

!testRun: #ReportTest #test12GivenAPortfolioWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:49:30'!
PASSED!

!testRun: #ReportTest #test01GivenAnAccountWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test02GivenAnAccountWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test03GivenAnAccountWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test04GivenAnAccountWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test05GivenAnAccountWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test06GivenAnAccountWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test07GivenAPortfolioWithNoTransfersOrTransactionsWhenAskingForAnAccountSummaryThenSummaryReturnsBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test08GivenAPortfolioWithAWithdrawWhenAskingForAnAccountSummaryThenSummaryHasWithdrawAndBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test09GivenAPortfolioWithADepositWhenAskingForAnAccountSummaryThenSummaryHasDepositAndBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test10GivenAPortfolioWithATransferOutWhenAskingForAnAccountSummaryThenSummaryHasTransferOutAndBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test11GivenAPortfolioWithATransferInWhenAskingForAnAccountSummaryThenSummaryHasTransferInAndBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test12GivenAPortfolioWithMultipleTransactionsWhenAskingForAnAccountSummaryThenSummaryHasAllOfThem stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test13GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test14GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test15GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test16GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test17GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test18GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:49:32'!
PASSED!

!testRun: #ReportTest #test19GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:49:32'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:50:34'!
test17GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0! !

!methodRemoval: ReportTest #test13GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:50:34'!
test13GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:50:38'!
test18GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50! !

!methodRemoval: ReportTest #test14GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:50:38'!
test14GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:50:43'!
test19GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50! !

!methodRemoval: ReportTest #test15GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:50:43'!
test15GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:50:49'!
test20GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: account1) equals: 20! !

!methodRemoval: ReportTest #test16GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:50:49'!
test16GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: account1) equals: 20!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:50:58'!
test21GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !

!methodRemoval: ReportTest #test17GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName stamp: 'aa 6/1/2023 14:50:58'!
test17GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioResumeeThenReturnsOnlyThePortfolioName

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:51:04'!
test22GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' with: (ReceptiveAccount named: 'Maximiliano') with: (Portfolio named: 'Hijos') .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !

!methodRemoval: ReportTest #test18GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:51:04'!
test18GivenAPortfolioWithAssetsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' with: (ReceptiveAccount named: 'Maximiliano') with: (Portfolio named: 'Hijos') .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' .
	self assert: result equals: (PortfolioResumee for: portfolio)!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:51:09'!
test23GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolioMaxi portfolioHijos accountJulian accountCoca accountMaxi result |
	
	accountMaxi := ReceptiveAccount named: 'Maximiliano' .
	accountJulian := ReceptiveAccount named: 'Julian' .
	accountCoca := ReceptiveAccount named: 'Coca Sarli' .
	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .
	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .
	
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' with: '        Cuenta de Julian' with: '        Cuenta de Coca Sarli' .
	self assert: result equals: (PortfolioResumee for: portfolioMaxi)! !

!methodRemoval: ReportTest #test19GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly stamp: 'aa 6/1/2023 14:51:09'!
test19GivenAPortfolioWithAssetsInMultipleLevelsWhenAskingForAPortfolioResumeeThenIndentsCorrectly

	| portfolioMaxi portfolioHijos accountJulian accountCoca accountMaxi result |
	
	accountMaxi := ReceptiveAccount named: 'Maximiliano' .
	accountJulian := ReceptiveAccount named: 'Julian' .
	accountCoca := ReceptiveAccount named: 'Coca Sarli' .
	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .
	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .
	
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: '    Cuenta de Maximiliano' with: '    Portfolio de Hijos' with: '        Cuenta de Julian' with: '        Cuenta de Coca Sarli' .
	self assert: result equals: (PortfolioResumee for: portfolioMaxi)!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:51:33'!
test12GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:51:40'!
test17GivenAPortfolioWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0! !

!methodRemoval: ReportTest #test17GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:51:42'!
test17GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:51:45'!
test13GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0! !

!methodRemoval: ReportTest #test12GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:51:49'!
test12GivenAnAccountWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| account |
	
	account := ReceptiveAccount new .
	self assert: (TransferNet for: account) equals: 0!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:52:08'!
test14GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:52:13'!
test14GivenAPortfolioWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:52:24'!
test18GivenAPortfolioWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50! !

!methodRemoval: ReportTest #test14GivenAPortfolioWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:52:25'!
test14GivenAPortfolioWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50!

!methodRemoval: ReportTest #test18GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:52:28'!
test18GivenAnAccountWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account1) equals: -50!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:52:48'!
test19GivenAPortfolioWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:52:56'!
test15GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50! !

!methodRemoval: ReportTest #test19GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:53:00'!
test19GivenAnAccountWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: account2) equals: 50!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:53:10'!
test16GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: account1) equals: 20! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:53:19'!
test20GivenAPortfolioWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: account1) equals: 20! !

!methodRemoval: ReportTest #test20GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:53:19'!
test20GivenAnAccountWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: account1) equals: 20!

----SNAPSHOT----(1 June 2023 14:53:20) CuisUniversity-5706.image priorSource: 8984280!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:54:04' prior: 50615565!
test17GivenAPortfolioWithNoTransfersWhenAskingForATransferNetThenReturnsZero

	| portfolio account |
	
	account := ReceptiveAccount new .
	portfolio := Portfolio with: account .
	self assert: (TransferNet for: portfolio) equals: 0! !

!testRun: #ReportTest #test17GivenAPortfolioWithNoTransfersWhenAskingForATransferNetThenReturnsZero stamp: 'aa 6/1/2023 14:54:11'!
PASSED!

!testRun: #ReportTest #test18GivenAPortfolioWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:54:12'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:54:33' prior: 50615625!
test18GivenAPortfolioWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| portfolio account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	portfolio := Portfolio with: account1 .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: portfolio) equals: -50! !

!testRun: #ReportTest #test18GivenAPortfolioWithATransferOutWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:54:35'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:54:49' prior: 50615666!
test19GivenAPortfolioWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance

	| portfolio account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	portfolio := Portfolio with: account2 .
	Transfer register: 50 from: account1 to: account2 .	
	self assert: (TransferNet for: portfolio) equals: 50! !

!testRun: #ReportTest #test19GivenAPortfolioWithATransferInWhenAskingForAnTransferNetThenReturnsThatTransferOutBalance stamp: 'aa 6/1/2023 14:54:50'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:55:07' prior: 50615719!
test20GivenAPortfolioWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances

	| portfolio account1 account2 |
	
	account1 := ReceptiveAccount new .
	account2 := ReceptiveAccount new .
	portfolio := Portfolio with: account1 .
	Transfer register: 50 from: account1 to: account2 .	
	Transfer register: 70 from: account2 to: account1 .	
	self assert: (TransferNet for: portfolio) equals: 20! !

!testRun: #ReportTest #test20GivenAPortfolioWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:55:08'!
PASSED!

!testRun: #ReportTest #test20GivenAPortfolioWithMultipleTransfersWhenAskingForAnTransferNetThenReturnsTheSumOfTransferBalances stamp: 'aa 6/1/2023 14:55:09'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:58:03'!
test21GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:58:11'!
test24GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)! !

!methodRemoval: ReportTest #test21GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance stamp: 'aa 6/1/2023 14:58:11'!
test21GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' .
	self assert: result equals: (PortfolioResumee for: portfolio)!

!testRun: #ReportTest #test24GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance stamp: 'aa 6/1/2023 14:58:51'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:59:13' prior: 50615850!
test24GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance

	| portfolio result |
	
	portfolio := Portfolio named: 'Maximiliano' .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: 'Balance = 0' .
	self assert: result equals: (PortfolioSummary for: portfolio)! !

!testRun: #ReportTest #test24GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance stamp: 'aa 6/1/2023 14:59:15'!
FAILURE!

!testRun: #ReportTest #test24GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance stamp: 'aa 6/1/2023 14:59:15'!
FAILURE!
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 14:59:43' prior: 50613484 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	report add: 'Balance = ', aPortfolio balance printString .
	^report ! !

!testRun: #ReportTest #test24GivenAPortfolioWithNoAssetsWhenAskingForAPortfolioSummaryThenReturnsOnlyThePortfolioNameAndBalance stamp: 'aa 6/1/2023 14:59:46'!
PASSED!

AccountSummary for: portfolioMaxi !

PortfolioSummary for: portfolioMaxi !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:07:47' prior: 50613568!
addAccountToReport: anAccount withIndentation: anIndentation
	
	| summaryForAccount |
	
	report add: anIndentation, anAccount name .
	summaryForAccount := AccountSummary for: anAccount .
	summaryForAccount := summaryForAccount collect: [ :each | anIndentation, each ] .
	report addAll: summaryForAccount .! !

PortfolioSummary for: portfolioMaxi  !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:09:44' prior: 50615925!
addAccountToReport: anAccount withIndentation: anIndentation
	
	| summaryForAccount |
	
	report add: anIndentation, anAccount name .
	summaryForAccount := AccountSummary for: anAccount .
	summaryForAccount := summaryForAccount collect: [ :each | anIndentation, '    ', each ] .
	report addAll: summaryForAccount .! !

PortfolioSummary for: portfolioMaxi!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:13:07'!
test25GivenAPortfolioWithAssetsButNoTransactionsWhenAskingForAPortfolioSummaryThenReturnsThePortfolioNameTheAccountNameAndBothBalances

	| portfolio account result |
	
	account := ReceptiveAccount named: 'Francisco' .
	portfolio := Portfolio named: 'Maximiliano' with: account .
	result := OrderedCollection with: 'Portfolio de Maximiliano' with: 'Balance = 0' .
	self assert: result equals: (PortfolioSummary for: portfolio)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:14:57' prior: 50615953!
test25GivenAPortfolioWithAssetsButNoTransactionsWhenAskingForAPortfolioSummaryThenReturnsThePortfolioNameTheAccountNameAndBothBalances

	| portfolio account result |
	
	account := ReceptiveAccount named: 'Francisco' .
	portfolio := Portfolio named: 'More' with: account .
	result := OrderedCollection with: 'Portfolio de More' with: 'Cuenta de Francisco' with: 'Balance = 0' with: 'Balance = 0' .
	self assert: result equals: (PortfolioSummary for: portfolio)! !

!testRun: #ReportTest #test25GivenAPortfolioWithAssetsButNoTransactionsWhenAskingForAPortfolioSummaryThenReturnsThePortfolioNameTheAccountNameAndBothBalances stamp: 'aa 6/1/2023 15:14:59'!
FAILURE!

!testRun: #ReportTest #test25GivenAPortfolioWithAssetsButNoTransactionsWhenAskingForAPortfolioSummaryThenReturnsThePortfolioNameTheAccountNameAndBothBalances stamp: 'aa 6/1/2023 15:14:59'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:15:12' prior: 50615970!
test25GivenAPortfolioWithAssetsButNoTransactionsWhenAskingForAPortfolioSummaryThenReturnsThePortfolioNameTheAccountNameAndBothBalances

	| portfolio account result |
	
	account := ReceptiveAccount named: 'Francisco' .
	portfolio := Portfolio named: 'More' with: account .
	result := OrderedCollection with: 'Portfolio de More' with: '    Cuenta de Francisco' with: '        Balance = 0' with: 'Balance = 0' .
	self assert: result equals: (PortfolioSummary for: portfolio)! !

!testRun: #ReportTest #test25GivenAPortfolioWithAssetsButNoTransactionsWhenAskingForAPortfolioSummaryThenReturnsThePortfolioNameTheAccountNameAndBothBalances stamp: 'aa 6/1/2023 15:15:14'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:15:48'!
test26GivenAPortfolioWithAssetsAndTransactionsWhenAskingForAPortfolioSummaryThenReturnsDataWithCorrectIndentation

	| portfolio account result |
	
	account := ReceptiveAccount named: 'Francisco' .
	portfolio := Portfolio named: 'More' with: account .
	result := OrderedCollection with: 'Portfolio de More' with: '    Cuenta de Francisco' with: '        Balance = 0' with: 'Balance = 0' .
	self assert: result equals: (PortfolioSummary for: portfolio)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:19:14' prior: 50616024!
test26GivenAPortfolioWithAssetsAndTransactionsWhenAskingForAPortfolioSummaryThenReturnsDataWithCorrectIndentation

	| accountMaxi accountJulian accountCoca portfolioHijos portfolioMaxi accountFlor portfolioTobias result |
	
	accountMaxi := ReceptiveAccount named: 'Maximiliano' .
	accountJulian := ReceptiveAccount named: 'Julian' .
	accountCoca := ReceptiveAccount named: 'Coca Sarli' .
	accountFlor := ReceptiveAccount named: 'Flor' .
	
	portfolioTobias := Portfolio named: 'Tobias' with: accountFlor .
	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .
	portfolioHijos add: portfolioTobias .
	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .
	
	result := OrderedCollection with: 'Portfolio de More' with: '    Cuenta de Francisco' with: '        Balance = 0' with: 'Balance = 0' .
	self assert: result equals: (PortfolioSummary for: portfolioMaxi)! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:23:58' prior: 50616042!
test26GivenAPortfolioWithAssetsAndTransactionsWhenAskingForAPortfolioSummaryThenReturnsDataWithCorrectIndentation

	| accountMaxi accountJulian accountCoca portfolioHijos portfolioMaxi accountFlor portfolioTobias result |
	
	accountMaxi := ReceptiveAccount named: 'Maximiliano' .
	accountJulian := ReceptiveAccount named: 'Julian' .
	accountCoca := ReceptiveAccount named: 'Coca Sarli' .
	accountFlor := ReceptiveAccount named: 'Flor' .
	
	portfolioTobias := Portfolio named: 'Tobias' with: accountFlor .
	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .
	portfolioHijos add: portfolioTobias .
	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .
	
	Deposit register: 1000 on: accountMaxi .
	Withdraw register: 250 on: accountMaxi .
	Withdraw register: 50 on: accountJulian .
	Withdraw register: 200 on: accountCoca .
	Withdraw register: 200 on: accountCoca .
	Withdraw register: 200 on: accountFlor .
	
	result := OrderedCollection new .
	result add: 'Portfolio de Maximiliano' .
	result add: '    Cuenta de Maximiliano' .
	result add: '        Depósito por 1000' .
	result add: '        Extracción por 250' .
	result add: '        Balance = 750' .
	result add: '    Portfolio de Hijos' .
	result add: '        Cuenta de Julian' .
	result add: '            Extracción por 50' .
	result add: '            Balance = -50' .
	result add: '        Cuenta de Coca Sarli' .
	result add: '            Extracción por 200' .
	result add: '            Extracción por 200' .
	result add: '            Balance = -400' .
	result add: '        Portfolio de Tobias' .
	result add: '            Cuenta de Flor' .
	result add: '                Extracción por 200' .
	result add: '                Balance = -200' .
	result add: 'Balance = 100' .
	self assert: result equals: (PortfolioSummary for: portfolioMaxi)
	
"
'Portfolio de Maximiliano' 
'    Cuenta de Maximiliano' 
'        Depósito por 1000' 
'        Extracción por 250' 
'        Balance = 750' 
'    Portfolio de Hijos' 
'        Cuenta de Julian' 
'            Extracción por 50' 
'            Balance = -50' 
'        Cuenta de Coca Sarli' 
'            Extracción por 200' 
'            Extracción por 200' 
'            Balance = -400' 
'        Portfolio de Tobias Ilicic' 
'            Cuenta de Flor' 
'                Extracción por 200' 
'                Balance = -200' 
'Balance = 100' 
"
! !

!testRun: #ReportTest #test26GivenAPortfolioWithAssetsAndTransactionsWhenAskingForAPortfolioSummaryThenReturnsDataWithCorrectIndentation stamp: 'aa 6/1/2023 15:24:01'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:24:34' prior: 50616074!
test26GivenAPortfolioWithAssetsAndTransactionsWhenAskingForAPortfolioSummaryThenReturnsDataWithCorrectIndentation

	| accountMaxi accountJulian accountCoca portfolioHijos portfolioMaxi accountFlor portfolioTobias result |
	
	accountMaxi := ReceptiveAccount named: 'Maximiliano' .
	accountJulian := ReceptiveAccount named: 'Julian' .
	accountCoca := ReceptiveAccount named: 'Coca Sarli' .
	accountFlor := ReceptiveAccount named: 'Flor' .
	
	portfolioTobias := Portfolio named: 'Tobias' with: accountFlor .
	portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .
	portfolioHijos add: portfolioTobias .
	portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .
	
	Deposit register: 1000 on: accountMaxi .
	Withdraw register: 250 on: accountMaxi .
	Withdraw register: 50 on: accountJulian .
	Withdraw register: 200 on: accountCoca .
	Withdraw register: 200 on: accountCoca .
	Withdraw register: 200 on: accountFlor .
	
	result := OrderedCollection new .
	result add: 'Portfolio de Maximiliano' .
	result add: '    Cuenta de Maximiliano' .
	result add: '        Depósito por 1000' .
	result add: '        Extracción por 250' .
	result add: '        Balance = 750' .
	result add: '    Portfolio de Hijos' .
	result add: '        Cuenta de Julian' .
	result add: '            Extracción por 50' .
	result add: '            Balance = -50' .
	result add: '        Cuenta de Coca Sarli' .
	result add: '            Extracción por 200' .
	result add: '            Extracción por 200' .
	result add: '            Balance = -400' .
	result add: '        Portfolio de Tobias' .
	result add: '            Cuenta de Flor' .
	result add: '                Extracción por 200' .
	result add: '                Balance = -200' .
	result add: 'Balance = 100' .
	self assert: result equals: (PortfolioSummary for: portfolioMaxi)
	
! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:25:44' prior: 50615908 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	report add: 'Balance = ', aPortfolio balance printString .
	^report 
	
	
	
	"cuando se nos ocurrio como hacer para que cada portfolio tenga su balance al final ya nos quedaba poco tiempo y pocas neuronas asi que quedó así"! !
!PortfolioSummary methodsFor: 'as yet unclassified' stamp: 'aa 6/1/2023 15:26:25' prior: 50616222 overrides: 50610600!
operationOnAsset: aPortfolio

	report := OrderedCollection new .
	aPortfolio addAssetToReport: self withIndentation: ''.
	report add: 'Balance = ', aPortfolio balance printString .
	^report 
	
	"cuando se nos ocurrio como hacer para que cada portfolio tenga su balance al final ya nos quedaba poco tiempo y pocas neuronas asi que quedó así"! !

----SNAPSHOT----(1 June 2023 15:26:31) CuisUniversity-5706.image priorSource: 9091163!
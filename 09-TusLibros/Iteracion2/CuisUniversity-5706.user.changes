

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (10 June 2023 17:02:29) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej9\Iteracion 2\CuisUniversity-5706.image!


----End fileIn of C:\Users\Santiago\Downloads\TusLibros.st----!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:13:40' prior: 50604075!
test01CheckingOutWithAnEmptyCartThrowsError

	| cart creditCard |
	
	creditCard := #ValidCard .
	cart := self createCart .
	self 
		should: [ Cashier with: cart card: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:13:49' prior: 50604088!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard |
	
	creditCard := #ValidCard .
	cart := self createCart .
	cart add: 'validBook'.
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:14:31' prior: 50604098!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard |
	
	creditCard := #ValidCard.
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:14:33' prior: 50604246!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard |
	
	creditCard := #ValidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 17:17:32'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartThrowsError stamp: 'aa 6/10/2023 17:17:32'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/10/2023 17:17:32'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 17:17:32'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:17:48'!
test03CheckingOutWithInvalidCardFails

	| cart creditCard |
	
	creditCard := #ValidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:17:54' prior: 50604283!
test03CheckingOutWithInvalidCardFails

	| cart creditCard |
	
	creditCard := #InvalidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:18:07'!
test04CheckingOutWithInvalidCardFails

	| cart creditCard |
	
	creditCard := #InvalidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !

!methodRemoval: CashierTest #test03CheckingOutWithInvalidCardFails stamp: 'aa 6/10/2023 17:18:09'!
test03CheckingOutWithInvalidCardFails

	| cart creditCard |
	
	creditCard := #InvalidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
!

!testRun: #CashierTest #test04CheckingOutWithInvalidCardFails stamp: 'aa 6/10/2023 17:18:19'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:19:49'!
test04CheckingOutWithExpiredCardFails

	| cart creditCard |
	
	creditCard := #InvalidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !

!methodRemoval: CashierTest #test04CheckingOutWithInvalidCardFails stamp: 'aa 6/10/2023 17:19:50'!
test04CheckingOutWithInvalidCardFails

	| cart creditCard |
	
	creditCard := #InvalidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:20:38' prior: 50604334!
test04CheckingOutWithExpiredCardFails

	| cart creditCard |
	
	creditCard := #InvalidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('La tarjeta está vencida')
! !

!testRun: #CashierTest #test04CheckingOutWithExpiredCardFails stamp: 'aa 6/10/2023 17:20:40'!
FAILURE!
!Cashier methodsFor: 'asserts' stamp: 'aa 6/10/2023 17:22:30'!
assertCartIsNotEmpty: aCart

	aCart isEmpty ifTrue: [ ^self error: Cashier cartIsEmptyErrorMessage ] .! !
!Cashier methodsFor: 'checkout' stamp: 'aa 6/10/2023 17:23:31'!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook
	
	self assertCartIsNotEmpty: aCart .
	self assertCardIsNotExpired: aCreditCard on: aDate .
	^'Compra exitosa'! !

1@2 first!

(1@2) first!

(1@2) x!

(1@2) y!
!Cashier methodsFor: 'asserts' stamp: 'aa 6/10/2023 17:26:04'!
assertCardIsNotExpired: aCreditCard on: aDate

	(aDate x) < aDate! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:27:00' prior: 50604358!
test04CheckingOutWithExpiredCardFails

	| cart creditCard salesBook |
	
	creditCard := #InvalidCard .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: Time now register: salesBook ) equals: ('La tarjeta está vencida')
! !
!Cashier class methodsFor: 'instance creation' stamp: 'aa 6/10/2023 17:27:44'!
with: aCart card: aCreditCard time: aDate register: aSalesBook

	^self new checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:41:13' prior: 50604395!
test04CheckingOutWithExpiredCardFails

	| cart creditCard creditCardExpireDate salesBook |
	
	creditCardExpireDate := Time yearNumber: 3000 monthNumber: 1 dayNumber: 1 .
	creditCard := Dictionary new .
	creditCard add: #Date-> creditCardExpireDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSellByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: Time now register: salesBook ) equals: ('La tarjeta está vencida')
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:21' prior: 50604236!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard |
	
	creditCard := #ValidCard .
	cart := self createCart .
	cart add: self itemSellByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !
!CartTest methodsFor: 'support' stamp: 'aa 6/10/2023 17:43:52'!
itemSelledByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52'!
itemSelledByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50604258!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard |
	
	creditCard := #ValidCard .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50604065!
defaultCatalog
	
	^ Array with: self itemSelledByTheStore with: self anotherItemSelledByTheStore! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50604017!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSelledByTheStore.
	self assert: (cart occurrencesOf: self itemSelledByTheStore) = 2! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50604438!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard |
	
	creditCard := #ValidCard .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')
! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50604031!
defaultCatalog
	
	^ Array with: self itemSelledByTheStore! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50604010!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSelledByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50603968!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSelledByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50603976!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSelledByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50604418!
test04CheckingOutWithExpiredCardFails

	| cart creditCard creditCardExpireDate salesBook |
	
	creditCardExpireDate := Time yearNumber: 3000 monthNumber: 1 dayNumber: 1 .
	creditCard := Dictionary new .
	creditCard add: #Date-> creditCardExpireDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: Time now register: salesBook ) equals: ('La tarjeta está vencida')
! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:43:52' prior: 50604002!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSelledByTheStore.
	self assert: (cart includes: self itemSelledByTheStore)! !

!methodRemoval: CartTest #itemSellByTheStore stamp: 'aa 6/10/2023 17:43:52'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'aa 6/10/2023 17:43:52'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'aa 6/10/2023 17:43:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/10/2023 17:43:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'aa 6/10/2023 17:43:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'aa 6/10/2023 17:43:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'aa 6/10/2023 17:43:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'aa 6/10/2023 17:43:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'aa 6/10/2023 17:43:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'aa 6/10/2023 17:43:55'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartThrowsError stamp: 'aa 6/10/2023 17:43:56'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/10/2023 17:43:56'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 17:43:56'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardFails stamp: 'aa 6/10/2023 17:43:56'!
ERROR!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardFails stamp: 'aa 6/10/2023 17:43:56'!
ERROR!

Time now!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:51:16'!
validCardDate

	^DateAndTime year: 3000 month: 1 day: 1 hour: 0 minute: 0 second: 0
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:51:24'!
invalidCardDate

	^DateAndTime year: 2000 month: 1 day: 1 hour: 0 minute: 0 second: 0
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 17:54:36' prior: 50604531!
test04CheckingOutWithExpiredCardFails

	| cart creditCard salesBook |
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: Time now register: salesBook ) equals: ('La tarjeta está vencida')
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 18:04:55' prior: 50604621!
test04CheckingOutWithExpiredCardFails

	| cart creditCard salesBook |
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: Time now register: salesBook ) equals: ('La tarjeta está vencida') .


	self 
		should: [ Cashier with: cart card: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !
!Cashier class methodsFor: 'error' stamp: 'aa 6/10/2023 18:05:14'!
creditCardIsExpiredErrorMessage

	^'La tarjeta está vencida'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 18:05:44' prior: 50604636!
test04CheckingOutWithExpiredCardFails

	| cart creditCard salesBook |
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self invalidCardDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	self 
		should: [ ( Cashier with: cart card: creditCard time: Time now register: salesBook ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !
!Cashier methodsFor: 'asserts' stamp: 'aa 6/10/2023 18:06:18' prior: 50604389!
assertCardIsNotExpired: aCreditCard on: aDate

	^aCreditCard at: #Date < aDate! !
!Cashier methodsFor: 'asserts' stamp: 'aa 6/10/2023 18:07:03' prior: 50604681!
assertCardIsNotExpired: aCreditCard on: aDate

	(aCreditCard at: #Date < aDate) ifTrue: [ ^self error: Cashier creditCardIsExpiredErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 18:07:46' prior: 50604662!
test04CheckingOutWithExpiredCardFails

	| cart creditCard salesBook |
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self invalidCardDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !

----SNAPSHOT----(10 June 2023 18:09:41) CuisUniversity-5706.image priorSource: 8713034!

aCreditCard at: #Date!

aDate!
!Cashier methodsFor: 'asserts' stamp: 'aa 6/10/2023 18:10:41' prior: 50604687!
assertCardIsNotExpired: aCreditCard on: aDate

	(aCreditCard at: #Date) < aDate ifTrue: [ ^self error: Cashier creditCardIsExpiredErrorMessage ]! !

aCreditCard!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardFails stamp: 'aa 6/10/2023 18:11:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 18:13:00' prior: 50604457!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard ) equals: ('Compra exitosa')

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 18:13:24' prior: 50604730!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) equals: ('Compra exitosa')

! !

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 18:13:27'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartThrowsError stamp: 'aa 6/10/2023 18:13:27'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/10/2023 18:13:27'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 18:13:27'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardFails stamp: 'aa 6/10/2023 18:13:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 18:13:35' prior: 50604486!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) equals: ('Compra exitosa')! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 18:14:07' prior: 50604222!
test01CheckingOutWithAnEmptyCartThrowsError

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	self 
		should: [ Cashier with: cart card: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 18:14:15' prior: 50604795!
test01CheckingOutWithAnEmptyCartThrowsError

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	self 
		should: [ Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]! !

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartThrowsError stamp: 'aa 6/10/2023 18:14:16'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartThrowsError stamp: 'aa 6/10/2023 18:14:16'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/10/2023 18:14:16'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 18:14:16'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardFails stamp: 'aa 6/10/2023 18:14:16'!
PASSED!

!methodRemoval: Cashier #checkout:withCard: stamp: 'aa 6/10/2023 19:14:03'!
checkout: aCart withCard: aCreditCard 
	
	aCart isEmpty ifTrue: [ ^self error: Cashier cartIsEmptyErrorMessage ] .
	^'Compra exitosa'!

!methodRemoval: Cashier class #with:card: stamp: 'aa 6/10/2023 19:14:04'!
with: aCart card: aCreditCard

	^self new checkout: aCart withCard: aCreditCard !

TestCase subclass: #MerchanProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchanProcessorTest category: 'TusLibros' stamp: 'aa 6/10/2023 19:37:20'!
TestCase subclass: #MerchanProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchanProcessorTest methodsFor: 'no messages' stamp: 'aa 6/10/2023 19:38:14'!
test01ProcessingAPurchaseWithAStolenCardRaisesError! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:38:23'!
test01CheckingOutWithAnEmptyCartRaisesError

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	self 
		should: [ Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]! !

!methodRemoval: CashierTest #test01CheckingOutWithAnEmptyCartThrowsError stamp: 'aa 6/10/2023 19:38:23'!
test01CheckingOutWithAnEmptyCartThrowsError

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	self 
		should: [ Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:38:28'!
test04CheckingOutWithExpiredCardRaisesError

	| cart creditCard salesBook |
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self invalidCardDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !

!methodRemoval: CashierTest #test04CheckingOutWithExpiredCardFails stamp: 'aa 6/10/2023 19:38:28'!
test04CheckingOutWithExpiredCardFails

	| cart creditCard salesBook |
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self invalidCardDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]!
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:39:32' prior: 50604869!
test01ProcessingAPurchaseWithAStolenCardRaisesError

	| merchantProcessor cashier cart creditCard |
	
	! !
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:42:30' prior: 50604948!
test01ProcessingAPurchaseWithAStolenCardRaisesError

	| merchantProcessor cashier cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .! !
!CartTest methodsFor: 'support' stamp: 'aa 6/10/2023 19:42:54'!
anotherItemSelledByTheStore

	^'anotherValidBook'! !

!methodRemoval: CashierTest #anotherItemSelledByTheStore stamp: 'aa 6/10/2023 19:43:16'!
anotherItemSelledByTheStore

	^'anotherValidBook'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:43:28' prior: 50604470!
defaultCatalog
	
	^ Array with: self itemSelledByTheStore with: CartTest anotherItemSelledByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:43:39' prior: 50604746!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: CartTest anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) equals: ('Compra exitosa')

! !
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:43:53' prior: 50604955!
test01ProcessingAPurchaseWithAStolenCardRaisesError

	| merchantProcessor cashier cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: CartTest anotherItemSelledByTheStore .! !

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/10/2023 19:44:09'!
ERROR!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/10/2023 19:44:09'!
ERROR!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 19:44:09'!
ERROR!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/10/2023 19:44:09'!
ERROR!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/10/2023 19:44:20'!
ERROR!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/10/2023 19:44:20'!
ERROR!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/10/2023 19:44:44'!
ERROR!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/10/2023 19:44:44'!
ERROR!

!methodRemoval: CartTest #anotherItemSelledByTheStore stamp: 'aa 6/10/2023 19:45:08'!
anotherItemSelledByTheStore

	^'anotherValidBook'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:45:12' prior: 50604978!
defaultCatalog
	
	^ Array with: self itemSelledByTheStore with: self anotherItemSelledByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:45:15' prior: 50604985!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) equals: ('Compra exitosa')

! !
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:45:17' prior: 50605002!
test01ProcessingAPurchaseWithAStolenCardRaisesError

	| merchantProcessor cashier cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:45:28'!
anotherItemSelledByTheStore

	^'anotherValidBook'! !

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/10/2023 19:45:29'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/10/2023 19:45:31'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/10/2023 19:45:31'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 19:45:31'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/10/2023 19:45:31'!
PASSED!
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:45:38'!
anotherItemSelledByTheStore

	^'anotherValidBook'! !
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:45:44'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/10/2023 19:45:50'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/10/2023 19:45:50'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/10/2023 19:45:50'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/10/2023 19:45:50'!
PASSED!
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:46:06'!
defaultCatalog
	
	^ Array with: self itemSelledByTheStore with: self anotherItemSelledByTheStore! !
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:46:11'!
invalidCardDate

	^DateAndTime year: 2000 month: 1 day: 1 hour: 0 minute: 0 second: 0
! !
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:46:15'!
itemSelledByTheStore
	
	^ 'validBook'! !
!MerchanProcessorTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 19:46:19'!
validCardDate

	^DateAndTime year: 3000 month: 1 day: 1 hour: 0 minute: 0 second: 0
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:21:18'!
test05CheckingOutWithStolenCardRaisesError

	| merchantProcessor cashier cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:21:24' prior: 50605154!
test05CheckingOutWithStolenCardRaisesError

	| cashier cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:21:36' prior: 50605168!
test05CheckingOutWithStolenCardRaisesError

	| cashier cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:21:40' prior: 50605182!
test05CheckingOutWithStolenCardRaisesError

	| cart creditCard salesBook |
	
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]
	! !

Object subclass: #ObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ObjectFactory category: 'TusLibros' stamp: 'aa 6/10/2023 20:30:54'!
Object subclass: #ObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ObjectFactory methodsFor: 'no messages' stamp: 'aa 6/10/2023 20:31:08'!
anotherItemSelledByTheStore

	^'anotherValidBook'! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:31:20'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:31:26'!
defaultCatalog
	
	^ Array with: self itemSelledByTheStore with: self anotherItemSelledByTheStore! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:31:32'!
invalidCardDate

	^DateAndTime year: 2000 month: 1 day: 1 hour: 0 minute: 0 second: 0
! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:31:40'!
itemSelledByTheStore
	
	^ 'validBook'! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/10/2023 20:31:52'!
validCardDate

	^DateAndTime year: 3000 month: 1 day: 1 hour: 0 minute: 0 second: 0
! !
!Cashier methodsFor: 'checkout' stamp: 'aa 6/11/2023 12:44:27' prior: 50604379!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook
	
	
	^'Compra exitosa'! !
!Cashier class methodsFor: 'instance creation' stamp: 'aa 6/11/2023 12:45:04' prior: 50604410!
with: aCart card: aCreditCard time: aDate register: aSalesBook

	self assertCartIsNotEmpty: aCart .
	self assertCardIsNotExpired: aCreditCard on: aDate .

	^self new checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook! !
!Cashier class methodsFor: 'assert' stamp: 'aa 6/11/2023 12:45:24'!
assertCartIsNotEmpty: aCart

	aCart isEmpty ifTrue: [ ^self error: Cashier cartIsEmptyErrorMessage ] .! !
!Cashier class methodsFor: 'assert' stamp: 'aa 6/11/2023 12:45:39'!
assertCardIsNotExpired: aCreditCard on: aDate

	(aCreditCard at: #Date) < aDate ifTrue: [ ^self error: Cashier creditCardIsExpiredErrorMessage ]! !

!methodRemoval: Cashier #assertCartIsNotEmpty: stamp: 'aa 6/11/2023 12:46:37'!
assertCartIsNotEmpty: aCart

	aCart isEmpty ifTrue: [ ^self error: Cashier cartIsEmptyErrorMessage ] .!
!Cashier class methodsFor: 'instance creation' stamp: 'aa 6/11/2023 12:46:44' prior: 50605270!
with: aCart card: aCreditCard time: aDate register: aSalesBook

	^self new checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook! !

!methodRemoval: Cashier #assertCardIsNotExpired:on: stamp: 'aa 6/11/2023 12:46:47'!
assertCardIsNotExpired: aCreditCard on: aDate

	(aCreditCard at: #Date) < aDate ifTrue: [ ^self error: Cashier creditCardIsExpiredErrorMessage ]!
!Cashier methodsFor: 'checkout' stamp: 'aa 6/11/2023 12:48:06' prior: 50605264!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook
	
	aSalesBook .
	
	^'Compra exitosa'! !

#a -> 1!

key := #a!

#a -> 1!

#a -> 1!

(#a -> 1) key!

(#a -> 1) value!
!Cart methodsFor: 'queries' stamp: 'aa 6/11/2023 12:53:57'!
addItemsToSalesBook: aSalesBook

	! !
!Cart methodsFor: 'queries' stamp: 'aa 6/11/2023 12:55:20' prior: 50605323!
addItemsToSalesBook: aSalesBook

	items do: [ :each | aSalesBook add: (each->(self occurrencesOf: each)) ]! !
!Cart methodsFor: 'queries' stamp: 'aa 6/11/2023 12:57:17' prior: 50605327!
addItemsToSalesBook: aSalesBook

	items do: [ :each | 
		| ocurrences |
		ocurrences := 		self occurrencesOf: each .
		ocurrences > 0 ifTrue: [ aSalesBook add: (each->ocurrences) ] .
		]! !
!Cashier methodsFor: 'checkout' stamp: 'aa 6/11/2023 12:58:01' prior: 50605315!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook
	
	aCart addItemsToSalesBook: aSalesBook .
	
	^'Compra exitosa'! !

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'aa 6/11/2023 12:58:35'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'aa 6/11/2023 13:03:31' prior: 50605342!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook
	
	aCart addItemsToSalesBook: aSalesBook .
	^'Compra exitosa'! !
!Cashier class methodsFor: 'instance creation' stamp: 'aa 6/11/2023 13:03:59'!
with: aCart card: aCreditCard time: aDate register: aSalesBook through: aMerchantProcessor

	^self new checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook through: aMerchantProcessor! !
!Cashier methodsFor: 'checkout' stamp: 'aa 6/11/2023 13:04:05'!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook through: aMerchantProcessor
	
	aCart addItemsToSalesBook: aSalesBook .
	^'Compra exitosa'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:04:41' prior: 50604874!
test01CheckingOutWithAnEmptyCartRaisesError

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	self 
		should: [ Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:04:53' prior: 50604780!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook ) equals: ('Compra exitosa')! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:05:08' prior: 50605386!
test01CheckingOutWithAnEmptyCartRaisesError

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	self 
		should: [ Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:05:19' prior: 50605406!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa')! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:05:33' prior: 50605054!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa')

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:05:51' prior: 50604909!
test04CheckingOutWithExpiredCardRaisesError

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	creditCard := Dictionary new .
	creditCard add: #Date-> self invalidCardDate .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:06:07' prior: 50605202!
test05CheckingOutWithStolenCardRaisesError

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]
	! !

!methodRemoval: Cashier class #with:card:time:register: stamp: 'aa 6/11/2023 13:06:10'!
with: aCart card: aCreditCard time: aDate register: aSalesBook

	^self new checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook!

!methodRemoval: Cashier #checkout:withCard:time:register: stamp: 'aa 6/11/2023 13:06:14'!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook
	
	aCart addItemsToSalesBook: aSalesBook .
	^'Compra exitosa'!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:14:27' prior: 50605242!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new . 
	catalog add: self itemSelledByTheStore -> 5 .
	catalog add: self anotherItemSelledByTheStore -> 7 .
	^catalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'aa 6/11/2023 13:14:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:14:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'aa 6/11/2023 13:14:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'aa 6/11/2023 13:14:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'aa 6/11/2023 13:14:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'aa 6/11/2023 13:14:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'aa 6/11/2023 13:14:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'aa 6/11/2023 13:14:31'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:14:33'!
FAILURE!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:14:33'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:14:33'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 13:14:33'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:14:33'!
FAILURE!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:14:42'!
FAILURE!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:14:42'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'aa 6/11/2023 13:16:30' prior: 50605368!
with: aCart card: aCreditCard time: aDate register: aSalesBook through: aMerchantProcessor

	self assertCartIsNotEmpty: aCart .
	self assertCardIsNotExpired: aCreditCard on: aDate .
	^self new checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook through: aMerchantProcessor! !

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:16:32'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:16:32'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:16:32'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 13:16:32'!
PASSED!

!testRun: #CashierTest #test05CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:16:32'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:16:32'!
FAILURE!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:16:37'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:16:38'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:16:39'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 13:16:40'!
PASSED!

!testRun: #CashierTest #test05CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:16:41'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:16:41'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:17:24' prior: 50605504!
test05CheckingOutWithStolenCardRaisesError

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ]
	! !
!MerchantProcessor class methodsFor: 'no messages' stamp: 'aa 6/11/2023 13:17:46'!
creditCardHasNotEnoughCreditErrorMessage

	^'La tarjeta no tiene credito suficiente'! !

!classRemoval: #MerchanProcessorTest stamp: 'aa 6/11/2023 13:17:59'!
TestCase subclass: #MerchanProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Dictionary new add: 1!

Dictionary new add: 1!
!MerchantProcessor methodsFor: 'no messages' stamp: 'aa 6/11/2023 13:21:36'!
debitAmount: anAmount from: aCreditCard

	! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:24:40'!
creditLessCard

	| creditCard |
	creditCard := Dictionary new .
	creditCard add: #Date -> self validCardDate .
	creditCard add: #Credit -> 5 .
	^creditCard! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:25:07'!
stolenCard! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:25:42' prior: 50605701!
stolenCard

	| creditCard |
	creditCard := Dictionary new .
	creditCard add: #Date -> self validCardDate .
	creditCard add: #Credit -> 1000 .
	creditCard add: #Stolen -> true .
	^creditCard! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:25:52' prior: 50605693!
creditLessCard

	| creditCard |
	creditCard := Dictionary new .
	creditCard add: #Date -> self validCardDate .
	creditCard add: #Credit -> 5 .
	creditCard add: #Stolen -> false .
	^creditCard! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:26:09'!
validCard

	| creditCard |
	creditCard := Dictionary new .
	creditCard add: #Date -> self validCardDate .
	creditCard add: #Credit -> 100 .
	creditCard add: #Stolen -> false .
	^creditCard! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:26:26'!
test05CheckingOutWithCreditLessCardRaisesError

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ]
	! !

!methodRemoval: CashierTest #test05CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:26:26'!
test05CheckingOutWithStolenCardRaisesError

	| cart creditCard salesBook merchantProcessor |
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ]
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:27:00' prior: 50605733!
test05CheckingOutWithCreditLessCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := Dictionary new .
	creditCard add: #Date-> self validCardDate .
	
	cart := self createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:27:28' prior: 50605779!
test05CheckingOutWithCreditLessCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := objectFactory creditLessCard .
	
	cart := objectFactory createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ]
	! !
!Cashier methodsFor: 'checkout' stamp: 'aa 6/11/2023 13:30:05' prior: 50605377!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook through: aMerchantProcessor
	

	aCart addItemsToSalesBook: aSalesBook .
	^'Compra exitosa'! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:30:36'!
debitAmount: anAmount from: aCreditCard on: aCart! !

!methodRemoval: MerchantProcessor #debitAmount:from: stamp: 'aa 6/11/2023 13:30:37'!
debitAmount: anAmount from: aCreditCard

	!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:31:19'!
debitAmount: anAmount from: aCreditCard! !

!methodRemoval: MerchantProcessor #debitAmount:from:on: stamp: 'aa 6/11/2023 13:31:22'!
debitAmount: anAmount from: aCreditCard on: aCart!
!Cashier methodsFor: 'nil' stamp: 'aa 6/11/2023 13:31:49'!
calculateTotal: aCart

	! !
!Cart methodsFor: 'queries' stamp: 'aa 6/11/2023 13:32:31'!
total

	items do: $a! !
!Cart methodsFor: 'queries' stamp: 'aa 6/11/2023 13:33:52' prior: 50605333!
addItemsToSalesBook: aSalesBook

	catalog do: [ :each | 
		| ocurrences |
		ocurrences := 		self occurrencesOf: each key .
		ocurrences > 0 ifTrue: [ aSalesBook add: (each key->ocurrences) ] .
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:35:39' prior: 50605444!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: self itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: objectFactory itemSelledByTheStore -> 1)! !

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:35:41'!
ERROR!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:35:41'!
ERROR!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:36:01'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:36:03'!
ERROR!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:36:03'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:36:20' prior: 50605870!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: objectFactory itemSelledByTheStore -> 1)! !

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:36:33'!
ERROR!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:36:33'!
ERROR!
!Dictionary methodsFor: 'testing' stamp: 'aa 6/11/2023 13:37:40' prior: 16842270 overrides: 16935890!
includes: anObject 
	self do: [:each | anObject = each key ifTrue: [^true]].
	^false! !

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:37:54'!
ERROR!
!Dictionary methodsFor: 'testing' stamp: 'aa 6/11/2023 13:38:33' prior: 50605937 overrides: 16935890!
includes: anObject 
	self do: [:each | anObject = each ifTrue: [^true]].
	^false! !
!Cart methodsFor: 'assertions' stamp: 'aa 6/11/2023 13:39:30' prior: 50604131!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:39:34'!
ERROR!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:39:34'!
ERROR!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:40:38'!
ERROR!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:40:38'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'aa 6/11/2023 13:40:45' prior: 50605860!
addItemsToSalesBook: aSalesBook

	catalog keysDo: [ :each | 
		| ocurrences |
		ocurrences := 		self occurrencesOf: each key .
		ocurrences > 0 ifTrue: [ aSalesBook add: (each key->ocurrences) ] .
		]! !

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:40:46'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'aa 6/11/2023 13:41:03' prior: 50605972!
addItemsToSalesBook: aSalesBook

	catalog keysDo: [ :each | 
		| ocurrences |
		ocurrences := 		self occurrencesOf: each .
		ocurrences > 0 ifTrue: [ aSalesBook add: (each->ocurrences) ] .
		]! !

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:41:03'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:41:05'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:41:07'!
ERROR!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:41:07'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:41:59' prior: 50605462!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: self itemSelledByTheStore .
	cart add: self anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa')

! !

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:42:02'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:42:27' prior: 50605482!
test04CheckingOutWithExpiredCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	creditCard := objectFactory validCard .
	cart := self createCart .
	salesBook := OrderedCollection new .
	cart add: self itemSelledByTheStore .
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:42:42'!
expiredCard

	| creditCard |
	creditCard := Dictionary new .
	creditCard add: #Date -> self invalidCardDate .
	creditCard add: #Credit -> 100 .
	creditCard add: #Stolen -> false .
	^creditCard! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:42:59' prior: 50606031!
test04CheckingOutWithExpiredCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory expiredCard .
	cart := objectFactory createCart .
	cart add: self itemSelledByTheStore .
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:43:00' prior: 50606063!
test04CheckingOutWithExpiredCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory expiredCard .
	cart := objectFactory createCart .
	cart add: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 13:43:07'!
PASSED!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:43:12'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:43:12'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'aa 6/11/2023 13:45:24' prior: 50605856!
total

	^items inject: 0 into: [ :sum :each |
		 sum + (catalog at: each)
		]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:45:39' prior: 50605853!
calculateTotal: aCart

	^aCart total! !
!Cashier methodsFor: 'checkout' stamp: 'aa 6/11/2023 13:46:22' prior: 50605828!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook through: aMerchantProcessor
	

	aMerchantProcessor debitAmount: aCart total from: aCreditCard .

	aCart addItemsToSalesBook: aSalesBook .
	^'Compra exitosa'! !

!methodRemoval: Cashier #calculateTotal: stamp: 'aa 6/11/2023 13:46:25'!
calculateTotal: aCart

	^aCart total!
!Cashier methodsFor: 'checkout' stamp: 'aa 6/11/2023 13:46:31' prior: 50606129!
checkout: aCart withCard: aCreditCard time: aDate register: aSalesBook through: aMerchantProcessor
	

	aMerchantProcessor debitAmount: aCart total from: aCreditCard .
	aCart addItemsToSalesBook: aSalesBook .
	^'Compra exitosa'! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:47:35' prior: 50605845!
debitAmount: anAmount from: aCreditCard

	(aCreditCard at: #Stolen) ifTrue: [ self error: MerchantProcessor creditCardIsStolenErrorMessage ] .
	(aCreditCard at: #Stolen) ifTrue: [ self error: MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ] .! !
!MerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:47:48'!
creditCardIsStolenErrorMessage

	^'La tarjeta es robada'! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:48:11' prior: 50606154!
debitAmount: anAmount from: aCreditCard

	(aCreditCard at: #Stolen) ifTrue: [ self error: MerchantProcessor creditCardIsStolenErrorMessage ] .
	(aCreditCard at: #Credit < anAmount ) ifTrue: [ self error: MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ] .! !

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:48:22'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:48:22'!
FAILURE!

aCart total!

aCreditCard!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:49:26' prior: 50605804!
test05CheckingOutWithCreditLessCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := objectFactory creditLessCard .
	
	cart := objectFactory createCart .
	cart add: 2 of: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ]
	! !

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:49:32'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:49:32'!
FAILURE!

aCart total!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:50:18'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:50:39'!
FAILURE!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:50:45' prior: 50606171!
debitAmount: anAmount from: aCreditCard

	(aCreditCard at: #Stolen) ifTrue: [ self error: MerchantProcessor creditCardIsStolenErrorMessage ] .
	((aCreditCard at: #Credit) < anAmount ) ifTrue: [ self error: MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ] .! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:50:48' prior: 50606230!
debitAmount: anAmount from: aCreditCard

	(aCreditCard at: #Stolen) ifTrue: [ self error: MerchantProcessor creditCardIsStolenErrorMessage ] .
	((aCreditCard at: #Credit) < anAmount ) ifTrue: [ self error: MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ] .! !

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:51:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:51:30'!
test06CheckingOutWithStolenCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := objectFactory stolenCard .
	
	cart := objectFactory createCart .
	cart add: 2 of: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:51:34' prior: 50606257!
test06CheckingOutWithStolenCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := objectFactory stolenCard .
	
	cart := objectFactory createCart .
	cart add: 2 of: self itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardIsStolenErrorMessage ]
	! !

!testRun: #CashierTest #test06CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:51:35'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:51:35'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:51:35'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:51:35'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 13:51:35'!
PASSED!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:51:35'!
PASSED!

!testRun: #CashierTest #test06CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:51:35'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:52:16' prior: 50605423!
test01CheckingOutWithAnEmptyCartRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	self 
		should: [ Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:52:18' prior: 50606329!
test01CheckingOutWithAnEmptyCartRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	
	self 
		should: [ Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmptyErrorMessage ]! !

!methodRemoval: CashierTest #validCardDate stamp: 'aa 6/11/2023 13:52:55'!
validCardDate

	^DateAndTime year: 3000 month: 1 day: 1 hour: 0 minute: 0 second: 0
!

!methodRemoval: CashierTest #itemSelledByTheStore stamp: 'aa 6/11/2023 13:52:57'!
itemSelledByTheStore
	
	^ 'validBook'!

!methodRemoval: CashierTest #invalidCardDate stamp: 'aa 6/11/2023 13:52:58'!
invalidCardDate

	^DateAndTime year: 2000 month: 1 day: 1 hour: 0 minute: 0 second: 0
!

!methodRemoval: CashierTest #defaultCatalog stamp: 'aa 6/11/2023 13:52:59'!
defaultCatalog
	
	^ Array with: self itemSelledByTheStore with: self anotherItemSelledByTheStore!

!methodRemoval: CashierTest #createCart stamp: 'aa 6/11/2023 13:53:01'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CashierTest #anotherItemSelledByTheStore stamp: 'aa 6/11/2023 13:53:02'!
anotherItemSelledByTheStore

	^'anotherValidBook'!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:53:03'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:53:03'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:53:03'!
ERROR!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 13:53:03'!
ERROR!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:53:03'!
ERROR!

!testRun: #CashierTest #test06CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:53:03'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:53:11' prior: 50606007!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	cart add: objectFactory anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa')

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:53:14' prior: 50606086!
test04CheckingOutWithExpiredCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory expiredCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsExpiredErrorMessage ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:53:18' prior: 50606191!
test05CheckingOutWithCreditLessCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := objectFactory creditLessCard .
	
	cart := objectFactory createCart .
	cart add: 2 of: objectFactory itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:53:20' prior: 50606281!
test06CheckingOutWithStolenCardRaisesError

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	
	creditCard := objectFactory stolenCard .
	
	cart := objectFactory createCart .
	cart add: 2 of: objectFactory itemSelledByTheStore .
	
	self 
		should: [ ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardIsStolenErrorMessage ]
	! !

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:53:24'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:53:24'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:53:24'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 13:53:24'!
PASSED!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:53:24'!
PASSED!

!testRun: #CashierTest #test06CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:53:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'aa 6/11/2023 13:53:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:53:55'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'aa 6/11/2023 13:53:55'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'aa 6/11/2023 13:53:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'aa 6/11/2023 13:53:55'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'aa 6/11/2023 13:53:55'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'aa 6/11/2023 13:53:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'aa 6/11/2023 13:53:55'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:54:11'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:54:11'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'aa 6/11/2023 13:54:43' prior: 50603955!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart objectFactory |
	
	objectFactory := ObjectFactory new .
	cart := objectFactory createCart.
	
	self 
		should: [ cart add: objectFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:54:46'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:54:46'!
ERROR!
!ObjectFactory methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:56:52'!
itemNotSellByTheStore
	
	^'invalidBook'! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:56:59'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'aa 6/11/2023 13:57:12' prior: 50604510!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart objectFactory |
	
	objectFactory := ObjectFactory new .
	cart := objectFactory createCart.
	
	cart add: objectFactory itemSelledByTheStore.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'aa 6/11/2023 13:57:13'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'aa 6/11/2023 13:57:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:57:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'aa 6/11/2023 13:57:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'aa 6/11/2023 13:57:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'aa 6/11/2023 13:57:13'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'aa 6/11/2023 13:57:13'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'aa 6/11/2023 13:57:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'aa 6/11/2023 13:57:13'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'aa 6/11/2023 13:57:25' prior: 50604518!
test04CanNotAddNonPositiveNumberOfItems

	| cart objectFactory |
	
	objectFactory := ObjectFactory new .
	cart := objectFactory createCart.
	
	self 
		should: [cart add: 0 of: objectFactory itemSelledByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'aa 6/11/2023 13:57:41' prior: 50603989!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart objectFactory |
	
	objectFactory := ObjectFactory new .
	cart := objectFactory createCart.
	
	self 
		should: [cart add: 2 of: objectFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'aa 6/11/2023 13:57:43'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'aa 6/11/2023 13:57:57' prior: 50604551!
test06CartRemembersAddedItems

	| cart objectFactory |
	
	objectFactory := ObjectFactory new .
	cart := objectFactory createCart.
	
	cart add: objectFactory itemSelledByTheStore.
	self assert: (cart includes: objectFactory itemSelledByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'aa 6/11/2023 13:58:09' prior: 50604502!
test07CartDoesNotHoldNotAddedItems

	| cart objectFactory |
	
	objectFactory := ObjectFactory new .
	cart := objectFactory createCart.
	
	self deny: (cart includes: objectFactory itemSelledByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'aa 6/11/2023 13:58:22' prior: 50604476!
test08CartRemembersTheNumberOfAddedItems

	| cart objectFactory |
	
	objectFactory := ObjectFactory new .
	cart := objectFactory createCart.
	
	cart add: 2 of: objectFactory itemSelledByTheStore.
	self assert: (cart occurrencesOf: objectFactory itemSelledByTheStore) = 2! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'aa 6/11/2023 13:58:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'aa 6/11/2023 13:58:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'aa 6/11/2023 13:58:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'aa 6/11/2023 13:58:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'aa 6/11/2023 13:58:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'aa 6/11/2023 13:58:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'aa 6/11/2023 13:58:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'aa 6/11/2023 13:58:25'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 13:58:27'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 13:58:27'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:58:27'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 13:58:27'!
PASSED!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 13:58:27'!
PASSED!

!testRun: #CashierTest #test06CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 13:58:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:59:22' prior: 50606421!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	cart add: objectFactory anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: objectFactory itemSelledByTheStore -> 1 with: objectFactory anotherItemSelledByTheStore -> 1 )
! !

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:59:23'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 13:59:42' prior: 50606748!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	cart add: objectFactory anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: (objectFactory itemSelledByTheStore -> 1) with: (objectFactory anotherItemSelledByTheStore -> 1) )
! !

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 13:59:42'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 14:00:01' prior: 50606777!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	cart add: objectFactory anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: (objectFactory anotherItemSelledByTheStore -> 1) with: (objectFactory itemSelledByTheStore -> 1) )
! !

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 14:00:01'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 14:00:01'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 14:00:01'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 14:00:01'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 14:00:01'!
PASSED!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 14:00:01'!
PASSED!

!testRun: #CashierTest #test06CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 14:00:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 14:00:53' prior: 50606806!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	cart add: objectFactory anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: (objectFactory anotherItemSelledByTheStore -> 1) with: (objectFactory itemSelledByTheStore -> 1) )
	self assert: 88 equals: (creditCard at: #Credit)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 14:00:58' prior: 50606856!
test03CheckingOutWithMultipleItemsSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	cart add: objectFactory anotherItemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: (objectFactory anotherItemSelledByTheStore -> 1) with: (objectFactory itemSelledByTheStore -> 1) ) .
	self assert: 88 equals: (creditCard at: #Credit)! !

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 14:01:00'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 14:01:00'!
FAILURE!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 14:07:09' prior: 50606242!
debitAmount: anAmount from: aCreditCard
	
	| currentCredit |
	(aCreditCard at: #Stolen) ifTrue: [ self error: MerchantProcessor creditCardIsStolenErrorMessage ] .
	((aCreditCard at: #Credit) < anAmount ) ifTrue: [ self error: MerchantProcessor creditCardHasNotEnoughCreditErrorMessage ] .
	currentCredit := aCreditCard at: #Credit .
	aCreditCard at: #Credit put: (currentCredit - anAmount)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 14:07:42' prior: 50605908!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: objectFactory itemSelledByTheStore -> 1)
	self assert: (creditCard at: #Credit) equals: 95! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 14:07:44' prior: 50606935!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: objectFactory itemSelledByTheStore -> 1) .
	self assert: (creditCard at: #Credit) equals: 95! !

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 14:07:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'aa 6/11/2023 14:08:05' prior: 50606959!
test02CheckingOutWithOneItemSucceeds

	| cart creditCard salesBook merchantProcessor objectFactory |
	
	objectFactory := ObjectFactory new .
	merchantProcessor := MerchantProcessor new .
	salesBook := OrderedCollection new .
	creditCard := objectFactory validCard .
	cart := objectFactory createCart .
	cart add: objectFactory itemSelledByTheStore .
	self assert: ( Cashier with: cart card: creditCard time: DateAndTime now register: salesBook through: merchantProcessor ) equals: ('Compra exitosa') .
	self assert: salesBook equals: (OrderedCollection with: objectFactory itemSelledByTheStore -> 1) .
	self assert: 95 equals: (creditCard at: #Credit)! !

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 14:08:07'!
PASSED!

!testRun: #CashierTest #test01CheckingOutWithAnEmptyCartRaisesError stamp: 'aa 6/11/2023 14:08:09'!
PASSED!

!testRun: #CashierTest #test02CheckingOutWithOneItemSucceeds stamp: 'aa 6/11/2023 14:08:09'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithMultipleItemsSucceeds stamp: 'aa 6/11/2023 14:08:09'!
PASSED!

!testRun: #CashierTest #test04CheckingOutWithExpiredCardRaisesError stamp: 'aa 6/11/2023 14:08:09'!
PASSED!

!testRun: #CashierTest #test05CheckingOutWithCreditLessCardRaisesError stamp: 'aa 6/11/2023 14:08:09'!
PASSED!

!testRun: #CashierTest #test06CheckingOutWithStolenCardRaisesError stamp: 'aa 6/11/2023 14:08:09'!
PASSED!

----SNAPSHOT----(11 June 2023 14:51:26) CuisUniversity-5706.image priorSource: 8738015!
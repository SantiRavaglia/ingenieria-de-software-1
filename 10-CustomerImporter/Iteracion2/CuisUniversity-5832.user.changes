

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (26 June 2023 20:37:55) as /home/clinux01/Escritorio/linux64(2)/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Escritorio/CustomerImporter-35.st----!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:39:06' prior: 50624631 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'aa 6/26/2023 20:39:07'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:39:11' prior: 50624783 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'aa 6/26/2023 20:39:11'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:40:18' prior: 50624824 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [  
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'aa 6/26/2023 20:40:18'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:40:28' prior: 50624865 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [  
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:40:36'!
findRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:40:36' prior: 50624906 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [  
		self findRecord.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:41:36' prior: 50624942 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [  
		self findRecord.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:41:47' prior: 50624973 overrides: 16902254!
value

	line := readStream nextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:42:04'!
readNextLine

	^ line := readStream nextLine! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:42:04' prior: 50625004 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:42:04' prior: 50625039 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:42:28'!
assertIsCustomer

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:42:28' prior: 50625070 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertIsCustomer) ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:42:55'!
assertRecordIsCustomer

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:42:55' prior: 50625105 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		self readNextLine. ].

	! !

!methodRemoval: CustomerImporter #assertIsCustomer stamp: 'aa 6/26/2023 20:42:55'!
assertIsCustomer

	^ line beginsWith: 'C'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:43:31'!
assertRecordIsAddress

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:43:42' prior: 50625141 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self assertRecordIsAddress) ifTrue: [ | addressData newAddress |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:44:01' prior: 50625181 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [ | customerData |
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self assertRecordIsAddress) ifTrue: [ | addressData  |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		self readNextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'aa 6/26/2023 20:44:01'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:44:16' prior: 50625213 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self assertRecordIsAddress) ifTrue: [ | addressData  |
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		self readNextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'aa 6/26/2023 20:44:16'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record newAddress customerData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:44:19' prior: 50625253 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self assertRecordIsAddress) ifTrue: [  
			addressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		self readNextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'aa 6/26/2023 20:44:19'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record newAddress customerData addressData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'aa 6/26/2023 20:44:28'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record newAddress customerData currentAddressData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:44:28' prior: 50625293 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			customerData := record .
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self assertRecordIsAddress) ifTrue: [  
			currentAddressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: currentAddressData second.
			newAddress streetNumber: currentAddressData third asNumber .
			newAddress town: currentAddressData fourth.
			newAddress zipCode: currentAddressData fifth asNumber .
			newAddress province: currentAddressData sixth ].

		self readNextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'aa 6/26/2023 20:44:33'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record newAddress currentCustomerData currentAddressData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:44:33' prior: 50625343 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			currentCustomerData := record .
			newCustomer := Customer new.
			newCustomer firstName: currentCustomerData second.
			newCustomer lastName: currentCustomerData third.
			newCustomer identificationType: currentCustomerData fourth.
			newCustomer identificationNumber: currentCustomerData fifth.
			session persist: newCustomer ].

		(self assertRecordIsAddress) ifTrue: [  
			currentAddressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: currentAddressData second.
			newAddress streetNumber: currentAddressData third asNumber .
			newAddress town: currentAddressData fourth.
			newAddress zipCode: currentAddressData fifth asNumber .
			newAddress province: currentAddressData sixth ].

		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:45:15'!
persistCustomerToDatabase

	currentCustomerData := record .
			newCustomer := Customer new.
			newCustomer firstName: currentCustomerData second.
			newCustomer lastName: currentCustomerData third.
			newCustomer identificationType: currentCustomerData fourth.
			newCustomer identificationNumber: currentCustomerData fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:45:15' prior: 50625385 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			self persistCustomerToDatabase ].

		(self assertRecordIsAddress) ifTrue: [  
			currentAddressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: currentAddressData second.
			newAddress streetNumber: currentAddressData third asNumber .
			newAddress town: currentAddressData fourth.
			newAddress zipCode: currentAddressData fifth asNumber .
			newAddress province: currentAddressData sixth ].

		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:45:36'!
persistAddressToDatabase

	currentAddressData := record .
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: currentAddressData second.
			newAddress streetNumber: currentAddressData third asNumber .
			newAddress town: currentAddressData fourth.
			newAddress zipCode: currentAddressData fifth asNumber .
			newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:45:36' prior: 50625431 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			self persistCustomerToDatabase ].

		(self assertRecordIsAddress) ifTrue: [  
			self persistAddressToDatabase ].

		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:45:42' prior: 50625470 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			self persistCustomerToDatabase ].
		(self assertRecordIsAddress) ifTrue: [  
			self persistAddressToDatabase ].
		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:46:32' prior: 50625453!
persistAddressToDatabase

	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:46:38' prior: 50625416!
persistCustomerToDatabase

	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:47:40'!
addAddressToDatabase

	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:47:40' prior: 50625482 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			self persistCustomerToDatabase ].
		(self assertRecordIsAddress) ifTrue: [  
			self addAddressToDatabase ].
		self readNextLine. ].

	! !

!methodRemoval: CustomerImporter #persistAddressToDatabase stamp: 'aa 6/26/2023 20:47:40'!
persistAddressToDatabase

	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:47:46'!
addCustomerToDatabase

	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 20:47:46' prior: 50625539 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			self addCustomerToDatabase ].
		(self assertRecordIsAddress) ifTrue: [  
			self addAddressToDatabase ].
		self readNextLine. ].

	! !

!methodRemoval: CustomerImporter #persistCustomerToDatabase stamp: 'aa 6/26/2023 20:47:46'!
persistCustomerToDatabase

	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer!
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:48:01' prior: 50625034!
readNextLine

	line := readStream nextLine! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:48:04' prior: 50624937!
findRecord

	record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 20:51:26' prior: 50625565!
addCustomerToDatabase

	record size ~= 4 ifTrue: [self error: Customer invalidRecordSyntaxErrorMessage] .
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 20:51:35'!
invalidRecordSyntaxErrorMessage! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 20:51:59' prior: 50625631!
invalidRecordSyntaxErrorMessage

	^'Syntax is invalid for one of the records'! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 20:53:22' prior: 50625615!
addCustomerToDatabase

	record size ~= 4 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 20:53:52' prior: 50625523!
addAddressToDatabase

	record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 20:54:27'!
test01ImportCustomerDataCorrectly

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01Import stamp: 'aa 6/26/2023 20:54:29'!
test01Import

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 20:55:18'!
test02EmptyFields

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 20:57:19' prior: 50625642!
addCustomerToDatabase

	record size > 4 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size ~= 4 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 20:57:22'!
tooManyFieldsInRecordErrorMessage! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 20:57:36' prior: 50625724!
tooManyFieldsInRecordErrorMessage

	^'Record has too many fields for its record type'! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 20:57:53' prior: 50625659!
addAddressToDatabase

	record size > 6 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 20:58:49' prior: 50625735!
addAddressToDatabase

	record size > 6 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 6 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 20:58:52'!
missingFieldsInRecordErrorMessage! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 20:59:11' prior: 50625780!
missingFieldsInRecordErrorMessage

	^'A record has too few fields for its record type'! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 20:59:17' prior: 50625785!
missingFieldsInRecordErrorMessage

	^'Record has too few fields for its record type'! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 20:59:32' prior: 50625705!
addCustomerToDatabase

	record size > 4 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 4 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	record size ~= 4 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 20:59:34' prior: 50625797!
addCustomerToDatabase

	record size > 4 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 4 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	"record size ~= 4 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] ."
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 20:59:37' prior: 50625756!
addAddressToDatabase

	record size > 6 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 6 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	"record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] ."
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 20:59:57'!
test02EmptyFieldsRaisesError

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test02EmptyFields stamp: 'aa 6/26/2023 20:59:57'!
test02EmptyFields

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:00:20'!
invalidImportDataWithMissingFields

	^ ReadStream on:
'C,Pepe,Sanchez,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:00:48'!
invalidImportDataWithTooManyFields

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,21
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:02:30' prior: 50625866!
test02EmptyFieldsRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithMissingFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter missingFieldsInRecordErrorMessage ]! !

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:02:32'!
FAILURE!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:02:32'!
FAILURE!
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:04:25' prior: 50625843!
addAddressToDatabase

	record size > 7 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 7 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	"record size ~= 7 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] ."
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:04:31' prior: 50625820!
addCustomerToDatabase

	record size > 5 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 5 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	"record size ~= 5 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] ."
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:04:36'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:04:50'!
test03TooManyFieldsRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithMissingFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter missingFieldsInRecordErrorMessage ]! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:04:57' prior: 50625970!
test03TooManyFieldsRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithTooManyFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter missingFieldsInRecordErrorMessage ]! !

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:04:58'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:05:10' prior: 50625981!
test03TooManyFieldsRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithTooManyFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter tooManyFieldsInRecordErrorMessage ]! !

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:05:11'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:05:11'!
ERROR!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:05:11'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:05:11'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:05:11'!
ERROR!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:05:19'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:05:19'!
ERROR!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:05:19'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:05:19'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:05:19'!
ERROR!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:05:51'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:05:52'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:05:54'!
ERROR!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:05:54'!
ERROR!
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:06:23' prior: 50625921!
addAddressToDatabase

	record size > 6 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 6 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	"record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] ."
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:06:24'!
PASSED!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:06:24'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:06:24'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:07:36'!
test03EmptyImportStringRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithTooManyFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter tooManyFieldsInRecordErrorMessage ]! !
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:07:49'!
invalidImportDataEmptyStream

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,21
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:07:58'!
test04EmptyImportStringRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithTooManyFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter tooManyFieldsInRecordErrorMessage ]! !

!methodRemoval: ImportTest #test03EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:07:58'!
test03EmptyImportStringRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithTooManyFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter tooManyFieldsInRecordErrorMessage ]!
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:08:08' prior: 50626091!
invalidImportDataEmptyStream

	^ ReadStream on: ''! !

!testRun: #ImportTest #test04EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:09:07'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:09:07'!
PASSED!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:09:07'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:09:07'!
PASSED!

!testRun: #ImportTest #test04EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:09:07'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:09:31' prior: 50626100!
test04EmptyImportStringRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataEmptyStream into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter tooManyFieldsInRecordErrorMessage ]! !

!testRun: #ImportTest #test04EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:09:33'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 21:11:26' prior: 50625580 overrides: 16902254!
value

	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			self addCustomerToDatabase ].
		(self assertRecordIsAddress) ifTrue: [  
			self addAddressToDatabase ].
		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 21:12:34' prior: 50626157 overrides: 16902254!
value

	readStream isNil ifTrue: [self error: CustomerImporter importDataIsEmptyErrorMessage ] .
	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			self addCustomerToDatabase ].
		(self assertRecordIsAddress) ifTrue: [  
			self addAddressToDatabase ].
		self readNextLine. ].

	! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 21:12:49'!
importDataIsEmptyErrorMessage

	^'Data to import is empty'! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:13:11' prior: 50626142!
test04EmptyImportStringRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataEmptyStream into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter importDataIsEmptyErrorMessage ]! !

!testRun: #ImportTest #test04EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:13:12'!
FAILURE!

!testRun: #ImportTest #test04EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:13:18'!
FAILURE!

!testRun: #ImportTest #test04EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:13:18'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 21:15:00' prior: 50626169 overrides: 16902254!
value

	readStream isEmpty ifTrue: [self error: CustomerImporter importDataIsEmptyErrorMessage ] .
	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		(self assertRecordIsCustomer) ifTrue: [  
			self addCustomerToDatabase ].
		(self assertRecordIsAddress) ifTrue: [  
			self addAddressToDatabase ].
		self readNextLine. ].

	! !

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:15:02'!
PASSED!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:15:02'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:15:02'!
PASSED!

!testRun: #ImportTest #test04EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:15:02'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:16:16'!
test05AddressHasNoCustomerToBeAddedTo

	self should: [ CustomerImporter valueFrom: self invalidImportDataEmptyStream into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter importDataIsEmptyErrorMessage ]! !
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:16:44'!
invalidImportDataAddressOnFirstRecord

	^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444,21
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:21:42' prior: 50626048!
addAddressToDatabase

	newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressOnFirstRecord] .
	record size > 6 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 6 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	"record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] ."
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:22:00' prior: 50626255!
addAddressToDatabase

	newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressHasNoCustomerToBeAddedTo] .
	record size > 6 ifTrue: [self error: CustomerImporter tooManyFieldsInRecordErrorMessage] .
	record size < 6 ifTrue: [self error: CustomerImporter missingFieldsInRecordErrorMessage] .
	"record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] ."
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 21:22:19'!
invalidImportDataAddressHasNoCustomerToBeAddedTo

	^'An address has no customer to be added to'! !

!testRun: #ImportTest #test05AddressHasNoCustomerToBeAddedTo stamp: 'aa 6/26/2023 21:22:24'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 21:32:27'!
processRecordData

	(self assertRecordIsCustomer) ifTrue: [  
			self addCustomerToDatabase ].
		(self assertRecordIsAddress) ifTrue: [  
			self addAddressToDatabase ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 21:32:27' prior: 50626209 overrides: 16902254!
value

	readStream isEmpty ifTrue: [self error: CustomerImporter importDataIsEmptyErrorMessage ] .
	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		self processRecordData.
		self readNextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 21:33:59' prior: 50626318!
processRecordData

	(self assertRecordIsCustomer) ifTrue: [  
		^self addCustomerToDatabase ].
	(self assertRecordIsAddress) ifTrue: [  
		^self addAddressToDatabase ] .
	self error: CustomerImporter recordIsNotCustomerNorAddressErrorMessage! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 21:34:14'!
recordIsNotCustomerNorAddressErrorMessage! !
!CustomerImporter class methodsFor: 'importing' stamp: 'aa 6/26/2023 21:34:26' prior: 50626348!
recordIsNotCustomerNorAddressErrorMessage

	^'Record is not a customer nor an address'! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:34:54'!
test06RecordIsNotACustomerNorAnAddress

	self should: [ CustomerImporter valueFrom: self invalidImportDataEmptyStream into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter importDataIsEmptyErrorMessage ]! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:35:16'!
test04ImportingEmptyStringRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataEmptyStream into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter importDataIsEmptyErrorMessage ]! !

!methodRemoval: ImportTest #test04EmptyImportStringRaisesError stamp: 'aa 6/26/2023 21:35:16'!
test04EmptyImportStringRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataEmptyStream into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter importDataIsEmptyErrorMessage ]!
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:35:28' prior: 50626282!
addAddressToDatabase

	newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressHasNoCustomerToBeAddedTo] .
	record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:35:36' prior: 50625945!
addCustomerToDatabase

	record size ~= 5 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:35:42' prior: 50625904!
test02EmptyFieldsRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithMissingFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter invalidRecordSyntaxErrorMessage ]! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:35:45' prior: 50625995!
test03TooManyFieldsRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithTooManyFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter invalidRecordSyntaxErrorMessage ]! !

!testRun: #ImportTest #test04ImportingEmptyStringRaisesError stamp: 'aa 6/26/2023 21:35:49'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:35:51'!
PASSED!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:35:52'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:35:52'!
PASSED!

!testRun: #ImportTest #test04ImportingEmptyStringRaisesError stamp: 'aa 6/26/2023 21:35:52'!
PASSED!

!testRun: #ImportTest #test05AddressHasNoCustomerToBeAddedTo stamp: 'aa 6/26/2023 21:35:52'!
PASSED!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:35:52'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:37:30'!
invalidImportDataWithRecordNotCustomerNorAddress

	^ ReadStream on:
'J,Jefe de Gabinete,11287,21/03/2018,
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:37:43' prior: 50626472!
invalidImportDataWithRecordNotCustomerNorAddress

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,21
J,Jefe de Gabinete,11287,21/03/2018
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:38:01' prior: 50626358!
test06RecordIsNotACustomerNorAnAddress

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithRecordNotCustomerNorAddress into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter recordIsNotCustomerNorAddressErrorMessage ]! !

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:38:02'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:38:39' prior: 50626483!
invalidImportDataWithRecordNotCustomerNorAddress

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
J,Jefe de Gabinete,11287,21/03/2018
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:38:43'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:38:45'!
PASSED!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:38:45'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:38:45'!
PASSED!

!testRun: #ImportTest #test04ImportingEmptyStringRaisesError stamp: 'aa 6/26/2023 21:38:45'!
PASSED!

!testRun: #ImportTest #test05AddressHasNoCustomerToBeAddedTo stamp: 'aa 6/26/2023 21:38:45'!
PASSED!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:38:45'!
PASSED!
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:40:24'!
assertAddressHasCorrectAmountOfFields

	^ record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage]! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:40:24' prior: 50626390!
addAddressToDatabase

	newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressHasNoCustomerToBeAddedTo] .
	self assertAddressHasCorrectAmountOfFields .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:40:44'!
assertCustomerIsNotNil

	^ newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressHasNoCustomerToBeAddedTo]! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:40:44' prior: 50626550!
addAddressToDatabase

	self assertCustomerIsNotNil .
	self assertAddressHasCorrectAmountOfFields .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'asserts' stamp: 'aa 6/26/2023 21:42:01'!
assertAddressIsAddedToExistingCustomer

	^ newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressHasNoCustomerToBeAddedTo]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 21:42:01' prior: 50626578!
addAddressToDatabase

	self assertAddressIsAddedToExistingCustomer .
	self assertAddressHasCorrectAmountOfFields .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !

!methodRemoval: CustomerImporter #assertCustomerIsNotNil stamp: 'aa 6/26/2023 21:42:01'!
assertCustomerIsNotNil

	^ newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressHasNoCustomerToBeAddedTo]!
!CustomerImporter methodsFor: 'asserts' stamp: 'aa 6/26/2023 21:42:07'!
assertAddressIsBeingAddedToExistingCustomer

	^ newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressHasNoCustomerToBeAddedTo]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 21:42:07' prior: 50626603!
addAddressToDatabase

	self assertAddressIsBeingAddedToExistingCustomer .
	self assertAddressHasCorrectAmountOfFields .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !

!methodRemoval: CustomerImporter #assertAddressIsAddedToExistingCustomer stamp: 'aa 6/26/2023 21:42:07'!
assertAddressIsAddedToExistingCustomer

	^ newCustomer isNil ifTrue: [self error: CustomerImporter invalidImportDataAddressHasNoCustomerToBeAddedTo]!
!CustomerImporter methodsFor: 'asserts' stamp: 'aa 6/26/2023 21:42:45'!
assertAddressHasCorrectAmountOfFields: aNumberOfFields

	^ record size ~= aNumberOfFields ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage]! !

!methodRemoval: CustomerImporter #assertAddressHasCorrectAmountOfFields stamp: 'aa 6/26/2023 21:42:48'!
assertAddressHasCorrectAmountOfFields

	^ record size ~= 6 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage]!
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:42:54' prior: 50626637!
addAddressToDatabase

	self assertAddressIsBeingAddedToExistingCustomer .
	self assertAddressHasCorrectAmountOfFields: 6 .
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:43:10' prior: 50626412!
addCustomerToDatabase

	record size ~= 5 ifTrue: [self error: CustomerImporter invalidRecordSyntaxErrorMessage] .
	self assertAddressHasCorrectAmountOfFields: 5 .
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:43:13' prior: 50626698!
addCustomerToDatabase

	self assertAddressHasCorrectAmountOfFields: 5 .
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:43:14'!
PASSED!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:43:14'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:43:14'!
PASSED!

!testRun: #ImportTest #test04ImportingEmptyStringRaisesError stamp: 'aa 6/26/2023 21:43:14'!
PASSED!

!testRun: #ImportTest #test05AddressHasNoCustomerToBeAddedTo stamp: 'aa 6/26/2023 21:43:14'!
PASSED!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:43:15'!
PASSED!
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:43:23' prior: 50626717!
addCustomerToDatabase

	self assertAddressHasCorrectAmountOfFields: 5 .
	
	currentCustomerData := record .
	newCustomer := Customer new.
	newCustomer firstName: currentCustomerData second.
	newCustomer lastName: currentCustomerData third.
	newCustomer identificationType: currentCustomerData fourth.
	newCustomer identificationNumber: currentCustomerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'database-load' stamp: 'aa 6/26/2023 21:43:25' prior: 50626679!
addAddressToDatabase

	self assertAddressIsBeingAddedToExistingCustomer .
	self assertAddressHasCorrectAmountOfFields: 6 .
	
	currentAddressData := record .
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: currentAddressData second.
	newAddress streetNumber: currentAddressData third asNumber .
	newAddress town: currentAddressData fourth.
	newAddress zipCode: currentAddressData fifth asNumber .
	newAddress province: currentAddressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 21:43:57'!
assertStreamIsNotEmpty

	^ readStream isEmpty ifTrue: [self error: CustomerImporter importDataIsEmptyErrorMessage ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'aa 6/26/2023 21:43:57' prior: 50626327 overrides: 16902254!
value

	self assertStreamIsNotEmpty .
	self readNextLine .
	[ line notNil ] whileTrue: [  
		self findRecord.
		self processRecordData.
		self readNextLine. ].

	! !

!methodRemoval: CustomerImporter class #missingFieldsInRecordErrorMessage stamp: 'aa 6/26/2023 21:44:56'!
missingFieldsInRecordErrorMessage

	^'Record has too few fields for its record type'!

!methodRemoval: CustomerImporter class #tooManyFieldsInRecordErrorMessage stamp: 'aa 6/26/2023 21:44:58'!
tooManyFieldsInRecordErrorMessage

	^'Record has too many fields for its record type'!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:49:03' prior: 50626494!
test06RecordIsNotACustomerNorAnAddress

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithRecordNotCustomerNorAddress into: session. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [CustomerImporter recordIsNotCustomerNorAddressErrorMessage ] .
		
	self assertPepeSanchezWasImportedCorrecty ! !

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:49:05'!
FAILURE!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:49:05'!
FAILURE!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:53:42'!
FAILURE!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:53:43'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:55:50' prior: 50626813!
test06RecordIsNotACustomerNorAnAddress
		
	self should: [ CustomerImporter valueFrom: self invalidImportDataWithRecordNotCustomerNorAddress into: session. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CustomerImporter recordIsNotCustomerNorAddressErrorMessage .
			self assertPepeSanchezWasImportedCorrecty ]! !

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:55:56'!
FAILURE!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:55:57'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:57:16' prior: 50626839!
test06RecordIsNotACustomerNorAnAddress
		
	self should: [ CustomerImporter valueFrom: self invalidImportDataWithRecordNotCustomerNorAddress into: session. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CustomerImporter recordIsNotCustomerNorAddressErrorMessage .
			self assertCustomersWereImportedCorrectly ]! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:57:53' prior: 50626861!
test06RecordIsNotACustomerNorAnAddress
		
	self should: [ CustomerImporter valueFrom: self invalidImportDataWithRecordNotCustomerNorAddress into: session. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CustomerImporter recordIsNotCustomerNorAddressErrorMessage .
			self self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'. ]! !

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:57:54'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:58:03' prior: 50626876!
test06RecordIsNotACustomerNorAnAddress
		
	self should: [ CustomerImporter valueFrom: self invalidImportDataWithRecordNotCustomerNorAddress into: session. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CustomerImporter recordIsNotCustomerNorAddressErrorMessage .
			self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'. ]! !

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:58:03'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:58:04'!
PASSED!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:58:04'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:58:04'!
PASSED!

!testRun: #ImportTest #test04ImportingEmptyStringRaisesError stamp: 'aa 6/26/2023 21:58:04'!
PASSED!

!testRun: #ImportTest #test05AddressHasNoCustomerToBeAddedTo stamp: 'aa 6/26/2023 21:58:04'!
PASSED!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:58:05'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'aa 6/26/2023 21:58:56' prior: 50625885!
invalidImportDataWithMissingFields

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 21:59:46' prior: 50626429!
test02EmptyFieldsRaisesError

	self should: [ CustomerImporter valueFrom: self invalidImportDataWithMissingFields into: session. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: CustomerImporter invalidRecordSyntaxErrorMessage .
			self assertPepeSanchezWasImportedCorrecty ]! !

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:59:48'!
PASSED!

!testRun: #ImportTest #test01ImportCustomerDataCorrectly stamp: 'aa 6/26/2023 21:59:51'!
PASSED!

!testRun: #ImportTest #test02EmptyFieldsRaisesError stamp: 'aa 6/26/2023 21:59:52'!
PASSED!

!testRun: #ImportTest #test03TooManyFieldsRaisesError stamp: 'aa 6/26/2023 21:59:52'!
PASSED!

!testRun: #ImportTest #test04ImportingEmptyStringRaisesError stamp: 'aa 6/26/2023 21:59:52'!
PASSED!

!testRun: #ImportTest #test05AddressHasNoCustomerToBeAddedTo stamp: 'aa 6/26/2023 21:59:52'!
PASSED!

!testRun: #ImportTest #test06RecordIsNotACustomerNorAnAddress stamp: 'aa 6/26/2023 21:59:52'!
PASSED!
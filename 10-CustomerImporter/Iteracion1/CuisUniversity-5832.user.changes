

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (22 June 2023 20:23:57) as /home/clinux01/Escritorio/linux64(4)/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Escritorio/2023-1c-main/10-CustomerImporter/CustomerImporter.st----!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:27:09'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!methodRemoval: Customer class #importCustomers stamp: 'aa 6/22/2023 20:27:18'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:27:20' prior: 50624380!
test01Import

	self importCustomers ! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:27:28'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:27:52'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:34:32' prior: 50624640!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'aa 6/22/2023 20:34:33'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:34:42' overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:34:42' prior: 50624729!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	self setUp.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:34:46'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:34:53' prior: 50624784!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:35:14' overrides: 16961402!
tearDown

	session commit.
	session close! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:35:14' prior: 50624824!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	self tearDown.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:38:40' prior: 50624866!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:40:41' prior: 50624720!
test01Import

	self importCustomers 
	
	self assert: session! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:42:25' prior: 50624939!
test01Import

	self importCustomers 
	
	self assert: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer)! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:42:27'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:42:28'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:42:38' prior: 50624944!
test01Import

	self importCustomers .
	
	self assert: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer)! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:42:39'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:42:56' prior: 50624956!
test01Import

	self importCustomers .
	
	self assert: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) equals: 'Pepe'! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:42:58'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:43:15' prior: 50624966!
test01Import

	self importCustomers .
	
	self assert: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) equals: 'Pepe'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:44:40' prior: 50624977!
test01Import

	self importCustomers .
	
	self assert: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom equals: 'Pepe' .! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:44:41'!
FAILURE!

(session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:45:24' prior: 50624985!
test01Import

	self importCustomers .
	
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom  .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:45:29' prior: 50624999!
test01Import

	self importCustomers .
	
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:45:30'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:45:31'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:50:13' prior: 50625007!
test01Import

	self importCustomers .
	
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	self assert: '' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:50:55' prior: 50625021!
test01Import

	self importCustomers .
	
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	self assert: 'Juan' equals: (session select: [:customer | customer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom firstName  .! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:50:56'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:55:24' prior: 50625034!
test01Import

	self importCustomers .
	
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	self assert: 'Juan' equals: (session select: [:customer | customer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom firstName  .! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:55:27'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:55:28'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:56:29'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:58:11' prior: 50625050!
test01Import

	self importCustomers .
	
	self assert: 2 equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	self assert: 'Juan' equals: (session select: [:customer | customer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom firstName .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:58:25' prior: 50625071!
test01Import

	self importCustomers .
	
	self assert: 2 equals: (session select: [:customer | customer isKindOf: Customer] ofType: Customer) atRandom firstName  .
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	self assert: 'Juan' equals: (session select: [:customer | customer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom firstName .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:58:27' prior: 50625088!
test01Import

	self importCustomers .
	
	self assert: 2 equals: (session select: [:customer | customer isKindOf: Customer] ofType: Customer) size  .
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	self assert: 'Juan' equals: (session select: [:customer | customer identificationNumber = '23-25666777-9'] ofType: Customer) atRandom firstName .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:58:30' prior: 50625105!
test01Import

	self importCustomers .
	
	self assert: 2 equals: (session select: [:customer | customer isKindOf: Customer] ofType: Customer) size  .
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:58:31'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:58:32'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:58:52' prior: 50625122!
test01Import

	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size  .
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:58:54'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 20:58:55'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:59:24' prior: 50625139!
test01Import
	

	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size  .
	self assert: 'Pepe' equals: (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom firstName  .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:59:43' prior: 50625155!
test01Import
	

	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size  .
	aCustomer := (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom.
	self assert: 'Pepe' equals: aCustomer firstName  .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 20:59:58' prior: 50625166!
test01Import
	
	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size  .
	aCustomer := (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom.
	self assert: 'Pepe' equals: aCustomer firstName  .
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:00:00'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:00:01'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:00:20' prior: 50625178!
test01Import
	
	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size  .
	aCustomer := (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom.
	self assert: 'Pepe' equals: aCustomer firstName  .
	self assert: 'Sanchez' equals: aCustomer lastName  .! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:00:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:00:22'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:00:30' prior: 50625195!
test01Import
	
	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:01:21' prior: 50625214!
test01Import
	
	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer firstName = 'Pepe'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:01:22'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:01:22'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:05:01' prior: 50625228!
test01Import
	
	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer firstName = 'Pepe' and: customer lastName = 'Sanchez' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:05:03'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:05:03'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:05:36' prior: 50625248!
test01Import
	
	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer firstName = 'Pepe' and: customer lastName = 'Sanchez' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:05:37'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:05:46'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:06:21' prior: 50624903!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:06:46' prior: 50625294!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fourth asNumber .
			newAddress province: addressData fifth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:06:56'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:06:57'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:07:13'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:07:13'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:07:52' prior: 50625330!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:07:54'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:08:02'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:09:02' prior: 50625270!
test01Import
	
	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:09:04'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:09:04'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:09:59' prior: 50625417!
test01Import
	
	| aCustomer |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	(session select: [:address | address identificationNumber = '22333444' ] ofType: Address) atRandom! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:10:10' prior: 50625440!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	anAddress := (session select: [:address | address identificationNumber = '22333444' ] ofType: Address) atRandom! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:11:02' prior: 50625461!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:11:36' prior: 50625483!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode ! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:11:37'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:12:07' prior: 50625506!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 3 equals: (session selectAllOfType: Address) size .
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:12:10' prior: 50625533!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 3 equals: (session selectAllOfType: Address) size .
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	"self assert: 1122 equals: anAddress zipCode "! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:12:14'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:12:42' prior: 50625376!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newAddress addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:12:51'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:12:51'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:12:42' prior: 50625588!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newAddress addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:12:42' prior: 50625629!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newAddress addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:16:41' prior: 50625665!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:18:15' prior: 50625701!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			"newCustomer addAddress: newAddress."
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:18:18'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:18:18'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:18:49' prior: 50625737!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			"newCustomer addAddress: newAddress."
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth .
			session persist: newAddress].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:19:00'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:19:06' prior: 50625559!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 3 equals: (session selectAllOfType: Address) size .
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode ! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:19:07'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:19:08'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:19:50' prior: 50625818!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 3 equals: (session selectAllOfType: Address) size .
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'CABA' equals: anAddress province .! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:19:52'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:19:59' prior: 50625849!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 3 equals: (session selectAllOfType: Address) size .
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province .! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:20:00'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:20:01'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:20:57' prior: 50625881!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	aCustomer := (session select: [:customer | customer identificationNumber = '22333444' ] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 3 equals: (session selectAllOfType: Address) size .
	
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:21:38' prior: 50625915!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	aCustomer := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName .
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 3 equals: (session selectAllOfType: Address) size .
	
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:22:09' prior: 50625945!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	aCustomer := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName . 
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 3 equals: (session selectAllOfType: Address) size .
	
	anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:22:44' prior: 50625778!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth .
			session persist: newAddress].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:23:27' prior: 50626007!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:23:29'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:23:30'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:27:19' prior: 50625976!
test01Import
	
	| aCustomer anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	aCustomer := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: aCustomer firstName . 
	self assert: 'Sanchez' equals: aCustomer lastName .
	self assert: 'D' equals: aCustomer identificationType .
	self assert: '22333444' equals: aCustomer identificationNumber .
	
	self assert: 2 equals: (aCustomer addresses) size .
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:27:23'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:27:24'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:27:58' prior: 50626085!
test01Import
	
	| customerPepe anAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: (customerPepe addresses) size .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:28:15' prior: 50626120!
test01Import
	
	| customerPepe pepesAddresses |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: (customerPepe addresses) size .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:28:43' prior: 50626151!
test01Import
	
	| customerPepe  |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: (customerPepe addresses) size .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:28:47' prior: 50626182!
test01Import
	
	| customerPepe  pepesAddresses |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:28:55' prior: 50626213!
test01Import
	
	| customerPepe  pepesAddresses |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) atRandom .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:29:56' prior: 50626246!
test01Import
	
	| customerPepe  pepesAddresses |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	Set
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:31:09' prior: 50626279!
test01Import
	
	| customerPepe  pepesAddresses |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:31:41' prior: 50626312!
test01Import
	
	| customerPepe  pepesAddresses |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne .
	self assert: 'Juan' equals: customerPepe firstName . 
	self assert: 'Perez' equals: customerPepe lastName .
	self assert: 'C' equals: customerPepe identificationType .
	self assert: '23-25666777-9' equals: customerPepe identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:31:46' prior: 50626357!
test01Import
	
	| customerPepe  pepesAddresses customerJuan |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	customerPepe := customerJuan .
	self assert: 'Juan' equals: customerPepe firstName . 
	self assert: 'Perez' equals: customerPepe lastName .
	self assert: 'C' equals: customerPepe identificationType .
	self assert: '23-25666777-9' equals: customerPepe identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:31:56' prior: 50626402!
test01Import
	
	| customerPepe  pepesAddresses customerJuan |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:31:59'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:32:00'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:32:50' prior: 50626449!
test01Import
	
	| customerPepe  pepesAddresses customerJuan |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	self assert: pepesAddresses.
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:34:50' prior: 50626499!
test01Import
	
	| customerPepe  pepesAddresses customerJuan |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	self assert: (pepesAddresses asOrderedCollection at: 1)  .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!Customer methodsFor: 'addresses' stamp: 'aa 6/22/2023 21:37:43'!
amountOfAddresses

	^ addresses size! !
!Customer methodsFor: 'addresses' stamp: 'aa 6/22/2023 21:39:28'!
addressesThatSatisfy: aConditionBlock

	^ addresses collect: [:each | aConditionBlock value: each ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:40:40' prior: 50626546!
test01Import
	
	| customerPepe  pepesAddresses customerJuan |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	self assert: (pepesAddresses addressesThatSatisfy: [:address | address streetName = 'Maipu']) .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:41:05' prior: 50626604!
test01Import
	
	| customerPepe  pepesAddresses customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	maipuAddress := pepesAddresses addressesThatSatisfy: [:address | address streetName = 'Maipu'].
	self assert: (maipuAddress) .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:42:21' prior: 50626653!
test01Import
	
	| customerPepe  pepesAddresses customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	maipuAddress := pepesAddresses addressesThatSatisfy: [:address | address streetName = 'Maipu'].
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Airs' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:42:43' prior: 50626703!
test01Import
	
	| customerPepe  pepesAddresses customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: (pepesAddresses) size .
	
	maipuAddress := pepesAddresses addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888].
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Airs' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:42:49'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:43:43' prior: 50626761!
test01Import
	
	| customerPepe  pepesAddresses customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	maipuAddress := customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888].
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Airs' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:43:52'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:44:08' prior: 50626822!
test01Import
	
	| customerPepe  pepesAddresses customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	pepesAddresses := customerPepe addresses.
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) at: 1.
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Airs' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:44:17' prior: 50626883!
test01Import
	
	| customerPepe  customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) at: 1.
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Airs' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:44:18'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:44:22' prior: 50626942!
test01Import
	
	| customerPepe  customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) at: 1.
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	
	"anAddress := (session select: [:address | address streetName = 'Maipu' and: address streetNumber = 888 ] ofType: Address) atRandom .
	self assert: 1122 equals: anAddress zipCode .
	self assert: 'Florida' equals: anAddress town .
	self assert: 'Buenos Aires' equals: anAddress province ."! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:44:25'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'aa 6/22/2023 21:45:24' prior: 50626597!
addressesThatSatisfy: aConditionBlock

	^ addresses select: [:each | aConditionBlock value: each ]! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:45:25'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:45:40' prior: 50627002!
test01Import
	
	| customerPepe  customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) at: 1.
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:48:35' prior: 50627070!
test01Import
	
	| customerPepe  customerJuan maipuAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:50:24' prior: 50627118!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first.
	maipuAddress := sanMartinAddress .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:51:39' prior: 50627166!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:51:42'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:51:42'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:52:15' prior: 50627216!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	(customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:52:20' prior: 50627283!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:53:50' prior: 50627349!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:55:23' prior: 50627416!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:55:25'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 21:55:26'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:55:53'!
assertPepeHasTwoAddresses

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:55:53' prior: 50627483!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertPepeHasTwoAddresses .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:56:20' prior: 50627569!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assert: 2 equals: (session selectAllOfType: Customer) size .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !

!methodRemoval: ImportTest #assertPepeHasTwoAddresses stamp: 'aa 6/22/2023 21:56:48'!
assertPepeHasTwoAddresses

	^ self assert: 2 equals: (session selectAllOfType: Customer) size!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:57:01'!
assertDataBaseHasTwoCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:57:01' prior: 50627643!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:58:04'!
assertPepesDataIsImportedCorrectly: customerPepe

	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:58:04' prior: 50627730!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assert: 2 equals: customerPepe amountOfAddresses .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:58:23'!
assertPepeHasTwoAddresses: customerPepe

	^ self assert: 2 equals: customerPepe amountOfAddresses! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:58:23' prior: 50627817!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:58:45'!
assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress

	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:58:45' prior: 50627892!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:59:15'!
assertMaipuAddressDataIsImportedCorrectly: maipuAddress

	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:59:15' prior: 50627975!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:59:33'!
assertJuansDattaIsImportedCorrectly: customerJuan

	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:59:33' prior: 50628050!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province .
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:59:48'!
assertAlemAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/22/2023 21:59:48' prior: 50628117!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAlemAddressDataIsImportedCorrectly: alemAddress .
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/22/2023 22:00:12'!
PASSED!

----SNAPSHOT----(22 June 2023 22:07:21) CuisUniversity-5832.image priorSource: 9366758!

----SNAPSHOT----(22 June 2023 22:07:23) CuisUniversity-5832.image priorSource: 9490338!

----STARTUP---- (25 June 2023 18:06:23) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej10\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\Santiago\Downloads\CustomerImporter.st----!
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:06:09'!
assertAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:06:48' prior: 50624761!
assertAddressDataIsImportedCorrectly: alemAddress

	| streetName |
	streetName := 'Alem'.
	self assert: streetName equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:07:36' prior: 50624774!
assertAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:08:31'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName 

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly: stamp: 'aa 6/25/2023 20:08:31'!
assertAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:08:31' prior: 50624800!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName 

	self assert: streetName equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:08:43'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber  

	self assert: streetName equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:aStreetName: stamp: 'aa 6/25/2023 20:08:43'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName 

	self assert: streetName equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:08:43' prior: 50624840!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber  

	self assert: streetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:09:08'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber town: aTown   

	self assert: streetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:aStreetName:aStreetNumber: stamp: 'aa 6/25/2023 20:09:08'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber  

	self assert: streetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:09:08' prior: 50624883!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber town: aTown   

	self assert: streetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:09:14' prior: 50624914!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: streetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:09:19' prior: 50624929!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:09:27'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:streetName:streetNumber:town: stamp: 'aa 6/25/2023 20:09:29'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:10:08'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:aStreetName:aStreetNumber:town: stamp: 'aa 6/25/2023 20:10:08'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:10:08' prior: 50624990!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:10:15'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:aStreetName:aStreetNumber:town:zipCode: stamp: 'aa 6/25/2023 20:10:18'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:10:45'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:streetName:streetNumber:town:zipCode: stamp: 'aa 6/25/2023 20:10:45'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:10:45' prior: 50625070!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:10:58' prior: 50625104!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:03' prior: 50625121!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: addressStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:07' prior: 50625138!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: addressStreetNumber town: addressTown zipCode: aZipCode province: aProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:12' prior: 50625155!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: addressStreetNumber town: addressTown zipCode: addressZipCode province: aProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:17' prior: 50625173!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: addressStreetNumber town: addressTown zipCode: addressZipCode province: addressProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:40' prior: 50625191!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: addressStreetNumber town: addressTown zipCode: addressZipCode province: addressProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:43' prior: 50625210!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: addressTown zipCode: addressZipCode province: addressProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:48' prior: 50625228!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: addressZipCode province: addressProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:52' prior: 50625246!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: addressProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:56' prior: 50625263!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:13:13' prior: 50624380!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAlemAddressDataIsImportedCorrectly: alemAddress .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1122 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:13:29' prior: 50625297!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAlemAddressDataIsImportedCorrectly: alemAddress .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:19:28' prior: 50625344!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/25/2023 20:19:30'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'aa 6/25/2023 20:20:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/25/2023 20:20:22'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:20:50' prior: 50625391!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'CABA' zipCode: 1001 province: 'CABA' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:21:31' prior: 50625443!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Martinez' zipCode: 1001 province: 'Buenos Aires' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1001 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!methodRemoval: ImportTest #assertAlemAddressDataIsImportedCorrectly: stamp: 'aa 6/25/2023 20:21:37'!
assertAlemAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!

!methodRemoval: ImportTest #assertMaipuAddressDataIsImportedCorrectly: stamp: 'aa 6/25/2023 20:21:41'!
assertMaipuAddressDataIsImportedCorrectly: maipuAddress

	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:21:58' prior: 50625490!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Martinez' zipCode: 1001 province: 'Buenos Aires' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:22:03' prior: 50625567!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1001 province: 'Buenos Aires' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!methodRemoval: ImportTest #assertSanMartinAddressDataIsImportedCorrectly: stamp: 'aa 6/25/2023 20:22:07'!
assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress

	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:22:12' prior: 50625618!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'Buenos Aires' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/25/2023 20:22:15'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:22:44' prior: 50625683!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/25/2023 20:22:45'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'aa 6/25/2023 20:22:46'!
PASSED!
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:23:24'!
assertCustomerHas: aNumberOfAddresses addresses: aCustomer

	^ self assert: aNumberOfAddresses equals: aCustomer amountOfAddresses! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:23:38' prior: 50625736!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertCustomerHas: 2 addresses: customerPepe  .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:23:54' prior: 50625798!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertCustomerHas: 2 addresses: customerPepe  .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	self assertCustomerHas: 1 addresses: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

----STARTUP---- (26 June 2023 15:50:45) as C:\Users\Santiago\Desktop\UBA\Inge1\Ej10\windows64\CuisUniversity-5832.image!


!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:54'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:54'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/22/2023 21:59:48'!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAlemAddressDataIsImportedCorrectly: alemAddress .
	
	! !
!ImportTest methodsFor: 'setup-and-teardown' stamp: 'aa 6/22/2023 20:34:42' overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !
!ImportTest methodsFor: 'setup-and-teardown' stamp: 'aa 6/22/2023 20:35:14' overrides: 16961402!
tearDown

	session commit.
	session close! !
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/22/2023 21:23:27'!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/22/2023 21:59:48'!
assertAlemAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/22/2023 21:57:01'!
assertDataBaseHasTwoCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/22/2023 21:59:33'!
assertJuansDattaIsImportedCorrectly: customerJuan

	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/22/2023 21:59:15'!
assertMaipuAddressDataIsImportedCorrectly: maipuAddress

	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/22/2023 21:58:23'!
assertPepeHasTwoAddresses: customerPepe

	^ self assert: 2 equals: customerPepe amountOfAddresses! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/22/2023 21:58:04'!
assertPepesDataIsImportedCorrectly: customerPepe

	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/22/2023 21:58:45'!
assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress

	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province! !

!classDefinition: #Address category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:55'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:55'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
province

	^province! !
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetName

	^streetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber

	^streetNumber ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
town

	^town! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
town: aTown

	town := aTown! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode

	^zipCode! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode: aZipCode

	zipCode := aZipCode! !

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:55'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:55'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
addresses

	^ addresses! !
!Customer methodsFor: 'addresses' stamp: 'aa 6/22/2023 21:45:24'!
addressesThatSatisfy: aConditionBlock

	^ addresses select: [:each | aConditionBlock value: each ]! !
!Customer methodsFor: 'addresses' stamp: 'aa 6/22/2023 21:37:43'!
amountOfAddresses

	^ addresses size! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
firstName

	^firstName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
firstName: aName

	firstName := aName! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
lastName

	^lastName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationType

	^identificationType ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:56'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:56'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 00:19:29'!
beginTransaction

	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 19:17:36'!
commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'closing' stamp: 'HAW 5/22/2022 00:19:29'!
close

	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 19:29:06'!
objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29'!
initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'id' stamp: 'HAW 5/22/2022 00:19:29'!
newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 5/22/2022 00:19:29'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:57'!
DataBaseSession class
	instanceVariableNames: ''!

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'aa 6/26/2023 15:50:57'!
DataBaseSession class
	instanceVariableNames: ''!
!DataBaseSession class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 00:19:29'!
for: aConfiguration

	^self new initializeFor: aConfiguration! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:06:09'!
assertAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:06:48' prior: 50626307!
assertAddressDataIsImportedCorrectly: alemAddress

	| streetName |
	streetName := 'Alem'.
	self assert: streetName equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:07:36' prior: 50626320!
assertAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:08:31'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName 

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly: stamp: 'aa 6/26/2023 15:50:57'!
assertAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:08:31' prior: 50626346!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName 

	self assert: streetName equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:08:43'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber  

	self assert: streetName equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:aStreetName: stamp: 'aa 6/26/2023 15:50:57'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName 

	self assert: streetName equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:08:43' prior: 50626386!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber  

	self assert: streetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:09:08'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber town: aTown   

	self assert: streetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:aStreetName:aStreetNumber: stamp: 'aa 6/26/2023 15:50:57'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber  

	self assert: streetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:09:08' prior: 50626429!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: streetName aStreetNumber: streetNumber town: aTown   

	self assert: streetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:09:14' prior: 50626460!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: streetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: streetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:09:19' prior: 50626475!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:09:27'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:streetName:streetNumber:town: stamp: 'aa 6/26/2023 15:50:57'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:10:08'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:aStreetName:aStreetNumber:town: stamp: 'aa 6/26/2023 15:50:57'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown   

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:10:08' prior: 50626536!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:10:15'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:aStreetName:aStreetNumber:town:zipCode: stamp: 'aa 6/26/2023 15:50:58'!
assertAddressDataIsImportedCorrectly: alemAddress aStreetName: aStreetName aStreetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:10:45'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province! !

!methodRemoval: ImportTest #assertAddressDataIsImportedCorrectly:streetName:streetNumber:town:zipCode: stamp: 'aa 6/26/2023 15:50:58'!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode    

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/25/2023 20:10:45' prior: 50626616!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:10:58' prior: 50626650!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:03' prior: 50626667!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: addressStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:07' prior: 50626684!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: addressStreetNumber town: addressTown zipCode: aZipCode province: aProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:12' prior: 50626701!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: addressStreetNumber town: addressTown zipCode: addressZipCode province: aProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:17' prior: 50626719!
assertAddressDataIsImportedCorrectly: alemAddress streetName: addressStreetName streetNumber: addressStreetNumber town: addressTown zipCode: addressZipCode province: addressProvince     

	self assert: addressStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:40' prior: 50626737!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: addressStreetNumber town: addressTown zipCode: addressZipCode province: addressProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: addressStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:43' prior: 50626756!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: addressTown zipCode: addressZipCode province: addressProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: addressTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:48' prior: 50626774!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: addressZipCode province: addressProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: addressZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:52' prior: 50626792!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: addressProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: addressProvince equals: alemAddress province! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:11:56' prior: 50626809!
assertAddressDataIsImportedCorrectly: alemAddress streetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince     

	self assert: aStreetName equals: alemAddress streetName .
	self assert: aStreetNumber equals: alemAddress streetNumber .
	self assert: aTown equals: alemAddress town .
	self assert: aZipCode equals: alemAddress zipCode .
	self assert: aProvince equals: alemAddress province! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:13:13' prior: 50625919!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAlemAddressDataIsImportedCorrectly: alemAddress .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1122 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:13:29' prior: 50626843!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAlemAddressDataIsImportedCorrectly: alemAddress .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:19:28' prior: 50626890!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertMaipuAddressDataIsImportedCorrectly: maipuAddress .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:20:50' prior: 50626937!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'CABA' zipCode: 1001 province: 'CABA' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:21:31' prior: 50626982!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Martinez' zipCode: 1001 province: 'Buenos Aires' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1001 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!methodRemoval: ImportTest #assertAlemAddressDataIsImportedCorrectly: stamp: 'aa 6/26/2023 15:50:58'!
assertAlemAddressDataIsImportedCorrectly: alemAddress

	self assert: 'Alem' equals: alemAddress streetName .
	self assert: 1122 equals: alemAddress streetNumber .
	self assert: 'CABA' equals: alemAddress town .
	self assert: 1001 equals: alemAddress zipCode .
	self assert: 'CABA' equals: alemAddress province!

!methodRemoval: ImportTest #assertMaipuAddressDataIsImportedCorrectly: stamp: 'aa 6/26/2023 15:50:58'!
assertMaipuAddressDataIsImportedCorrectly: maipuAddress

	self assert: 'Maipu' equals: maipuAddress streetName .
	self assert: 888 equals: maipuAddress streetNumber .
	self assert: 'Florida' equals: maipuAddress town .
	self assert: 1122 equals: maipuAddress zipCode .
	self assert: 'Buenos Aires' equals: maipuAddress province!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:21:58' prior: 50627029!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Martinez' zipCode: 1001 province: 'Buenos Aires' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:22:03' prior: 50627106!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1001 province: 'Buenos Aires' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!methodRemoval: ImportTest #assertSanMartinAddressDataIsImportedCorrectly: stamp: 'aa 6/26/2023 15:50:58'!
assertSanMartinAddressDataIsImportedCorrectly: sanMartinAddress

	self assert: 'San Martin' equals: sanMartinAddress streetName .
	self assert: 3322 equals: sanMartinAddress streetNumber .
	self assert: 'Olivos' equals: sanMartinAddress town .
	self assert: 1636 equals: sanMartinAddress zipCode .
	self assert: 'BsAs' equals: sanMartinAddress province!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:22:12' prior: 50627157!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'Buenos Aires' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:22:44' prior: 50627222!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertPepeHasTwoAddresses: customerPepe .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/25/2023 20:23:24'!
assertCustomerHas: aNumberOfAddresses addresses: aCustomer

	^ self assert: aNumberOfAddresses equals: aCustomer amountOfAddresses! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:23:38' prior: 50627273!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertCustomerHas: 2 addresses: customerPepe  .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/25/2023 20:23:54' prior: 50627330!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertCustomerHas: 2 addresses: customerPepe  .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertJuansDattaIsImportedCorrectly: customerJuan .
	
	self assertCustomerHas: 1 addresses: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/26/2023 15:57:51'!
assertCustomerDataIsImportedCorrectly: aCustomer

	self assert: 'Juan' equals: aCustomer firstName . 
	self assert: 'Perez' equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/26/2023 15:58:20'!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName 

	self assert: 'Juan' equals: aCustomer firstName . 
	self assert: 'Perez' equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !

!methodRemoval: ImportTest #assertCustomerDataIsImportedCorrectly: stamp: 'aa 6/26/2023 15:58:20'!
assertCustomerDataIsImportedCorrectly: aCustomer

	self assert: 'Juan' equals: aCustomer firstName . 
	self assert: 'Perez' equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 15:58:20' prior: 50627444!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName 

	self assert: firstName equals: aCustomer firstName . 
	self assert: 'Perez' equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/26/2023 15:58:32'!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName  

	self assert: firstName equals: aCustomer firstName . 
	self assert: 'Perez' equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !

!methodRemoval: ImportTest #assertCustomerDataIsImportedCorrectly:firstName: stamp: 'aa 6/26/2023 15:58:32'!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName 

	self assert: firstName equals: aCustomer firstName . 
	self assert: 'Perez' equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 15:58:33' prior: 50627481!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName  

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/26/2023 15:58:54'!
identificationType: identificationType assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName  

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !

!methodRemoval: ImportTest #assertCustomerDataIsImportedCorrectly:firstName:lastName: stamp: 'aa 6/26/2023 15:58:54'!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName  

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: 'C' equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 15:58:54' prior: 50627521!
identificationType: identificationType assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName  

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: identificationType equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/26/2023 15:59:07'!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName identificationType: identificationType

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: identificationType equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !

!methodRemoval: ImportTest #identificationType:assertCustomerDataIsImportedCorrectly:firstName:lastName: stamp: 'aa 6/26/2023 15:59:09'!
identificationType: identificationType assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName  

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: identificationType equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber!
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/26/2023 15:59:24'!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName identificationType: identificationType identificationNumber: identificationNumber 

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: identificationType equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber! !

!methodRemoval: ImportTest #assertCustomerDataIsImportedCorrectly:firstName:lastName:identificationType: stamp: 'aa 6/26/2023 15:59:24'!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName identificationType: identificationType

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: identificationType equals: aCustomer identificationType .
	self assert: '23-25666777-9' equals: aCustomer identificationNumber!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 15:59:24' prior: 50627595!
assertCustomerDataIsImportedCorrectly: aCustomer firstName: firstName lastName: lastName identificationType: identificationType identificationNumber: identificationNumber 

	self assert: firstName equals: aCustomer firstName . 
	self assert: lastName equals: aCustomer lastName .
	self assert: identificationType equals: aCustomer identificationType .
	self assert: identificationNumber equals: aCustomer identificationNumber! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 16:02:42' prior: 50627381!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertPepesDataIsImportedCorrectly: customerPepe .
	
	self assertCustomerHas: 2 addresses: customerPepe  .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertCustomerDataIsImportedCorrectly: customerJuan firstName: 'Juan' lastName: 'Perez' identificationType: 'D' identificationNumber: '23-25666777-9' .
	
	self assertCustomerHas: 1 addresses: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 16:04:20' prior: 50627644!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasTwoCustomers .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertCustomerDataIsImportedCorrectly: customerPepe firstName: 'Pepe' lastName: 'Sanchez' identificationType: 'D' identificationNumber: '22333444' .
	
	self assertCustomerHas: 2 addresses: customerPepe  .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertCustomerDataIsImportedCorrectly: customerJuan firstName: 'Juan' lastName: 'Perez' identificationType: 'C' identificationNumber: '23-25666777-9' .
	
	self assertCustomerHas: 1 addresses: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/26/2023 16:04:24'!
PASSED!

!methodRemoval: ImportTest #assertJuansDattaIsImportedCorrectly: stamp: 'aa 6/26/2023 16:04:29'!
assertJuansDattaIsImportedCorrectly: customerJuan

	self assert: 'Juan' equals: customerJuan firstName . 
	self assert: 'Perez' equals: customerJuan lastName .
	self assert: 'C' equals: customerJuan identificationType .
	self assert: '23-25666777-9' equals: customerJuan identificationNumber!

!methodRemoval: ImportTest #assertPepesDataIsImportedCorrectly: stamp: 'aa 6/26/2023 16:04:31'!
assertPepesDataIsImportedCorrectly: customerPepe

	self assert: 'Pepe' equals: customerPepe firstName . 
	self assert: 'Sanchez' equals: customerPepe lastName .
	self assert: 'D' equals: customerPepe identificationType .
	self assert: '22333444' equals: customerPepe identificationNumber!

!methodRemoval: ImportTest #assertPepeHasTwoAddresses: stamp: 'aa 6/26/2023 16:04:34'!
assertPepeHasTwoAddresses: customerPepe

	^ self assert: 2 equals: customerPepe amountOfAddresses!
!ImportTest methodsFor: 'asserts' stamp: 'aa 6/26/2023 16:05:08'!
assertDataBaseHasCustomers: aNumberOfCustomers

	^ self assert: aNumberOfCustomers equals: (session selectAllOfType: Customer) size! !

!methodRemoval: ImportTest #assertDataBaseHasTwoCustomers stamp: 'aa 6/26/2023 16:05:11'!
assertDataBaseHasTwoCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 16:05:17' prior: 50627699!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers .
	
	self assertDataBaseHasCustomers: 2 .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertCustomerDataIsImportedCorrectly: customerPepe firstName: 'Pepe' lastName: 'Sanchez' identificationType: 'D' identificationNumber: '22333444' .
	
	self assertCustomerHas: 2 addresses: customerPepe  .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertCustomerDataIsImportedCorrectly: customerJuan firstName: 'Juan' lastName: 'Perez' identificationType: 'C' identificationNumber: '23-25666777-9' .
	
	self assertCustomerHas: 1 addresses: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/26/2023 16:05:22'!
PASSED!

Object subclass: #ImportCustomers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportCustomers category: 'CustomerImporter' stamp: 'aa 6/26/2023 16:14:20'!
Object subclass: #ImportCustomers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:16:49' prior: 50625973!
importCustomers

	| newCustomer line aStream |
	aStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA' .

	line := aStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := aStream nextLine. ].
	session commit.
aStream close! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/26/2023 16:16:57'!
PASSED!
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:17:39'!
importData

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:18:45' prior: 50627876!
importCustomers

	| newCustomer line aStream |
	aStream := self importData .
	line := aStream nextLine .
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := aStream nextLine. ].
	session commit.
aStream close! !
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:19:01' prior: 50627925!
importCustomers

	| newCustomer line aStream |
	aStream := self importData .
	line := aStream nextLine .
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := aStream nextLine. ].
	session commit.
	aStream close! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/26/2023 16:19:07'!
PASSED!

!classDefinition: #ImportCustomers category: 'CustomerImporter' stamp: 'aa 6/26/2023 16:22:11'!
Object subclass: #ImportCustomers
	instanceVariableNames: 'stream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportCustomers category: 'CustomerImporter' stamp: 'aa 6/26/2023 16:22:12'!
Object subclass: #ImportCustomers
	instanceVariableNames: 'stream session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportCustomers methodsFor: 'no messages' stamp: 'aa 6/26/2023 16:22:10' overrides: 16902254!
value

	| newCustomer line |
	line := stream nextLine .
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := stream nextLine. ].
	session commit.
	stream close! !
!ImportCustomers methodsFor: 'as yet unclassified' stamp: 'aa 6/26/2023 16:23:01'!
initializeWith: aStream on: aSession

	stream := aStream .
	session := aSession ! !
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:23:30' prior: 50627959!
importCustomers

	! !
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:24:36'!
importCustomersOn: aSession

	ImportCustomers initializeWith: self importData on: aSession! !

!methodRemoval: ImportTest #importCustomers stamp: 'aa 6/26/2023 16:24:39'!
importCustomers

	!
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:25:35'!
importCustomers: aStream

	ImportCustomers initializeWith: aStream on: session! !

!methodRemoval: ImportTest #importCustomersOn: stamp: 'aa 6/26/2023 16:25:36'!
importCustomersOn: aSession

	ImportCustomers initializeWith: self importData on: aSession!
!ImportTest methodsFor: 'tests' stamp: 'aa 6/26/2023 16:25:49' prior: 50627803!
test01Import
	
	| customerPepe  customerJuan maipuAddress sanMartinAddress alemAddress |
	
	self importCustomers: self importData .
	
	self assertDataBaseHasCustomers: 2 .
	
	customerPepe := (session select: [:customer | customer identificationType = 'D' and: customer identificationNumber = '22333444'] ofType: Customer) anyOne .
	self assertCustomerDataIsImportedCorrectly: customerPepe firstName: 'Pepe' lastName: 'Sanchez' identificationType: 'D' identificationNumber: '22333444' .
	
	self assertCustomerHas: 2 addresses: customerPepe  .
	
	sanMartinAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'San Martin' and: address streetNumber = 3322]) first .
	self assertAddressDataIsImportedCorrectly: sanMartinAddress streetName: 'San Martin' streetNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs' .
	
	maipuAddress := (customerPepe addressesThatSatisfy: [:address | address streetName = 'Maipu' and: address streetNumber = 888]) first .
	self assertAddressDataIsImportedCorrectly: maipuAddress streetName: 'Maipu' streetNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires' .
	
	customerJuan := (session select: [:customer | customer identificationType = 'C' and: customer identificationNumber = '23-25666777-9'] ofType: Customer) anyOne.
	self assertCustomerDataIsImportedCorrectly: customerJuan firstName: 'Juan' lastName: 'Perez' identificationType: 'C' identificationNumber: '23-25666777-9' .
	
	self assertCustomerHas: 1 addresses: customerJuan .
	
	alemAddress := (customerJuan addressesThatSatisfy: [:address | address streetName = 'Alem' and: address streetNumber = 1122]) first .
	self assertAddressDataIsImportedCorrectly: alemAddress streetName: 'Alem' streetNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	
	! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/26/2023 16:25:51'!
ERROR!
!ImportCustomers class methodsFor: 'no messages' stamp: 'aa 6/26/2023 16:26:30'!
with: aStream on: aSession

	^self new initializeWith: aStream on: aSession ! !
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:26:40' prior: 50628061!
importCustomers: aStream

	ImportCustomers with: aStream on: session! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/26/2023 16:26:56'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'aa 6/26/2023 16:26:56'!
FAILURE!
!ImportTest methodsFor: 'data-import' stamp: 'aa 6/26/2023 16:27:25' prior: 50628139!
importCustomers: aStream

	(ImportCustomers with: aStream on: session) value! !

!testRun: #ImportTest #test01Import stamp: 'aa 6/26/2023 16:27:31'!
PASSED!